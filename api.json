{
  "openapi": "3.0.0",
  "info": {
    "title": "Terra REST apis",
    "description": "Terra LCD and FCD docs",
    "contact": {},
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://phoenix-lcd.terra.dev"
    },
    {
      "url": "https://pisco-lcd.terra.dev"
    }
  ],
  "paths": {
    "/node_info": {
      "get": {
        "tags": [
          "Terra REST"
        ],
        "summary": "The properties of the connected node",
        "description": "Information about the connected node",
        "operationId": "Thepropertiesoftheconnectednode",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Node status",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ThepropertiesoftheconnectednodeResponse"
                }
              }
            }
          },
          "500": {
            "description": "Failed to query node status",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": false
      }
    },
    "/syncing": {
      "get": {
        "tags": [
          "Tendermint RPC"
        ],
        "summary": "Syncing state of node",
        "description": "Get if the node is currently syning with other nodes",
        "operationId": "Syncingstateofnode",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Node syncing status",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SyncingstateofnodeResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server internal error",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": false
      }
    },
    "/blocks/latest": {
      "get": {
        "tags": [
          "Tendermint RPC"
        ],
        "summary": "Get the latest block",
        "description": "Get the latest block",
        "operationId": "Getthelatestblock",
        "parameters": [],
        "responses": {
          "200": {
            "description": "The latest block",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BlockQuery"
                }
              }
            }
          },
          "500": {
            "description": "Server internal error",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": false
      }
    },
    "/blocks/{height}": {
      "get": {
        "tags": [
          "Tendermint RPC"
        ],
        "summary": "Get a block at a certain height",
        "description": "Get a block at a certain height",
        "operationId": "Getablockatacertainheight",
        "parameters": [
          {
            "name": "height",
            "in": "path",
            "description": "Block height",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "number",
              "format": "double",
              "example": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The block at a specific height",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BlockQuery"
                }
              }
            }
          },
          "400": {
            "description": "Invalid height",
            "headers": {},
            "content": {}
          },
          "404": {
            "description": "Request block height doesn't",
            "headers": {},
            "content": {}
          },
          "500": {
            "description": "Server internal error",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": false
      }
    },
    "/validatorsets/latest": {
      "get": {
        "tags": [
          "Tendermint RPC"
        ],
        "summary": "Get the latest validator set",
        "description": "Get the latest validator set",
        "operationId": "Getthelatestvalidatorset",
        "parameters": [],
        "responses": {
          "200": {
            "description": "The validator set at the latest block height",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetthelatestvalidatorsetResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server internal error",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": false
      }
    },
    "/validatorsets/{height}": {
      "get": {
        "tags": [
          "Tendermint RPC"
        ],
        "summary": "Get a validator set a certain height",
        "description": "Get a validator set a certain height",
        "operationId": "Getavalidatorsetacertainheight",
        "parameters": [
          {
            "name": "height",
            "in": "path",
            "description": "Block height",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "number",
              "format": "double",
              "example": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The validator set at a specific block height",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetavalidatorsetacertainheightResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid height",
            "headers": {},
            "content": {}
          },
          "404": {
            "description": "Block at height not available",
            "headers": {},
            "content": {}
          },
          "500": {
            "description": "Server internal error",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": false
      }
    },
    "/txs/{hash}": {
      "get": {
        "tags": [
          "Transactions"
        ],
        "summary": "Get a Tx by hash",
        "description": "Retrieve a transaction using its hash.",
        "operationId": "GetaTxbyhash",
        "parameters": [
          {
            "name": "hash",
            "in": "path",
            "description": "Tx hash",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string",
              "example": "BCBE20E8D46758B96AE5883B792858296AC06E51435490FBDCAE25A72B3CC76B"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Tx with the provided hash",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TxQuery"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": true
      }
    },
    "/txs": {
      "get": {
        "tags": [
          "Transactions"
        ],
        "summary": "Search transactions",
        "description": "Search transactions by events.",
        "operationId": "Searchtransactions",
        "parameters": [
          {
            "name": "message.action",
            "in": "query",
            "description": "transaction events such as 'message.action=send' which results in the following endpoint: 'GET /txs?message.action=send'. note that each module documents its own events. look for xx_events.md in the corresponding cosmos-sdk/docs/spec directory",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "example": "send"
            }
          },
          {
            "name": "message.sender",
            "in": "query",
            "description": "transaction events with sender: 'GET /txs?message.action=send&message.sender=terra1wg2mlrxdmnnkkykgqg4znky86nyrtc45q336yv'",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "example": "terra1wg2mlrxdmnnkkykgqg4znky86nyrtc45q336yv"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of items per page",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 1
            }
          },
          {
            "name": "tx.minheight",
            "in": "query",
            "description": "transactions on blocks with height greater or equal this value",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 25
            }
          },
          {
            "name": "tx.maxheight",
            "in": "query",
            "description": "transactions on blocks with height less than or equal this value",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 800000
            }
          }
        ],
        "responses": {
          "200": {
            "description": "All txs matching the provided events",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedQueryTxs"
                }
              }
            }
          },
          "400": {
            "description": "Invalid search events",
            "headers": {},
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": true
      },
      "post": {
        "tags": [
          "Transactions"
        ],
        "summary": "Broadcast a signed tx",
        "description": "Broadcast a signed tx to a full node",
        "operationId": "Broadcastasignedtx",
        "parameters": [],
        "requestBody": {
          "description": "The tx must be a signed StdTx. The supported broadcast modes include `\"block\"`(return after tx commit), `\"sync\"`(return afer CheckTx) and `\"async\"`(return right away).",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/txBroadcast"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Tx broadcasting result",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BroadcastTxCommitResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": true
      }
    },
    "/txs/encode": {
      "post": {
        "tags": [
          "Transactions"
        ],
        "summary": "Encode a legacy transaction to the Proto wire format",
        "description": "Encode a legacy transaction (signed or not) from JSON to base64-encoded Proto serialized bytes",
        "operationId": "EncodealegacytransactiontotheProtowireformat",
        "parameters": [],
        "requestBody": {
          "description": "The tx to encode",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/tx10"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The tx was successfully decoded and re-encoded",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EncodealegacytransactiontotheProtowireformatResponse"
                }
              }
            }
          },
          "400": {
            "description": "The tx was malformed",
            "headers": {},
            "content": {}
          },
          "500": {
            "description": "Server internal error",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": true
      }
    },
    "/txs/decode": {
      "post": {
        "tags": [
          "Transactions"
        ],
        "summary": "Decode a transaction from the Amino wire format",
        "description": "Decode a transaction (signed or not) from base64-encoded Amino serialized bytes to JSON",
        "operationId": "DecodeatransactionfromtheAminowireformat",
        "parameters": [],
        "requestBody": {
          "description": "The tx to decode",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/tx12"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The tx was successfully decoded",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StdTx"
                }
              }
            }
          },
          "400": {
            "description": "The tx was malformed",
            "headers": {},
            "content": {}
          },
          "500": {
            "description": "Server internal error",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": true
      }
    },
    "/txs/estimate_fee": {
      "post": {
        "tags": [
          "Transactions"
        ],
        "summary": "Estimate fee and gas of a transaction",
        "description": "Estimate fee and gas of a transaction according to given parameters",
        "operationId": "Estimatefeeandgasofatransaction",
        "parameters": [],
        "requestBody": {
          "description": "The sender and tx information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/transaction"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The fee was successfully estimated",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EstimatefeeandgasofatransactionResponse"
                }
              }
            }
          },
          "400": {
            "description": "The tx was malformed",
            "headers": {},
            "content": {}
          },
          "500": {
            "description": "Server internal error",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": true
      }
    },
    "/v1/txs/gas_prices": {
      "get": {
        "tags": [
          "Transactions"
        ],
        "summary": "Get gas prices",
        "description": "Get gas prices",
        "operationId": "Getgasprices",
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "enum": [
                "application/json"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/getGasPricesResult"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/mempool": {
      "get": {
        "tags": [
          "Transactions"
        ],
        "summary": "Get transactions in mempool",
        "description": "Get transactions in mempool",
        "operationId": "Gettransactionsinmempool",
        "parameters": [
          {
            "name": "account",
            "in": "query",
            "description": "Account address",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Content-Type",
            "in": "header",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "enum": [
                "application/json"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/txs"
                  },
                  "description": ""
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/mempool/{txhash}": {
      "get": {
        "tags": [
          "Transactions"
        ],
        "summary": "Get transaction in mempool",
        "description": "Get transaction in mempool",
        "operationId": "Gettransactioninmempool",
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "enum": [
                "application/json"
              ],
              "type": "string"
            }
          },
          {
            "name": "txhash",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/getMempoolByHashResult"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/tx/{txhash}": {
      "get": {
        "tags": [
          "Transactions"
        ],
        "summary": "Get Tx",
        "description": "Get Tx",
        "operationId": "GetTx",
        "parameters": [
          {
            "name": "txhash",
            "in": "path",
            "description": "Tx Hash",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Content-Type",
            "in": "header",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "enum": [
                "application/json"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/getTxResult"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/txs": {
      "get": {
        "tags": [
          "Transactions"
        ],
        "summary": "Get Tx List",
        "description": "Get Tx List",
        "operationId": "GetTxList",
        "parameters": [
          {
            "name": "account",
            "in": "query",
            "description": "Account address",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "block",
            "in": "query",
            "description": "Block number",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "chainId",
            "in": "query",
            "description": "Chain ID of Blockchain (default: chain id of mainnet)",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Use next property from previous result for pagination",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Size of page",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "Content-Type",
            "in": "header",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "enum": [
                "application/json"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/getTxListResult"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "Transactions"
        ],
        "summary": "Broadcast Txs",
        "description": "Broadcast Txs",
        "operationId": "BroadcastTxs",
        "parameters": [],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/postTxsBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/postTxsResult"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/bank/balances/{address}": {
      "get": {
        "tags": [
          "Bank"
        ],
        "summary": "Get the account balances",
        "description": "Get the account balances",
        "operationId": "Gettheaccountbalances",
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "description": "Account address in bech32 format",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string",
              "example": "terra1wg2mlrxdmnnkkykgqg4znky86nyrtc45q336yv"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Account balances",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Coin"
                  },
                  "description": ""
                }
              }
            }
          },
          "500": {
            "description": "Server internal error",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": true
      }
    },
    "/bank/accounts/{address}/transfers": {
      "post": {
        "tags": [
          "Bank"
        ],
        "summary": "Send coins from one account to another",
        "description": "Send coins from one account to another",
        "operationId": "Sendcoinsfromoneaccounttoanother",
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "description": "Account address in bech32 format",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string",
              "example": "terra1wg2mlrxdmnnkkykgqg4znky86nyrtc45q336yv"
            }
          }
        ],
        "requestBody": {
          "description": "The sender and tx information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/account2"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "Tx was successfully generated",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StdTx"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "headers": {},
            "content": {}
          },
          "500": {
            "description": "Server internal error",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": true
      }
    },
    "/bank/total": {
      "get": {
        "tags": [
          "Bank"
        ],
        "summary": "Total supply of coins in the chain",
        "description": "Total supply of coins in the chain",
        "operationId": "Totalsupplyofcoinsinthechain",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Supply"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": true
      }
    },
    "/bank/total/{denomination}": {
      "get": {
        "tags": [
          "Bank"
        ],
        "summary": "Total supply of a single coin denomination",
        "description": "Total supply of a single coin denomination",
        "operationId": "Totalsupplyofasinglecoindenomination",
        "parameters": [
          {
            "name": "denomination",
            "in": "path",
            "description": "Coin denomination",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string",
              "example": "uluna"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Invalid coin denomination",
            "headers": {},
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": true
      }
    },
    "/v1/bank/{account}": {
      "get": {
        "tags": [
          "Bank"
        ],
        "summary": "Get account information",
        "description": "Get account information",
        "operationId": "Getaccountinformation",
        "parameters": [
          {
            "name": "account",
            "in": "path",
            "description": "Account address in bech32 format",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Content-Type",
            "in": "header",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "enum": [
                "application/json"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/getBankResult"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/auth/accounts/{address}": {
      "get": {
        "tags": [
          "Auth"
        ],
        "summary": "Get the account information on blockchain",
        "description": "Get the account information on blockchain",
        "operationId": "Gettheaccountinformationonblockchain",
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "description": "Account address",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string",
              "example": "terra1wg2mlrxdmnnkkykgqg4znky86nyrtc45q336yv"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Account information on the blockchain",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GettheaccountinformationonblockchainResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server internal error",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": true
      }
    },
    "/staking/delegators/{delegatorAddr}/delegations": {
      "get": {
        "tags": [
          "Staking"
        ],
        "summary": "Get all delegations from a delegator",
        "description": "Get all delegations from a delegator",
        "operationId": "Getalldelegationsfromadelegator",
        "parameters": [
          {
            "name": "delegatorAddr",
            "in": "path",
            "description": "Bech32 AccAddress of Delegator",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string",
              "example": "terra1wg2mlrxdmnnkkykgqg4znky86nyrtc45q336yv"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Delegation"
                  },
                  "description": ""
                }
              }
            }
          },
          "400": {
            "description": "Invalid delegator address",
            "headers": {},
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": true
      },
      "post": {
        "tags": [
          "Staking"
        ],
        "summary": "Submit delegation",
        "description": "Submit delegation",
        "operationId": "Submitdelegation",
        "parameters": [
          {
            "name": "delegatorAddr",
            "in": "path",
            "description": "Bech32 AccAddress of Delegator",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string",
              "example": "terra1wg2mlrxdmnnkkykgqg4znky86nyrtc45q336yv"
            }
          }
        ],
        "requestBody": {
          "description": "Delegate an amount of liquid coins to a validator",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/delegation7"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "OK",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StdTx"
                }
              }
            }
          },
          "400": {
            "description": "Invalid delegator address or delegation request body",
            "headers": {},
            "content": {}
          },
          "401": {
            "description": "Key password is wrong",
            "headers": {},
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": true
      }
    },
    "/staking/delegators/{delegatorAddr}/delegations/{validatorAddr}": {
      "get": {
        "tags": [
          "Staking"
        ],
        "summary": "Query the current delegation between a delegator and a validator",
        "description": "Query the current delegation between a delegator and a validator",
        "operationId": "Querythecurrentdelegationbetweenadelegatorandavalidator",
        "parameters": [
          {
            "name": "delegatorAddr",
            "in": "path",
            "description": "Bech32 AccAddress of Delegator",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string",
              "example": "terra1wg2mlrxdmnnkkykgqg4znky86nyrtc45q336yv"
            }
          },
          {
            "name": "validatorAddr",
            "in": "path",
            "description": "Bech32 OperatorAddress of validator",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string",
              "example": "terravaloper1wg2mlrxdmnnkkykgqg4znky86nyrtc45q7a85l"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Delegation"
                }
              }
            }
          },
          "400": {
            "description": "Invalid delegator address or validator address",
            "headers": {},
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": true
      }
    },
    "/staking/delegators/{delegatorAddr}/unbonding_delegations": {
      "get": {
        "tags": [
          "Staking"
        ],
        "summary": "Get all unbonding delegations from a delegator",
        "description": "Get all unbonding delegations from a delegator",
        "operationId": "Getallunbondingdelegationsfromadelegator",
        "parameters": [
          {
            "name": "delegatorAddr",
            "in": "path",
            "description": "Bech32 AccAddress of Delegator",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string",
              "example": "terra1wg2mlrxdmnnkkykgqg4znky86nyrtc45q336yv"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UnbondingDelegation"
                  },
                  "description": ""
                }
              }
            }
          },
          "400": {
            "description": "Invalid delegator address",
            "headers": {},
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": true
      },
      "post": {
        "tags": [
          "Staking"
        ],
        "summary": "Submit an unbonding delegation",
        "description": "Submit an unbonding delegation",
        "operationId": "Submitanunbondingdelegation",
        "parameters": [
          {
            "name": "delegatorAddr",
            "in": "path",
            "description": "Bech32 AccAddress of Delegator",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string",
              "example": "terra1wg2mlrxdmnnkkykgqg4znky86nyrtc45q336yv"
            }
          }
        ],
        "requestBody": {
          "description": "Unbond an amount of bonded shares from a validator",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/delegation7"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "OK",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StdTx"
                }
              }
            }
          },
          "400": {
            "description": "Invalid delegator address or unbonding delegation request body",
            "headers": {},
            "content": {}
          },
          "401": {
            "description": "Key password is wrong",
            "headers": {},
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": true
      }
    },
    "/staking/delegators/{delegatorAddr}/unbonding_delegations/{validatorAddr}": {
      "get": {
        "tags": [
          "Staking"
        ],
        "summary": "Query all unbonding delegations between a delegator and a validator",
        "description": "Query all unbonding delegations between a delegator and a validator",
        "operationId": "Queryallunbondingdelegationsbetweenadelegatorandavalidator",
        "parameters": [
          {
            "name": "delegatorAddr",
            "in": "path",
            "description": "Bech32 AccAddress of Delegator",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string",
              "example": "terra1wg2mlrxdmnnkkykgqg4znky86nyrtc45q336yv"
            }
          },
          {
            "name": "validatorAddr",
            "in": "path",
            "description": "Bech32 OperatorAddress of validator",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string",
              "example": "terravaloper1wg2mlrxdmnnkkykgqg4znky86nyrtc45q7a85l"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnbondingDelegation"
                }
              }
            }
          },
          "400": {
            "description": "Invalid delegator address or validator address",
            "headers": {},
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": true
      }
    },
    "/staking/redelegations": {
      "get": {
        "tags": [
          "Staking"
        ],
        "summary": "Get all redelegations (filter by query params)",
        "description": "Get all redelegations (filter by query params)",
        "operationId": "Getallredelegations(filterbyqueryparams)",
        "parameters": [
          {
            "name": "delegator",
            "in": "query",
            "description": "Bech32 AccAddress of Delegator",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "validator_from",
            "in": "query",
            "description": "Bech32 ValAddress of SrcValidator",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "validator_to",
            "in": "query",
            "description": "Bech32 ValAddress of DstValidator",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Redelegation"
                  },
                  "description": ""
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": true
      }
    },
    "/staking/delegators/{delegatorAddr}/redelegations": {
      "post": {
        "tags": [
          "Staking"
        ],
        "summary": "Submit a redelegation",
        "description": "Submit a redelegation",
        "operationId": "Submitaredelegation",
        "parameters": [
          {
            "name": "delegatorAddr",
            "in": "path",
            "description": "Bech32 AccAddress of Delegator",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string",
              "example": "terra1wg2mlrxdmnnkkykgqg4znky86nyrtc45q336yv"
            }
          }
        ],
        "requestBody": {
          "description": "The sender and tx information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/delegation10"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Tx was successfully generated",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StdTx"
                }
              }
            }
          },
          "400": {
            "description": "Invalid delegator address or redelegation request body",
            "headers": {},
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": true
      }
    },
    "/staking/delegators/{delegatorAddr}/validators": {
      "get": {
        "tags": [
          "Staking"
        ],
        "summary": "Query all validators that a delegator is bonded to",
        "description": "Query all validators that a delegator is bonded to",
        "operationId": "Queryallvalidatorsthatadelegatorisbondedto",
        "parameters": [
          {
            "name": "delegatorAddr",
            "in": "path",
            "description": "Bech32 AccAddress of Delegator",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string",
              "example": "terra1wg2mlrxdmnnkkykgqg4znky86nyrtc45q336yv"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Validator"
                  },
                  "description": ""
                }
              }
            }
          },
          "400": {
            "description": "Invalid delegator address",
            "headers": {},
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": true
      }
    },
    "/staking/delegators/{delegatorAddr}/validators/{validatorAddr}": {
      "get": {
        "tags": [
          "Staking"
        ],
        "summary": "Query a validator that a delegator is bonded to",
        "description": "Query a validator that a delegator is bonded to",
        "operationId": "Queryavalidatorthatadelegatorisbondedto",
        "parameters": [
          {
            "name": "delegatorAddr",
            "in": "path",
            "description": "Bech32 AccAddress of Delegator",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string",
              "example": "terra1wg2mlrxdmnnkkykgqg4znky86nyrtc45q336yv"
            }
          },
          {
            "name": "validatorAddr",
            "in": "path",
            "description": "Bech32 ValAddress of Delegator",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string",
              "example": "terravaloper1wg2mlrxdmnnkkykgqg4znky86nyrtc45q7a85l"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Validator"
                }
              }
            }
          },
          "400": {
            "description": "Invalid delegator address or validator address",
            "headers": {},
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": true
      }
    },
    "/staking/validators": {
      "get": {
        "tags": [
          "Staking"
        ],
        "summary": "Get all validator candidates. By default it returns only the bonded validators.",
        "description": "Get all validator candidates. By default it returns only the bonded validators.",
        "operationId": "Getallvalidatorcandidates.Bydefaultitreturnsonlythebondedvalidators.",
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "description": "The validator bond status. Must be either 'bonded', 'unbonded', or 'unbonding'.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "example": "bonded"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "The page number.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of items per page.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Validator"
                  },
                  "description": ""
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": true
      }
    },
    "/staking/validators/{validatorAddr}": {
      "get": {
        "tags": [
          "Staking"
        ],
        "summary": "Query the information from a single validator",
        "description": "Query the information from a single validator",
        "operationId": "Querytheinformationfromasinglevalidator",
        "parameters": [
          {
            "name": "validatorAddr",
            "in": "path",
            "description": "Bech32 OperatorAddress of validator",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string",
              "example": "terravaloper1wg2mlrxdmnnkkykgqg4znky86nyrtc45q7a85l"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Validator"
                }
              }
            }
          },
          "400": {
            "description": "Invalid validator address",
            "headers": {},
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": true
      }
    },
    "/staking/validators/{validatorAddr}/delegations": {
      "get": {
        "tags": [
          "Staking"
        ],
        "summary": "Get all delegations from a validator",
        "description": "Get all delegations from a validator",
        "operationId": "Getalldelegationsfromavalidator",
        "parameters": [
          {
            "name": "validatorAddr",
            "in": "path",
            "description": "Bech32 OperatorAddress of validator",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string",
              "example": "terravaloper1wg2mlrxdmnnkkykgqg4znky86nyrtc45q7a85l"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Delegation"
                  },
                  "description": ""
                }
              }
            }
          },
          "400": {
            "description": "Invalid validator address",
            "headers": {},
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": true
      }
    },
    "/staking/validators/{validatorAddr}/unbonding_delegations": {
      "get": {
        "tags": [
          "Staking"
        ],
        "summary": "Get all unbonding delegations from a validator",
        "description": "Get all unbonding delegations from a validator",
        "operationId": "Getallunbondingdelegationsfromavalidator",
        "parameters": [
          {
            "name": "validatorAddr",
            "in": "path",
            "description": "Bech32 OperatorAddress of validator",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string",
              "example": "terravaloper1wg2mlrxdmnnkkykgqg4znky86nyrtc45q7a85l"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UnbondingDelegation"
                  },
                  "description": ""
                }
              }
            }
          },
          "400": {
            "description": "Invalid validator address",
            "headers": {},
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": true
      }
    },
    "/staking/pool": {
      "get": {
        "tags": [
          "Staking"
        ],
        "summary": "Get the current state of the staking pool",
        "description": "Get the current state of the staking pool",
        "operationId": "Getthecurrentstateofthestakingpool",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetthecurrentstateofthestakingpoolResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": true
      }
    },
    "/staking/parameters": {
      "get": {
        "tags": [
          "Staking"
        ],
        "summary": "Get the current staking parameter values",
        "description": "Get the current staking parameter values",
        "operationId": "Getthecurrentstakingparametervalues",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetthecurrentstakingparametervaluesResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": true
      }
    },
    "/v1/staking": {
      "get": {
        "tags": [
          "Staking"
        ],
        "summary": "Get all validators and staking info",
        "description": "Get all validators and staking info",
        "operationId": "Getallvalidatorsandstakinginfo",
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "enum": [
                "application/json"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/validators"
                  },
                  "description": ""
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/staking/{account}": {
      "get": {
        "tags": [
          "Staking"
        ],
        "summary": "Get all validators and staking info with account",
        "description": "Get all validators and staking info with account",
        "operationId": "Getallvalidatorsandstakinginfowithaccount",
        "parameters": [
          {
            "name": "account",
            "in": "path",
            "description": "User's account address",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Content-Type",
            "in": "header",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "enum": [
                "application/json"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/getStakingForAccountResult"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/staking/return": {
      "get": {
        "tags": [
          "Staking"
        ],
        "summary": "Get total staking return",
        "description": "Get total staking return",
        "operationId": "Gettotalstakingreturn",
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "enum": [
                "application/json"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "number",
                  "format": "double"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/staking/validators/{operatorAddr}/claims": {
      "get": {
        "tags": [
          "Staking"
        ],
        "summary": "Get validators claims",
        "description": "Get validators claims",
        "operationId": "Getvalidatorsclaims",
        "parameters": [
          {
            "name": "operatorAddr",
            "in": "path",
            "description": "validators operator address",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Page size",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "Content-Type",
            "in": "header",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "enum": [
                "application/json"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/getValidatorClaimsResult"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/staking/validators/{operatorAddr}/delegations": {
      "get": {
        "tags": [
          "Staking"
        ],
        "summary": "Get validators delegations",
        "description": "Get validators delegations",
        "operationId": "Getvalidatorsdelegations",
        "parameters": [
          {
            "name": "operatorAddr",
            "in": "path",
            "description": "validators operator address",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Page size",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "Content-Type",
            "in": "header",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "enum": [
                "application/json"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/getValidatorDelegationsResult"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/staking/validators/{operatorAddr}/delegators": {
      "get": {
        "tags": [
          "Staking"
        ],
        "summary": "Get validators delegators",
        "description": "Get validators delegators",
        "operationId": "Getvalidatorsdelegators",
        "parameters": [
          {
            "name": "operatorAddr",
            "in": "path",
            "description": "validators operator address",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Page size",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "Content-Type",
            "in": "header",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "enum": [
                "application/json"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/getValidatorDelegatorsResult"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/staking/validators/{operatorAddr}": {
      "get": {
        "tags": [
          "Staking"
        ],
        "summary": "Get validator detail",
        "description": "Get validator detail",
        "operationId": "Getvalidatordetail",
        "parameters": [
          {
            "name": "operatorAddr",
            "in": "path",
            "description": "Operator address",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "account",
            "in": "query",
            "description": "User address",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Content-Type",
            "in": "header",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "enum": [
                "application/json"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/getValidatorDetailResult"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/staking/return/{operatorAddr}": {
      "get": {
        "tags": [
          "Staking"
        ],
        "summary": "Get validators staking return",
        "description": "Get validators staking return",
        "operationId": "Getvalidatorsstakingreturn",
        "parameters": [
          {
            "name": "operatorAddr",
            "in": "path",
            "description": "validators operator address",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Content-Type",
            "in": "header",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "enum": [
                "application/json"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "number",
                  "format": "double"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/staking/validators": {
      "get": {
        "tags": [
          "Staking"
        ],
        "summary": "Get all validator info",
        "description": "Get all validator info",
        "operationId": "Getallvalidatorinfo",
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "enum": [
                "application/json"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/validator15"
                  },
                  "description": ""
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/slashing/signing_infos": {
      "get": {
        "tags": [
          "Slashing"
        ],
        "summary": "Get sign info of given all validators",
        "description": "Get sign info of all validators",
        "operationId": "Getsigninfoofgivenallvalidators",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of items per page",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 5
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigningInfo"
                  },
                  "description": ""
                }
              }
            }
          },
          "400": {
            "description": "Invalid validator public key for one of the validators",
            "headers": {},
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": true
      }
    },
    "/slashing/validators/{validatorAddr}/unjail": {
      "post": {
        "tags": [
          "Slashing"
        ],
        "summary": "Unjail a jailed validator",
        "description": "Send transaction to unjail a jailed validator",
        "operationId": "Unjailajailedvalidator",
        "parameters": [
          {
            "name": "validatorAddr",
            "in": "path",
            "description": "Bech32 validator address",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string",
              "example": "terravaloper1wg2mlrxdmnnkkykgqg4znky86nyrtc45q7a85l"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UnjailBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Tx was successfully generated",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StdTx"
                }
              }
            }
          },
          "400": {
            "description": "Invalid validator address or base_req",
            "headers": {},
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": true
      }
    },
    "/slashing/parameters": {
      "get": {
        "tags": [
          "Slashing"
        ],
        "summary": "Get the current slashing parameters",
        "description": "Get the current slashing parameters",
        "operationId": "Getthecurrentslashingparameters",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetthecurrentslashingparametersResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": true
      }
    },
    "/gov/proposals": {
      "post": {
        "tags": [
          "Governance"
        ],
        "summary": "Submit a proposal",
        "description": "Send transaction to submit a proposal",
        "operationId": "Submitaproposal",
        "parameters": [],
        "requestBody": {
          "description": "valid value of `\"proposal_type\"` can be `\"text\"`, `\"parameter_change\"`, `\"software_upgrade\"`",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/post_proposal_body"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Tx was successfully generated",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StdTx"
                }
              }
            }
          },
          "400": {
            "description": "Invalid proposal body",
            "headers": {},
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": true
      },
      "get": {
        "tags": [
          "Governance"
        ],
        "summary": "Query proposals",
        "description": "Query proposals information with parameters",
        "operationId": "Queryproposals",
        "parameters": [
          {
            "name": "voter",
            "in": "query",
            "description": "voter address",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "depositor",
            "in": "query",
            "description": "depositor address",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "proposal status, valid values can be `\"deposit_period\"`, `\"voting_period\"`, `\"passed\"`, `\"rejected\"`",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TextProposal"
                  },
                  "description": ""
                }
              }
            }
          },
          "400": {
            "description": "Invalid query parameters",
            "headers": {},
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": true
      }
    },
    "/gov/proposals/param_change": {
      "post": {
        "tags": [
          "Governance"
        ],
        "summary": "Generate a parameter change proposal transaction",
        "description": "Generate a parameter change proposal transaction",
        "operationId": "Generateaparameterchangeproposaltransaction",
        "parameters": [],
        "requestBody": {
          "description": "The parameter change proposal body that contains all parameter changes",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/post_proposal_body1"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The transaction was successfully generated",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StdTx"
                }
              }
            }
          },
          "400": {
            "description": "Invalid proposal body",
            "headers": {},
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": true
      }
    },
    "/gov/proposals/{proposalId}": {
      "get": {
        "tags": [
          "Governance"
        ],
        "summary": "Query a proposal",
        "description": "Query a proposal by id",
        "operationId": "Queryaproposal",
        "parameters": [
          {
            "name": "proposalId",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string",
              "example": "2"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TextProposal"
                }
              }
            }
          },
          "400": {
            "description": "Invalid proposal id",
            "headers": {},
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": true
      }
    },
    "/gov/proposals/{proposalId}/proposer": {
      "get": {
        "tags": [
          "Governance"
        ],
        "summary": "Query proposer",
        "description": "Query for the proposer for a proposal",
        "operationId": "Queryproposer",
        "parameters": [
          {
            "name": "proposalId",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string",
              "example": "2"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Proposer"
                }
              }
            }
          },
          "400": {
            "description": "Invalid proposal ID",
            "headers": {},
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": true
      }
    },
    "/gov/proposals/{proposalId}/deposits": {
      "get": {
        "tags": [
          "Governance"
        ],
        "summary": "Query deposits",
        "description": "Query deposits by proposalId",
        "operationId": "Querydeposits",
        "parameters": [
          {
            "name": "proposalId",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string",
              "example": "2"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Deposit"
                  },
                  "description": ""
                }
              }
            }
          },
          "400": {
            "description": "Invalid proposal id",
            "headers": {},
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": true
      },
      "post": {
        "tags": [
          "Governance"
        ],
        "summary": "Deposit tokens to a proposal",
        "description": "Send transaction to deposit tokens to a proposal",
        "operationId": "Deposittokenstoaproposal",
        "parameters": [
          {
            "name": "proposalId",
            "in": "path",
            "description": "proposal id",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string",
              "example": "2"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/post_deposit_body"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StdTx"
                }
              }
            }
          },
          "400": {
            "description": "Invalid proposal id or deposit body",
            "headers": {},
            "content": {}
          },
          "401": {
            "description": "Key password is wrong",
            "headers": {},
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": true
      }
    },
    "/gov/proposals/{proposalId}/deposits/{depositor}": {
      "get": {
        "tags": [
          "Governance"
        ],
        "summary": "Query deposit",
        "description": "Query deposit by proposalId and depositor address",
        "operationId": "Querydeposit",
        "parameters": [
          {
            "name": "proposalId",
            "in": "path",
            "description": "proposal id",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string",
              "example": "2"
            }
          },
          {
            "name": "depositor",
            "in": "path",
            "description": "Bech32 depositor address",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string",
              "example": "terra1wg2mlrxdmnnkkykgqg4znky86nyrtc45q336yv"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Deposit"
                }
              }
            }
          },
          "400": {
            "description": "Invalid proposal id or depositor address",
            "headers": {},
            "content": {}
          },
          "404": {
            "description": "Found no deposit",
            "headers": {},
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": true
      }
    },
    "/gov/proposals/{proposalId}/votes": {
      "get": {
        "tags": [
          "Governance"
        ],
        "summary": "Query voters",
        "description": "Query voters information by proposalId",
        "operationId": "Queryvoters",
        "parameters": [
          {
            "name": "proposalId",
            "in": "path",
            "description": "proposal id",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string",
              "example": "2"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Vote"
                  },
                  "description": ""
                }
              }
            }
          },
          "400": {
            "description": "Invalid proposal id",
            "headers": {},
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": true
      },
      "post": {
        "tags": [
          "Governance"
        ],
        "summary": "Vote a proposal",
        "description": "Send transaction to vote a proposal",
        "operationId": "Voteaproposal",
        "parameters": [
          {
            "name": "proposalId",
            "in": "path",
            "description": "proposal id",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string",
              "example": "2"
            }
          }
        ],
        "requestBody": {
          "description": "valid value of `\"option\"` field can be `\"yes\"`, `\"no\"`, `\"no_with_veto\"` and `\"abstain\"`",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/post_vote_body"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StdTx"
                }
              }
            }
          },
          "400": {
            "description": "Invalid proposal id or vote body",
            "headers": {},
            "content": {}
          },
          "401": {
            "description": "Key password is wrong",
            "headers": {},
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": true
      }
    },
    "/gov/proposals/{proposalId}/votes/{voter}": {
      "get": {
        "tags": [
          "Governance"
        ],
        "summary": "Query vote",
        "description": "Query vote information by proposal Id and voter address",
        "operationId": "Queryvote",
        "parameters": [
          {
            "name": "proposalId",
            "in": "path",
            "description": "proposal id",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string",
              "example": "2"
            }
          },
          {
            "name": "voter",
            "in": "path",
            "description": "Bech32 voter address",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string",
              "example": "terra1wg2mlrxdmnnkkykgqg4znky86nyrtc45q336yv"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Vote"
                }
              }
            }
          },
          "400": {
            "description": "Invalid proposal id or voter address",
            "headers": {},
            "content": {}
          },
          "404": {
            "description": "Found no vote",
            "headers": {},
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": true
      }
    },
    "/gov/proposals/{proposalId}/tally": {
      "get": {
        "tags": [
          "Governance"
        ],
        "summary": "Get a proposal's tally result at the current time",
        "description": "Gets a proposal's tally result at the current time. If the proposal is pending deposits (i.e status 'DepositPeriod') it returns an empty tally result.",
        "operationId": "Getaproposal'stallyresultatthecurrenttime",
        "parameters": [
          {
            "name": "proposalId",
            "in": "path",
            "description": "proposal id",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string",
              "example": "2"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TallyResult"
                }
              }
            }
          },
          "400": {
            "description": "Invalid proposal id",
            "headers": {},
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": true
      }
    },
    "/gov/parameters/deposit": {
      "get": {
        "tags": [
          "Governance"
        ],
        "summary": "Query governance deposit parameters",
        "description": "Query governance deposit parameters. The max_deposit_period units are in nanoseconds.",
        "operationId": "Querygovernancedepositparameters",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuerygovernancedepositparametersResponse"
                }
              }
            }
          },
          "400": {
            "description": "<other_path> is not a valid query request path",
            "headers": {},
            "content": {}
          },
          "404": {
            "description": "Found no deposit parameters",
            "headers": {},
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": true
      }
    },
    "/gov/parameters/tallying": {
      "get": {
        "tags": [
          "Governance"
        ],
        "summary": "Query governance tally parameters",
        "description": "Query governance tally parameters",
        "operationId": "Querygovernancetallyparameters",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuerygovernancetallyparametersResponse"
                }
              }
            }
          },
          "400": {
            "description": "<other_path> is not a valid query request path",
            "headers": {},
            "content": {}
          },
          "404": {
            "description": "Found no tally parameters",
            "headers": {},
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": true
      }
    },
    "/gov/parameters/voting": {
      "get": {
        "tags": [
          "Governance"
        ],
        "summary": "Query governance voting parameters",
        "description": "Query governance voting parameters. The voting_period units are in nanoseconds.",
        "operationId": "Querygovernancevotingparameters",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuerygovernancevotingparametersResponse"
                }
              }
            }
          },
          "400": {
            "description": "<other_path> is not a valid query request path",
            "headers": {},
            "content": {}
          },
          "404": {
            "description": "Found no voting parameters",
            "headers": {},
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": true
      }
    },
    "/v1/gov/proposals/{proposalId}": {
      "get": {
        "tags": [
          "Governance"
        ],
        "summary": "Get proposal",
        "description": "Get proposal",
        "operationId": "Getproposal",
        "parameters": [
          {
            "name": "proposalId",
            "in": "path",
            "description": "Proposal id",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "account",
            "in": "query",
            "description": "User account",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Content-Type",
            "in": "header",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "enum": [
                "application/json"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/getProposalResult"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/gov/proposals/{proposalId}/deposits": {
      "get": {
        "tags": [
          "Governance"
        ],
        "summary": "Get proposal's deposits",
        "description": "Get proposal's deposits",
        "operationId": "Getproposal'sdeposits",
        "parameters": [
          {
            "name": "proposalId",
            "in": "path",
            "description": "Proposal id",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Page size",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "Content-Type",
            "in": "header",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "enum": [
                "application/json"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/getProposalDepositsResult"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/gov/proposals": {
      "get": {
        "tags": [
          "Governance"
        ],
        "summary": "Get proposal list",
        "description": "Get proposal list",
        "operationId": "Getproposallist",
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "description": "'deposit', 'voting', 'passed', 'rejected'",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Content-Type",
            "in": "header",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "enum": [
                "application/json"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/getProposalListResult"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/gov/proposals/{proposalId}/votes": {
      "get": {
        "tags": [
          "Governance"
        ],
        "summary": "Get proposal's votes",
        "description": "Get proposal's votes",
        "operationId": "Getproposal'svotes",
        "parameters": [
          {
            "name": "proposalId",
            "in": "path",
            "description": "Proposal id",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Page size",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "option",
            "in": "query",
            "description": "'Yes', 'No', 'NoWithVeto', 'Abstain'",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Content-Type",
            "in": "header",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "enum": [
                "application/json"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/getProposalVotesResult"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/distribution/delegators/{delegatorAddr}/rewards": {
      "get": {
        "tags": [
          "Distribution"
        ],
        "summary": "Get the total rewards balance from all delegations",
        "description": "Get the sum of all the rewards earned by delegations by a single delegator",
        "operationId": "Getthetotalrewardsbalancefromalldelegations",
        "parameters": [
          {
            "name": "delegatorAddr",
            "in": "path",
            "description": "Bech32 AccAddress of Delegator",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string",
              "example": "terra1wg2mlrxdmnnkkykgqg4znky86nyrtc45q336yv"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DelegatorTotalRewards"
                }
              }
            }
          },
          "400": {
            "description": "Invalid delegator address",
            "headers": {},
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": true
      },
      "post": {
        "tags": [
          "Distribution"
        ],
        "summary": "Withdraw all the delegator's delegation rewards",
        "description": "Withdraw all the delegator's delegation rewards",
        "operationId": "Withdrawallthedelegator'sdelegationrewards",
        "parameters": [
          {
            "name": "delegatorAddr",
            "in": "path",
            "description": "Bech32 AccAddress of Delegator",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string",
              "example": "terra1wg2mlrxdmnnkkykgqg4znky86nyrtc45q336yv"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClearContractAdminReq"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "OK",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StdTx"
                }
              }
            }
          },
          "400": {
            "description": "Invalid delegator address",
            "headers": {},
            "content": {}
          },
          "401": {
            "description": "Key password is wrong",
            "headers": {},
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": true
      }
    },
    "/distribution/delegators/{delegatorAddr}/rewards/{validatorAddr}": {
      "get": {
        "tags": [
          "Distribution"
        ],
        "summary": "Query a delegation reward",
        "description": "Query a single delegation reward by a delegator",
        "operationId": "Queryadelegationreward",
        "parameters": [
          {
            "name": "delegatorAddr",
            "in": "path",
            "description": "Bech32 AccAddress of Delegator",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string",
              "example": "terra1wg2mlrxdmnnkkykgqg4znky86nyrtc45q336yv"
            }
          },
          {
            "name": "validatorAddr",
            "in": "path",
            "description": "Bech32 OperatorAddress of validator",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string",
              "example": "terravaloper1wg2mlrxdmnnkkykgqg4znky86nyrtc45q7a85l"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Coin"
                  },
                  "description": ""
                }
              }
            }
          },
          "400": {
            "description": "Invalid delegator address",
            "headers": {},
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": true
      },
      "post": {
        "tags": [
          "Distribution"
        ],
        "summary": "Withdraw a delegation reward",
        "description": "Withdraw a delegator's delegation reward from a single validator",
        "operationId": "Withdrawadelegationreward",
        "parameters": [
          {
            "name": "delegatorAddr",
            "in": "path",
            "description": "Bech32 AccAddress of Delegator",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string",
              "example": "terra1wg2mlrxdmnnkkykgqg4znky86nyrtc45q336yv"
            }
          },
          {
            "name": "validatorAddr",
            "in": "path",
            "description": "Bech32 OperatorAddress of validator",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string",
              "example": "terravaloper1wg2mlrxdmnnkkykgqg4znky86nyrtc45q7a85l"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClearContractAdminReq"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "OK",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StdTx"
                }
              }
            }
          },
          "400": {
            "description": "Invalid delegator address or delegation body",
            "headers": {},
            "content": {}
          },
          "401": {
            "description": "Key password is wrong",
            "headers": {},
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": true
      }
    },
    "/distribution/delegators/{delegatorAddr}/withdraw_address": {
      "get": {
        "tags": [
          "Distribution"
        ],
        "summary": "Get the rewards withdrawal address",
        "description": "Get the delegations' rewards withdrawal address. This is the address in which the user will receive the reward funds",
        "operationId": "Gettherewardswithdrawaladdress",
        "parameters": [
          {
            "name": "delegatorAddr",
            "in": "path",
            "description": "Bech32 AccAddress of Delegator",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string",
              "example": "terra1wg2mlrxdmnnkkykgqg4znky86nyrtc45q336yv"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Invalid delegator address",
            "headers": {},
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": true
      },
      "post": {
        "tags": [
          "Distribution"
        ],
        "summary": "Replace the rewards withdrawal address",
        "description": "Replace the delegations' rewards withdrawal address for a new one.",
        "operationId": "Replacetherewardswithdrawaladdress",
        "parameters": [
          {
            "name": "delegatorAddr",
            "in": "path",
            "description": "Bech32 AccAddress of Delegator",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string",
              "example": "terra1wg2mlrxdmnnkkykgqg4znky86nyrtc45q336yv"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Withdrawrequestbody2"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "OK",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StdTx"
                }
              }
            }
          },
          "400": {
            "description": "Invalid delegator or withdraw address",
            "headers": {},
            "content": {}
          },
          "401": {
            "description": "Key password is wrong",
            "headers": {},
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": true
      }
    },
    "/distribution/validators/{validatorAddr}": {
      "get": {
        "tags": [
          "Distribution"
        ],
        "summary": "Validator distribution information",
        "description": "Query the distribution information of a single validator",
        "operationId": "Validatordistributioninformation",
        "parameters": [
          {
            "name": "validatorAddr",
            "in": "path",
            "description": "Bech32 OperatorAddress of validator",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string",
              "example": "terravaloper1wg2mlrxdmnnkkykgqg4znky86nyrtc45q7a85l"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidatorDistInfo"
                }
              }
            }
          },
          "400": {
            "description": "Invalid validator address",
            "headers": {},
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": true
      }
    },
    "/distribution/validators/{validatorAddr}/outstanding_rewards": {
      "get": {
        "tags": [
          "Distribution"
        ],
        "summary": "Fee distribution outstanding rewards of a single validator",
        "description": "Fee distribution outstanding rewards of a single validator",
        "operationId": "Feedistributionoutstandingrewardsofasinglevalidator",
        "parameters": [
          {
            "name": "validatorAddr",
            "in": "path",
            "description": "Bech32 OperatorAddress of validator",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string",
              "example": "terravaloper1wg2mlrxdmnnkkykgqg4znky86nyrtc45q7a85l"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FeedistributionoutstandingrewardsofasinglevalidatorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": true
      }
    },
    "/distribution/validators/{validatorAddr}/rewards": {
      "get": {
        "tags": [
          "Distribution"
        ],
        "summary": "Commission and self-delegation rewards of a single validator",
        "description": "Query the commission and self-delegation rewards of validator.",
        "operationId": "Commissionandself-delegationrewardsofasinglevalidator",
        "parameters": [
          {
            "name": "validatorAddr",
            "in": "path",
            "description": "Bech32 OperatorAddress of validator",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string",
              "example": "terravaloper1wg2mlrxdmnnkkykgqg4znky86nyrtc45q7a85l"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Coin"
                  },
                  "description": ""
                }
              }
            }
          },
          "400": {
            "description": "Invalid validator address",
            "headers": {},
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": true
      },
      "post": {
        "tags": [
          "Distribution"
        ],
        "summary": "Withdraw the validator's rewards",
        "description": "Withdraw the validator's self-delegation and commissions rewards",
        "operationId": "Withdrawthevalidator'srewards",
        "parameters": [
          {
            "name": "validatorAddr",
            "in": "path",
            "description": "Bech32 OperatorAddress of validator",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string",
              "example": "terravaloper1wg2mlrxdmnnkkykgqg4znky86nyrtc45q7a85l"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClearContractAdminReq"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "OK",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StdTx"
                }
              }
            }
          },
          "400": {
            "description": "Invalid validator address",
            "headers": {},
            "content": {}
          },
          "401": {
            "description": "Key password is wrong",
            "headers": {},
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": true
      }
    },
    "/distribution/community_pool": {
      "get": {
        "tags": [
          "Distribution"
        ],
        "summary": "Community pool parameters",
        "description": "Community pool parameters",
        "operationId": "Communitypoolparameters",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Coin"
                  },
                  "description": ""
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": true
      }
    },
    "/distribution/parameters": {
      "get": {
        "tags": [
          "Distribution"
        ],
        "summary": "Fee distribution parameters",
        "description": "Fee distribution parameters",
        "operationId": "Feedistributionparameters",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FeedistributionparametersResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": true
      }
    },
    "/minting/parameters": {
      "get": {
        "tags": [
          "Mint"
        ],
        "summary": "Minting module parameters",
        "description": "Minting module parameters",
        "operationId": "Mintingmoduleparameters",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MintingmoduleparametersResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": true
      }
    },
    "/minting/inflation": {
      "get": {
        "tags": [
          "Mint"
        ],
        "summary": "Current minting inflation value",
        "description": "Current minting inflation value",
        "operationId": "Currentmintinginflationvalue",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": true
      }
    },
    "/minting/annual-provisions": {
      "get": {
        "tags": [
          "Mint"
        ],
        "summary": "Current minting annual provisions value",
        "description": "Current minting annual provisions value",
        "operationId": "Currentmintingannualprovisionsvalue",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": true
      }
    },
    "/market/swap": {
      "post": {
        "tags": [
          "Market"
        ],
        "summary": "Swap coin with another coin",
        "description": "Swap coin with another coin",
        "operationId": "Swapcoinwithanothercoin",
        "parameters": [],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SwapReq"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "OK",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StdTx"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": true
      },
      "get": {
        "tags": [
          "Market"
        ],
        "summary": "Query swap result amount",
        "description": "Query swap result amount",
        "operationId": "Queryswapresultamount",
        "parameters": [
          {
            "name": "offer_coin",
            "in": "query",
            "description": "coin expression want to swap",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "example": "1000000uluna"
            }
          },
          {
            "name": "ask_denom",
            "in": "query",
            "description": "Then coin denom want to ask",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "example": "usdr"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Coin"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": true
      }
    },
    "/market/terra_pool_delta": {
      "get": {
        "tags": [
          "Market"
        ],
        "summary": "Get terra pool delta, is usdr amount used for swap operation from the TerraPool.",
        "description": "Get terra pool delta, is usdr amount used for swap operation from the TerraPool.",
        "operationId": "Getterrapooldelta,isusdramountusedforswapoperationfromtheTerraPool.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "number",
                  "format": "double"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "headers": {},
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": true
      }
    },
    "/market/parameters": {
      "get": {
        "tags": [
          "Market"
        ],
        "summary": "Get market params",
        "description": "Get market params",
        "operationId": "Getmarketparams",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MarketParams"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "headers": {},
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": true
      }
    },
    "/v1/market/price": {
      "get": {
        "tags": [
          "Market"
        ],
        "summary": "Get price history",
        "description": "Get price history",
        "operationId": "Getpricehistory",
        "parameters": [
          {
            "name": "denom",
            "in": "query",
            "description": "Coin denomination",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "interval",
            "in": "query",
            "description": "Price interval",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Content-Type",
            "in": "header",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "enum": [
                "application/json"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/getMarketPriceResult"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/market/swaprate/{base}": {
      "get": {
        "tags": [
          "Market"
        ],
        "summary": "Get current swaprate",
        "description": "Get current swaprate",
        "operationId": "Getcurrentswaprate",
        "parameters": [
          {
            "name": "base",
            "in": "path",
            "description": "Coin denomination",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Content-Type",
            "in": "header",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "enum": [
                "application/json"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/rates"
                  },
                  "description": ""
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/oracle/denoms/{denom}/exchange_rate": {
      "get": {
        "tags": [
          "Oracle"
        ],
        "summary": "Get the current effective exchange rate in Luna for the asset",
        "description": "Get the current effective exchange rate in Luna for the asset",
        "operationId": "GetthecurrenteffectiveexchangerateinLunafortheasset",
        "parameters": [
          {
            "name": "denom",
            "in": "path",
            "description": "The coin denom to get",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "current exchange rate of denom i.e. \"1000.0\"",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "number",
                  "format": "double"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "headers": {},
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": true
      }
    },
    "/oracle/denoms/exchange_rates": {
      "get": {
        "tags": [
          "Oracle"
        ],
        "summary": "Get all activated exchange rates",
        "description": "Get all activated exchange rates",
        "operationId": "Getallactivatedexchangerates",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Coin"
                  },
                  "description": ""
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "headers": {},
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": true
      }
    },
    "/oracle/denoms/actives": {
      "get": {
        "tags": [
          "Oracle"
        ],
        "summary": "Get all activated denoms",
        "description": "Get all activated denoms",
        "operationId": "Getallactivateddenoms",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": ""
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "headers": {},
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": true
      }
    },
    "/oracle/voters/{validator}/feeder": {
      "post": {
        "tags": [
          "Oracle"
        ],
        "summary": "Generate oracle feeder right delegation message",
        "description": "Generate oracle feeder right delegation message",
        "operationId": "Generateoraclefeederrightdelegationmessage",
        "parameters": [
          {
            "name": "validator",
            "in": "path",
            "description": "Feeder right delegator",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DelegateReq"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "OK",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StdTx"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "headers": {},
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": true
      },
      "get": {
        "tags": [
          "Oracle"
        ],
        "summary": "Get delegated oracle feeder of a validator",
        "description": "Get delegated oracle feeder of a validator",
        "operationId": "Getdelegatedoraclefeederofavalidator",
        "parameters": [
          {
            "name": "validator",
            "in": "path",
            "description": "Feeder right delegator",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "headers": {},
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": true
      }
    },
    "/oracle/voters/{validator}/miss": {
      "get": {
        "tags": [
          "Oracle"
        ],
        "summary": "Get the number of vote periods missed in this oracle slash window.",
        "description": "Get the number of vote periods missed in this oracle slash window.",
        "operationId": "Getthenumberofvoteperiodsmissedinthisoracleslashwindow.",
        "parameters": [
          {
            "name": "validator",
            "in": "path",
            "description": "oracle operator",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "number",
                  "format": "double"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "headers": {},
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": true
      }
    },
    "/oracle/voters/{validator}/aggregate_prevote": {
      "post": {
        "tags": [
          "Oracle"
        ],
        "summary": "Generate oracle aggregate exchange rate prevote message containing a hash",
        "description": "Generate oracle aggregate exchange rate prevote message containing a hash",
        "operationId": "Generateoracleaggregateexchangerateprevotemessagecontainingahash",
        "parameters": [
          {
            "name": "validator",
            "in": "path",
            "description": "oracle operator",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AggregatePrevoteReq"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "OK",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StdTx"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "headers": {},
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": true
      },
      "get": {
        "tags": [
          "Oracle"
        ],
        "summary": "Get the currently outstanding aggregate exchange rate oracle prevote of a validator",
        "description": "Get the currently outstanding aggregate exchange rate oracle prevote of a validator",
        "operationId": "Getthecurrentlyoutstandingaggregateexchangerateoracleprevoteofavalidator",
        "parameters": [
          {
            "name": "validator",
            "in": "path",
            "description": "oracle operator",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AggregateExchangeRatePrevote"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "headers": {},
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": true
      }
    },
    "/oracle/voters/{validator}/aggregate_vote": {
      "post": {
        "tags": [
          "Oracle"
        ],
        "summary": "Generate oracle aggregate exchange rate vote message containing exchange rates and salt to prove the aggregate prevote",
        "description": "Generate oracle aggregate exchange rate vote message containing exchange rates and salt to prove the aggregate prevote",
        "operationId": "Generateoracleaggregateexchangeratevotemessagecontainingexchangeratesandsalttoprovetheaggregateprevote",
        "parameters": [
          {
            "name": "validator",
            "in": "path",
            "description": "oracle operator",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AggregateVoteReq"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "OK",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StdTx"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "headers": {},
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": true
      },
      "get": {
        "tags": [
          "Oracle"
        ],
        "summary": "Get the currently outstanding aggregate exchange rate oracle vote of a validator",
        "description": "Get the currently outstanding aggregate exchange rate oracle vote of a validator",
        "operationId": "Getthecurrentlyoutstandingaggregateexchangerateoraclevoteofavalidator",
        "parameters": [
          {
            "name": "validator",
            "in": "path",
            "description": "oracle operator",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AggregateExchangeRateVote"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "headers": {},
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": true
      }
    },
    "/oracle/parameters": {
      "get": {
        "tags": [
          "Oracle"
        ],
        "summary": "Get oracle params",
        "description": "Get oracle params",
        "operationId": "Getoracleparams",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OracleParams"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "headers": {},
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": true
      }
    },
    "/treasury/tax_rate": {
      "get": {
        "tags": [
          "Treasury"
        ],
        "summary": "Get current tax rate",
        "description": "Get current tax rate",
        "operationId": "Getcurrenttaxrate",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "number",
                  "format": "double"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": true
      }
    },
    "/treasury/tax_cap/{denom}": {
      "get": {
        "tags": [
          "Treasury"
        ],
        "summary": "Get tax cap of the denom",
        "description": "Get tax cap of the denom",
        "operationId": "Gettaxcapofthedenom",
        "parameters": [
          {
            "name": "denom",
            "in": "path",
            "description": "Denom",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": true
      }
    },
    "/treasury/tax_caps": {
      "get": {
        "tags": [
          "Treasury"
        ],
        "summary": "Get tax caps for the all whitelisted denoms",
        "description": "Get tax caps for the all whitelisted denoms",
        "operationId": "Gettaxcapsfortheallwhitelisteddenoms",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TaxCap"
                  },
                  "description": ""
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": true
      }
    },
    "/treasury/reward_weight": {
      "get": {
        "tags": [
          "Treasury"
        ],
        "summary": "Get current reward weight",
        "description": "Get current reward weight",
        "operationId": "Getcurrentrewardweight",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "number",
                  "format": "double"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": true
      }
    },
    "/treasury/tax_proceeds": {
      "get": {
        "tags": [
          "Treasury"
        ],
        "summary": "Get current tax proceeds",
        "description": "Get current tax proceeds",
        "operationId": "Getcurrenttaxproceeds",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Coin"
                  },
                  "description": ""
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": true
      }
    },
    "/treasury/seigniorage_proceeds": {
      "get": {
        "tags": [
          "Treasury"
        ],
        "summary": "retrieves the size of the seigniorage pool",
        "description": "retrieves the size of the seigniorage pool",
        "operationId": "retrievesthesizeoftheseignioragepool",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": true
      }
    },
    "/treasury/parameters": {
      "get": {
        "tags": [
          "Treasury"
        ],
        "summary": "Get treasury module params",
        "description": "Get treasury module params",
        "operationId": "Gettreasurymoduleparams",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TreasuryParams"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": true
      }
    },
    "/treasury/indicators": {
      "get": {
        "tags": [
          "Treasury"
        ],
        "summary": "Get the current treasury indicators",
        "description": "Get the current treasury indicators",
        "operationId": "Getthecurrenttreasuryindicators",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Ok",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetthecurrenttreasuryindicatorsResponse"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/v1/circulatingsupply/{denom}": {
      "get": {
        "tags": [
          "Treasury"
        ],
        "summary": "Get circulating supply of coins",
        "description": "Get circulating supply of coins",
        "operationId": "Getcirculatingsupplyofcoins",
        "parameters": [
          {
            "name": "denom",
            "in": "path",
            "description": "Coin denomination",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Content-Type",
            "in": "header",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "enum": [
                "application/json"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "number",
                  "format": "double"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/richlist/{denom}": {
      "get": {
        "tags": [
          "Treasury"
        ],
        "summary": "Get richlist of coins",
        "description": "Get richlist of coins",
        "operationId": "Getrichlistofcoins",
        "parameters": [
          {
            "name": "denom",
            "in": "path",
            "description": "Coin denomination",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Page size",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "Content-Type",
            "in": "header",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "enum": [
                "application/json"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/accounts"
                  },
                  "description": ""
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/taxproceeds": {
      "get": {
        "tags": [
          "Treasury"
        ],
        "summary": "Get taxproceeds",
        "description": "Get taxproceeds",
        "operationId": "Gettaxproceeds",
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "enum": [
                "application/json"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/getTaxProceedsResult"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/totalsupply/{denom}": {
      "get": {
        "tags": [
          "Treasury"
        ],
        "summary": "Get total supply of coins",
        "description": "Get total supply of coins",
        "operationId": "Gettotalsupplyofcoins",
        "parameters": [
          {
            "name": "denom",
            "in": "path",
            "description": "Coin denomination",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Content-Type",
            "in": "header",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "enum": [
                "application/json"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/wasm/codes": {
      "post": {
        "tags": [
          "Wasm"
        ],
        "summary": "Generate wasm store code message",
        "description": "Generate wasm store code message",
        "operationId": "Generatewasmstorecodemessage",
        "parameters": [],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StoreCodeReq"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "OK",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StdTx"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "headers": {},
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": true
      }
    },
    "/wasm/codes/{codeID}": {
      "post": {
        "tags": [
          "Wasm"
        ],
        "summary": "Instantiate wasm contract",
        "description": "Instantiate wasm contract",
        "operationId": "Instantiatewasmcontract",
        "parameters": [
          {
            "name": "codeID",
            "in": "path",
            "description": "code ID you want to instantiate",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "number",
              "format": "double"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InstantiateContractReq"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "OK",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StdTx"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "headers": {},
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": true
      },
      "get": {
        "tags": [
          "Wasm"
        ],
        "summary": "Get code info of the code ID",
        "description": "Get code info of the code ID",
        "operationId": "GetcodeinfoofthecodeID",
        "parameters": [
          {
            "name": "codeID",
            "in": "path",
            "description": "code ID you want to instantiate",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "number",
              "format": "double"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CodeInfo"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/wasm/codes/{codeID}/migrate": {
      "post": {
        "tags": [
          "Wasm"
        ],
        "summary": "Migrate old wasm code to new wasm code",
        "description": "Migrate old wasm code to new wasm code",
        "operationId": "Migrateoldwasmcodetonewwasmcode",
        "parameters": [
          {
            "name": "codeID",
            "in": "path",
            "description": "code ID you want to migrate",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "number",
              "format": "double"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StoreCodeReq"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "OK",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StdTx"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "headers": {},
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": true
      }
    },
    "/wasm/contracts/{contractAddress}": {
      "post": {
        "tags": [
          "Wasm"
        ],
        "summary": "Execute wasm contract message",
        "description": "Execute wasm contract message",
        "operationId": "Executewasmcontractmessage",
        "parameters": [
          {
            "name": "contractAddress",
            "in": "path",
            "description": "contract address you want to execute",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExecuteContractReq"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "OK",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StdTx"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "headers": {},
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": true
      },
      "get": {
        "tags": [
          "Wasm"
        ],
        "summary": "Get contract info of the contract Address",
        "description": "Get contract info of the contract Address",
        "operationId": "GetcontractinfoofthecontractAddress",
        "parameters": [
          {
            "name": "contractAddress",
            "in": "path",
            "description": "contract address you want to execute",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContractInfo"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/wasm/contracts/{contractAddress}/migrate": {
      "post": {
        "tags": [
          "Wasm"
        ],
        "summary": "Migrate wasm contract to new code base",
        "description": "Migrate wasm contract to new code base",
        "operationId": "Migratewasmcontracttonewcodebase",
        "parameters": [
          {
            "name": "contractAddress",
            "in": "path",
            "description": "contract address you want to migrate",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MigrateContractReq"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "OK",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StdTx"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "headers": {},
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": true
      }
    },
    "/wasm/contracts/{contractAddress}/admin/update": {
      "post": {
        "tags": [
          "Wasm"
        ],
        "summary": "Update wasm contract admin to new address",
        "description": "Update wasm contract admin to new address",
        "operationId": "Updatewasmcontractadmintonewaddress",
        "parameters": [
          {
            "name": "contractAddress",
            "in": "path",
            "description": "contract address you want to update admin",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateContractAdminReq"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "OK",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StdTx"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "headers": {},
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": true
      }
    },
    "/wasm/contracts/{contractAddress}/admin/clear": {
      "post": {
        "tags": [
          "Wasm"
        ],
        "summary": "Clear wasm contract admin to make the contract un-migratable",
        "description": "Clear wasm contract admin to make the contract un-migratable",
        "operationId": "Clearwasmcontractadmintomakethecontractun-migratable",
        "parameters": [
          {
            "name": "contractAddress",
            "in": "path",
            "description": "contract address you want to clear admin",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClearContractAdminReq"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "OK",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StdTx"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "headers": {},
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": true
      }
    },
    "/wasm/contracts/{contractAddress}/store": {
      "get": {
        "tags": [
          "Wasm"
        ],
        "summary": "Get stored information with query msg",
        "description": "Get stored information with query msg",
        "operationId": "Getstoredinformationwithquerymsg",
        "parameters": [
          {
            "name": "contractAddress",
            "in": "path",
            "description": "contract address you want to lookup",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query_msg",
            "in": "query",
            "description": "json formatted query msg",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/wasm/contracts/{contractAddress}/store/raw": {
      "get": {
        "tags": [
          "Wasm"
        ],
        "summary": "Get stored information with store key",
        "description": "Get stored information with store key",
        "operationId": "Getstoredinformationwithstorekey",
        "parameters": [
          {
            "name": "contractAddress",
            "in": "path",
            "description": "contract address you want to lookup",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "key",
            "in": "query",
            "description": "base64 encoded raw key to access",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/wasm/parameters": {
      "get": {
        "tags": [
          "Wasm"
        ],
        "summary": "Get wasm module params",
        "description": "Get wasm module params",
        "operationId": "Getwasmmoduleparams",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WasmParams"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": true
      }
    },
    "/cosmos/auth/v1beta1/accounts": {
      "get": {
        "tags": [
          "Query"
        ],
        "summary": "Accounts",
        "description": "Since: cosmos-sdk 0.43",
        "operationId": "Accounts",
        "parameters": [
          {
            "name": "pagination.key",
            "in": "query",
            "description": "key is a value returned in PageResponse.next_key to begin\nquerying the next page most efficiently. Only one of offset or key\nshould be set.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pagination.offset",
            "in": "query",
            "description": "offset is a numeric offset that can be used when key is unavailable.\nIt is less efficient than using key. Only one of offset or key should\nbe set.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pagination.limit",
            "in": "query",
            "description": "limit is the total number of results to be returned in the result page.\nIf left empty it will default to a value to be set by each app.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pagination.count_total",
            "in": "query",
            "description": "count_total is set to true  to indicate that the result set should include\na count of the total number of items available for pagination in UIs.\ncount_total is only respected when offset is used. It is ignored when key\nis set.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "pagination.reverse",
            "in": "query",
            "description": "reverse is set to true if results are to be returned in the descending order.\n\nSince: cosmos-sdk 0.43",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/cosmos.auth.v1beta1.QueryAccountsResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/grpc.gateway.runtime.Error"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/cosmos/auth/v1beta1/accounts/{address}": {
      "get": {
        "tags": [
          "Query"
        ],
        "summary": "Account",
        "description": "Account returns account details based on address.",
        "operationId": "Account",
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "description": "address defines the address to query for.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/cosmos.auth.v1beta1.QueryAccountResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/grpc.gateway.runtime.Error"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/cosmos/auth/v1beta1/params": {
      "get": {
        "tags": [
          "Query"
        ],
        "summary": "AuthParams",
        "description": "Params queries all parameters.",
        "operationId": "AuthParams",
        "parameters": [],
        "responses": {
          "200": {
            "description": "A successful response.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/cosmos.auth.v1beta1.QueryParamsResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/grpc.gateway.runtime.Error"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/cosmos/authz/v1beta1/grants": {
      "get": {
        "tags": [
          "Query"
        ],
        "summary": "Grants",
        "description": "Returns list of `Authorization`, granted to the grantee by the granter.",
        "operationId": "Grants",
        "parameters": [
          {
            "name": "granter",
            "in": "query",
            "description": "",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "grantee",
            "in": "query",
            "description": "",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "msg_type_url",
            "in": "query",
            "description": "Optional, msg_type_url, when set, will query only grants matching given msg type.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pagination.key",
            "in": "query",
            "description": "key is a value returned in PageResponse.next_key to begin\nquerying the next page most efficiently. Only one of offset or key\nshould be set.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pagination.offset",
            "in": "query",
            "description": "offset is a numeric offset that can be used when key is unavailable.\nIt is less efficient than using key. Only one of offset or key should\nbe set.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pagination.limit",
            "in": "query",
            "description": "limit is the total number of results to be returned in the result page.\nIf left empty it will default to a value to be set by each app.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pagination.count_total",
            "in": "query",
            "description": "count_total is set to true  to indicate that the result set should include\na count of the total number of items available for pagination in UIs.\ncount_total is only respected when offset is used. It is ignored when key\nis set.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "pagination.reverse",
            "in": "query",
            "description": "reverse is set to true if results are to be returned in the descending order.\n\nSince: cosmos-sdk 0.43",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/cosmos.authz.v1beta1.QueryGrantsResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/grpc.gateway.runtime.Error"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/cosmos/bank/v1beta1/balances/{address}": {
      "get": {
        "tags": [
          "Query"
        ],
        "summary": "AllBalances",
        "description": "AllBalances queries the balance of all coins for a single account.",
        "operationId": "AllBalances",
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "description": "address is the address to query balances for.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pagination.key",
            "in": "query",
            "description": "key is a value returned in PageResponse.next_key to begin\nquerying the next page most efficiently. Only one of offset or key\nshould be set.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pagination.offset",
            "in": "query",
            "description": "offset is a numeric offset that can be used when key is unavailable.\nIt is less efficient than using key. Only one of offset or key should\nbe set.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pagination.limit",
            "in": "query",
            "description": "limit is the total number of results to be returned in the result page.\nIf left empty it will default to a value to be set by each app.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pagination.count_total",
            "in": "query",
            "description": "count_total is set to true  to indicate that the result set should include\na count of the total number of items available for pagination in UIs.\ncount_total is only respected when offset is used. It is ignored when key\nis set.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "pagination.reverse",
            "in": "query",
            "description": "reverse is set to true if results are to be returned in the descending order.\n\nSince: cosmos-sdk 0.43",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/cosmos.bank.v1beta1.QueryAllBalancesResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AllBalancesException1"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/cosmos/bank/v1beta1/balances/{address}/by_denom": {
      "get": {
        "tags": [
          "Query"
        ],
        "summary": "Balance",
        "description": "Balance queries the balance of a single coin for a single account.",
        "operationId": "Balance",
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "description": "address is the address to query balances for.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "denom",
            "in": "query",
            "description": "denom is the coin denom to query balances for.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/cosmos.bank.v1beta1.QueryBalanceResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BalanceException1"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/cosmos/bank/v1beta1/denoms_metadata": {
      "get": {
        "tags": [
          "Query"
        ],
        "summary": "DenomsMetadata",
        "description": "DenomsMetadata queries the client metadata for all registered coin denominations.",
        "operationId": "DenomsMetadata",
        "parameters": [
          {
            "name": "pagination.key",
            "in": "query",
            "description": "key is a value returned in PageResponse.next_key to begin\nquerying the next page most efficiently. Only one of offset or key\nshould be set.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pagination.offset",
            "in": "query",
            "description": "offset is a numeric offset that can be used when key is unavailable.\nIt is less efficient than using key. Only one of offset or key should\nbe set.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pagination.limit",
            "in": "query",
            "description": "limit is the total number of results to be returned in the result page.\nIf left empty it will default to a value to be set by each app.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pagination.count_total",
            "in": "query",
            "description": "count_total is set to true  to indicate that the result set should include\na count of the total number of items available for pagination in UIs.\ncount_total is only respected when offset is used. It is ignored when key\nis set.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "pagination.reverse",
            "in": "query",
            "description": "reverse is set to true if results are to be returned in the descending order.\n\nSince: cosmos-sdk 0.43",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/cosmos.bank.v1beta1.QueryDenomsMetadataResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DenomsMetadataException1"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/cosmos/bank/v1beta1/denoms_metadata/{denom}": {
      "get": {
        "tags": [
          "Query"
        ],
        "summary": "DenomMetadata",
        "description": "DenomsMetadata queries the client metadata of a given coin denomination.",
        "operationId": "DenomMetadata",
        "parameters": [
          {
            "name": "denom",
            "in": "path",
            "description": "denom is the coin denom to query the metadata for.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/cosmos.bank.v1beta1.QueryDenomMetadataResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DenomMetadataException1"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/cosmos/bank/v1beta1/params": {
      "get": {
        "tags": [
          "Query"
        ],
        "summary": "BankParams",
        "description": "Params queries the parameters of x/bank module.",
        "operationId": "BankParams",
        "parameters": [],
        "responses": {
          "200": {
            "description": "A successful response.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/cosmos.bank.v1beta1.QueryParamsResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BankParamsException1"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/cosmos/bank/v1beta1/supply": {
      "get": {
        "tags": [
          "Query"
        ],
        "summary": "TotalSupply",
        "description": "TotalSupply queries the total supply of all coins.",
        "operationId": "TotalSupply",
        "parameters": [
          {
            "name": "pagination.key",
            "in": "query",
            "description": "key is a value returned in PageResponse.next_key to begin\nquerying the next page most efficiently. Only one of offset or key\nshould be set.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pagination.offset",
            "in": "query",
            "description": "offset is a numeric offset that can be used when key is unavailable.\nIt is less efficient than using key. Only one of offset or key should\nbe set.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pagination.limit",
            "in": "query",
            "description": "limit is the total number of results to be returned in the result page.\nIf left empty it will default to a value to be set by each app.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pagination.count_total",
            "in": "query",
            "description": "count_total is set to true  to indicate that the result set should include\na count of the total number of items available for pagination in UIs.\ncount_total is only respected when offset is used. It is ignored when key\nis set.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "pagination.reverse",
            "in": "query",
            "description": "reverse is set to true if results are to be returned in the descending order.\n\nSince: cosmos-sdk 0.43",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryTotalSupplyResponseistheresponsetypefortheQueryTotalSupplyRPCmethod"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TotalSupplyException1"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/cosmos/bank/v1beta1/supply/{denom}": {
      "get": {
        "tags": [
          "Query"
        ],
        "summary": "SupplyOf",
        "description": "SupplyOf queries the supply of a single coin.",
        "operationId": "SupplyOf",
        "parameters": [
          {
            "name": "denom",
            "in": "path",
            "description": "denom is the coin denom to query balances for.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/cosmos.bank.v1beta1.QuerySupplyOfResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SupplyOfException1"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/cosmos/distribution/v1beta1/community_pool": {
      "get": {
        "tags": [
          "Query"
        ],
        "summary": "CommunityPool",
        "description": "CommunityPool queries the community pool coins.",
        "operationId": "CommunityPool",
        "parameters": [],
        "responses": {
          "200": {
            "description": "A successful response.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/cosmos.distribution.v1beta1.QueryCommunityPoolResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommunityPoolException1"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/cosmos/distribution/v1beta1/delegators/{delegator_address}/rewards": {
      "get": {
        "tags": [
          "Query"
        ],
        "summary": "DelegationTotalRewards",
        "description": "DelegationTotalRewards queries the total rewards accrued by a each\nvalidator.",
        "operationId": "DelegationTotalRewards",
        "parameters": [
          {
            "name": "delegator_address",
            "in": "path",
            "description": "delegator_address defines the delegator address to query for.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/cosmos.distribution.v1beta1.QueryDelegationTotalRewardsResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DelegationTotalRewardsException1"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/cosmos/distribution/v1beta1/delegators/{delegator_address}/rewards/{validator_address}": {
      "get": {
        "tags": [
          "Query"
        ],
        "summary": "DelegationRewards",
        "description": "DelegationRewards queries the total rewards accrued by a delegation.",
        "operationId": "DelegationRewards",
        "parameters": [
          {
            "name": "delegator_address",
            "in": "path",
            "description": "delegator_address defines the delegator address to query for.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "validator_address",
            "in": "path",
            "description": "validator_address defines the validator address to query for.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/cosmos.distribution.v1beta1.QueryDelegationRewardsResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DelegationRewardsException1"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/cosmos/distribution/v1beta1/delegators/{delegator_address}/validators": {
      "get": {
        "tags": [
          "Query"
        ],
        "summary": "DelegatorValidators",
        "description": "DelegatorValidators queries the validators of a delegator.",
        "operationId": "DelegatorValidators",
        "parameters": [
          {
            "name": "delegator_address",
            "in": "path",
            "description": "delegator_address defines the delegator address to query for.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/cosmos.distribution.v1beta1.QueryDelegatorValidatorsResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DelegatorValidatorsException1"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/cosmos/distribution/v1beta1/delegators/{delegator_address}/withdraw_address": {
      "get": {
        "tags": [
          "Query"
        ],
        "summary": "DelegatorWithdrawAddress",
        "description": "DelegatorWithdrawAddress queries withdraw address of a delegator.",
        "operationId": "DelegatorWithdrawAddress",
        "parameters": [
          {
            "name": "delegator_address",
            "in": "path",
            "description": "delegator_address defines the delegator address to query for.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/cosmos.distribution.v1beta1.QueryDelegatorWithdrawAddressResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DelegatorWithdrawAddressException1"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/cosmos/distribution/v1beta1/params": {
      "get": {
        "tags": [
          "Query"
        ],
        "summary": "DistributionParams",
        "description": "Params queries params of the distribution module.",
        "operationId": "DistributionParams",
        "parameters": [],
        "responses": {
          "200": {
            "description": "A successful response.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/cosmos.distribution.v1beta1.QueryParamsResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DistributionParamsException1"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/cosmos/distribution/v1beta1/validators/{validator_address}/commission": {
      "get": {
        "tags": [
          "Query"
        ],
        "summary": "ValidatorCommission",
        "description": "ValidatorCommission queries accumulated commission for a validator.",
        "operationId": "ValidatorCommission",
        "parameters": [
          {
            "name": "validator_address",
            "in": "path",
            "description": "validator_address defines the validator address to query for.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryValidatorCommissionResponseistheresponsetypefortheQueryValidatorCommissionRPCmethod"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidatorCommissionException1"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/cosmos/distribution/v1beta1/validators/{validator_address}/outstanding_rewards": {
      "get": {
        "tags": [
          "Query"
        ],
        "summary": "ValidatorOutstandingRewards",
        "description": "ValidatorOutstandingRewards queries rewards of a validator address.",
        "operationId": "ValidatorOutstandingRewards",
        "parameters": [
          {
            "name": "validator_address",
            "in": "path",
            "description": "validator_address defines the validator address to query for.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/cosmos.distribution.v1beta1.QueryValidatorOutstandingRewardsResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidatorOutstandingRewardsException1"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/cosmos/distribution/v1beta1/validators/{validator_address}/slashes": {
      "get": {
        "tags": [
          "Query"
        ],
        "summary": "ValidatorSlashes",
        "description": "ValidatorSlashes queries slash events of a validator.",
        "operationId": "ValidatorSlashes",
        "parameters": [
          {
            "name": "validator_address",
            "in": "path",
            "description": "validator_address defines the validator address to query for.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "starting_height",
            "in": "query",
            "description": "starting_height defines the optional starting height to query the slashes.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ending_height",
            "in": "query",
            "description": "starting_height defines the optional ending height to query the slashes.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pagination.key",
            "in": "query",
            "description": "key is a value returned in PageResponse.next_key to begin\nquerying the next page most efficiently. Only one of offset or key\nshould be set.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pagination.offset",
            "in": "query",
            "description": "offset is a numeric offset that can be used when key is unavailable.\nIt is less efficient than using key. Only one of offset or key should\nbe set.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pagination.limit",
            "in": "query",
            "description": "limit is the total number of results to be returned in the result page.\nIf left empty it will default to a value to be set by each app.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pagination.count_total",
            "in": "query",
            "description": "count_total is set to true  to indicate that the result set should include\na count of the total number of items available for pagination in UIs.\ncount_total is only respected when offset is used. It is ignored when key\nis set.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "pagination.reverse",
            "in": "query",
            "description": "reverse is set to true if results are to be returned in the descending order.\n\nSince: cosmos-sdk 0.43",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/cosmos.distribution.v1beta1.QueryValidatorSlashesResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidatorSlashesException1"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/cosmos/evidence/v1beta1/evidence": {
      "get": {
        "tags": [
          "Query"
        ],
        "summary": "AllEvidence",
        "description": "AllEvidence queries all evidence.",
        "operationId": "AllEvidence",
        "parameters": [
          {
            "name": "pagination.key",
            "in": "query",
            "description": "key is a value returned in PageResponse.next_key to begin\nquerying the next page most efficiently. Only one of offset or key\nshould be set.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pagination.offset",
            "in": "query",
            "description": "offset is a numeric offset that can be used when key is unavailable.\nIt is less efficient than using key. Only one of offset or key should\nbe set.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pagination.limit",
            "in": "query",
            "description": "limit is the total number of results to be returned in the result page.\nIf left empty it will default to a value to be set by each app.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pagination.count_total",
            "in": "query",
            "description": "count_total is set to true  to indicate that the result set should include\na count of the total number of items available for pagination in UIs.\ncount_total is only respected when offset is used. It is ignored when key\nis set.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "pagination.reverse",
            "in": "query",
            "description": "reverse is set to true if results are to be returned in the descending order.\n\nSince: cosmos-sdk 0.43",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/cosmos.evidence.v1beta1.QueryAllEvidenceResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/grpc.gateway.runtime.Error"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/cosmos/evidence/v1beta1/evidence/{evidence_hash}": {
      "get": {
        "tags": [
          "Query"
        ],
        "summary": "Evidence",
        "description": "Evidence queries evidence based on evidence hash.",
        "operationId": "Evidence",
        "parameters": [
          {
            "name": "evidence_hash",
            "in": "path",
            "description": "evidence_hash defines the hash of the requested evidence.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/cosmos.evidence.v1beta1.QueryEvidenceResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/grpc.gateway.runtime.Error"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/cosmos/feegrant/v1beta1/allowance/{granter}/{grantee}": {
      "get": {
        "tags": [
          "Query"
        ],
        "summary": "Allowance",
        "description": "Allowance returns fee granted to the grantee by the granter.",
        "operationId": "Allowance",
        "parameters": [
          {
            "name": "granter",
            "in": "path",
            "description": "granter is the address of the user granting an allowance of their funds.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "grantee",
            "in": "path",
            "description": "grantee is the address of the user being granted an allowance of another user's funds.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/cosmos.feegrant.v1beta1.QueryAllowanceResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/grpc.gateway.runtime.Error"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/cosmos/feegrant/v1beta1/allowances/{grantee}": {
      "get": {
        "tags": [
          "Query"
        ],
        "summary": "Allowances",
        "description": "Allowances returns all the grants for address.",
        "operationId": "Allowances",
        "parameters": [
          {
            "name": "grantee",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pagination.key",
            "in": "query",
            "description": "key is a value returned in PageResponse.next_key to begin\nquerying the next page most efficiently. Only one of offset or key\nshould be set.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pagination.offset",
            "in": "query",
            "description": "offset is a numeric offset that can be used when key is unavailable.\nIt is less efficient than using key. Only one of offset or key should\nbe set.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pagination.limit",
            "in": "query",
            "description": "limit is the total number of results to be returned in the result page.\nIf left empty it will default to a value to be set by each app.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pagination.count_total",
            "in": "query",
            "description": "count_total is set to true  to indicate that the result set should include\na count of the total number of items available for pagination in UIs.\ncount_total is only respected when offset is used. It is ignored when key\nis set.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "pagination.reverse",
            "in": "query",
            "description": "reverse is set to true if results are to be returned in the descending order.\n\nSince: cosmos-sdk 0.43",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/cosmos.feegrant.v1beta1.QueryAllowancesResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/grpc.gateway.runtime.Error"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/cosmos/gov/v1beta1/params/{params_type}": {
      "get": {
        "tags": [
          "Query"
        ],
        "summary": "GovParams",
        "description": "Params queries all parameters of the gov module.",
        "operationId": "GovParams",
        "parameters": [
          {
            "name": "params_type",
            "in": "path",
            "description": "params_type defines which parameters to query for, can be one of \"voting\",\n\"tallying\" or \"deposit\".",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/cosmos.gov.v1beta1.QueryParamsResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/grpc.gateway.runtime.Error"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/cosmos/gov/v1beta1/proposals": {
      "get": {
        "tags": [
          "Query"
        ],
        "summary": "Proposals",
        "description": "Proposals queries all proposals based on given status.",
        "operationId": "Proposals",
        "parameters": [
          {
            "name": "proposal_status",
            "in": "query",
            "description": "proposal_status defines the status of the proposals.\n\n - PROPOSAL_STATUS_UNSPECIFIED: PROPOSAL_STATUS_UNSPECIFIED defines the default propopsal status.\n - PROPOSAL_STATUS_DEPOSIT_PERIOD: PROPOSAL_STATUS_DEPOSIT_PERIOD defines a proposal status during the deposit\nperiod.\n - PROPOSAL_STATUS_VOTING_PERIOD: PROPOSAL_STATUS_VOTING_PERIOD defines a proposal status during the voting\nperiod.\n - PROPOSAL_STATUS_PASSED: PROPOSAL_STATUS_PASSED defines a proposal status of a proposal that has\npassed.\n - PROPOSAL_STATUS_REJECTED: PROPOSAL_STATUS_REJECTED defines a proposal status of a proposal that has\nbeen rejected.\n - PROPOSAL_STATUS_FAILED: PROPOSAL_STATUS_FAILED defines a proposal status of a proposal that has\nfailed.",
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/proposal_status"
            }
          },
          {
            "name": "voter",
            "in": "query",
            "description": "voter defines the voter address for the proposals.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "depositor",
            "in": "query",
            "description": "depositor defines the deposit addresses from the proposals.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pagination.key",
            "in": "query",
            "description": "key is a value returned in PageResponse.next_key to begin\nquerying the next page most efficiently. Only one of offset or key\nshould be set.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pagination.offset",
            "in": "query",
            "description": "offset is a numeric offset that can be used when key is unavailable.\nIt is less efficient than using key. Only one of offset or key should\nbe set.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pagination.limit",
            "in": "query",
            "description": "limit is the total number of results to be returned in the result page.\nIf left empty it will default to a value to be set by each app.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pagination.count_total",
            "in": "query",
            "description": "count_total is set to true  to indicate that the result set should include\na count of the total number of items available for pagination in UIs.\ncount_total is only respected when offset is used. It is ignored when key\nis set.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "pagination.reverse",
            "in": "query",
            "description": "reverse is set to true if results are to be returned in the descending order.\n\nSince: cosmos-sdk 0.43",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/cosmos.gov.v1beta1.QueryProposalsResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/grpc.gateway.runtime.Error"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/cosmos/gov/v1beta1/proposals/{proposal_id}": {
      "get": {
        "tags": [
          "Query"
        ],
        "summary": "Proposal",
        "description": "Proposal queries proposal details based on ProposalID.",
        "operationId": "Proposal",
        "parameters": [
          {
            "name": "proposal_id",
            "in": "path",
            "description": "proposal_id defines the unique id of the proposal.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/cosmos.gov.v1beta1.QueryProposalResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/grpc.gateway.runtime.Error"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/cosmos/gov/v1beta1/proposals/{proposal_id}/deposits": {
      "get": {
        "tags": [
          "Query"
        ],
        "summary": "Deposits",
        "description": "Deposits queries all deposits of a single proposal.",
        "operationId": "Deposits",
        "parameters": [
          {
            "name": "proposal_id",
            "in": "path",
            "description": "proposal_id defines the unique id of the proposal.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pagination.key",
            "in": "query",
            "description": "key is a value returned in PageResponse.next_key to begin\nquerying the next page most efficiently. Only one of offset or key\nshould be set.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pagination.offset",
            "in": "query",
            "description": "offset is a numeric offset that can be used when key is unavailable.\nIt is less efficient than using key. Only one of offset or key should\nbe set.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pagination.limit",
            "in": "query",
            "description": "limit is the total number of results to be returned in the result page.\nIf left empty it will default to a value to be set by each app.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pagination.count_total",
            "in": "query",
            "description": "count_total is set to true  to indicate that the result set should include\na count of the total number of items available for pagination in UIs.\ncount_total is only respected when offset is used. It is ignored when key\nis set.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "pagination.reverse",
            "in": "query",
            "description": "reverse is set to true if results are to be returned in the descending order.\n\nSince: cosmos-sdk 0.43",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/cosmos.gov.v1beta1.QueryDepositsResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/grpc.gateway.runtime.Error"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/cosmos/gov/v1beta1/proposals/{proposal_id}/deposits/{depositor}": {
      "get": {
        "tags": [
          "Query"
        ],
        "summary": "Deposit",
        "description": "Deposit queries single deposit information based proposalID, depositAddr.",
        "operationId": "Deposit",
        "parameters": [
          {
            "name": "proposal_id",
            "in": "path",
            "description": "proposal_id defines the unique id of the proposal.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "depositor",
            "in": "path",
            "description": "depositor defines the deposit addresses from the proposals.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/cosmos.gov.v1beta1.QueryDepositResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/grpc.gateway.runtime.Error"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/cosmos/gov/v1beta1/proposals/{proposal_id}/tally": {
      "get": {
        "tags": [
          "Query"
        ],
        "summary": "TallyResult",
        "description": "TallyResult queries the tally of a proposal vote.",
        "operationId": "TallyResult",
        "parameters": [
          {
            "name": "proposal_id",
            "in": "path",
            "description": "proposal_id defines the unique id of the proposal.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/cosmos.gov.v1beta1.QueryTallyResultResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/grpc.gateway.runtime.Error"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/cosmos/gov/v1beta1/proposals/{proposal_id}/votes": {
      "get": {
        "tags": [
          "Query"
        ],
        "summary": "Votes",
        "description": "Votes queries votes of a given proposal.",
        "operationId": "Votes",
        "parameters": [
          {
            "name": "proposal_id",
            "in": "path",
            "description": "proposal_id defines the unique id of the proposal.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pagination.key",
            "in": "query",
            "description": "key is a value returned in PageResponse.next_key to begin\nquerying the next page most efficiently. Only one of offset or key\nshould be set.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pagination.offset",
            "in": "query",
            "description": "offset is a numeric offset that can be used when key is unavailable.\nIt is less efficient than using key. Only one of offset or key should\nbe set.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pagination.limit",
            "in": "query",
            "description": "limit is the total number of results to be returned in the result page.\nIf left empty it will default to a value to be set by each app.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pagination.count_total",
            "in": "query",
            "description": "count_total is set to true  to indicate that the result set should include\na count of the total number of items available for pagination in UIs.\ncount_total is only respected when offset is used. It is ignored when key\nis set.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "pagination.reverse",
            "in": "query",
            "description": "reverse is set to true if results are to be returned in the descending order.\n\nSince: cosmos-sdk 0.43",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/cosmos.gov.v1beta1.QueryVotesResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/grpc.gateway.runtime.Error"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/cosmos/gov/v1beta1/proposals/{proposal_id}/votes/{voter}": {
      "get": {
        "tags": [
          "Query"
        ],
        "summary": "Vote",
        "description": "Vote queries voted information based on proposalID, voterAddr.",
        "operationId": "Vote",
        "parameters": [
          {
            "name": "proposal_id",
            "in": "path",
            "description": "proposal_id defines the unique id of the proposal.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "voter",
            "in": "path",
            "description": "voter defines the oter address for the proposals.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/cosmos.gov.v1beta1.QueryVoteResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/grpc.gateway.runtime.Error"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/cosmos/mint/v1beta1/annual_provisions": {
      "get": {
        "tags": [
          "Query"
        ],
        "summary": "AnnualProvisions",
        "description": "AnnualProvisions current minting annual provisions value.",
        "operationId": "AnnualProvisions",
        "parameters": [],
        "responses": {
          "200": {
            "description": "A successful response.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/cosmos.mint.v1beta1.QueryAnnualProvisionsResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnnualProvisionsException1"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/cosmos/mint/v1beta1/inflation": {
      "get": {
        "tags": [
          "Query"
        ],
        "summary": "Inflation",
        "description": "Inflation returns the current minting inflation value.",
        "operationId": "Inflation",
        "parameters": [],
        "responses": {
          "200": {
            "description": "A successful response.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/cosmos.mint.v1beta1.QueryInflationResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InflationException1"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/cosmos/mint/v1beta1/params": {
      "get": {
        "tags": [
          "Query"
        ],
        "summary": "MintParams",
        "description": "Params returns the total set of minting parameters.",
        "operationId": "MintParams",
        "parameters": [],
        "responses": {
          "200": {
            "description": "A successful response.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/cosmos.mint.v1beta1.QueryParamsResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MintParamsException1"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/cosmos/params/v1beta1/params": {
      "get": {
        "tags": [
          "Query"
        ],
        "summary": "Params",
        "description": "Params queries a specific parameter of a module, given its subspace and\nkey.",
        "operationId": "Params",
        "parameters": [
          {
            "name": "subspace",
            "in": "query",
            "description": "subspace defines the module to query the parameter for.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "key",
            "in": "query",
            "description": "key defines the key of the parameter in the subspace.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/cosmos.params.v1beta1.QueryParamsResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ParamsException1"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/cosmos/slashing/v1beta1/params": {
      "get": {
        "tags": [
          "Query"
        ],
        "summary": "SlashingParams",
        "description": "Params queries the parameters of slashing module",
        "operationId": "SlashingParams",
        "parameters": [],
        "responses": {
          "200": {
            "description": "A successful response.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryParamsResponseistheresponsetypefortheQueryParamsRPCmethod"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SlashingParamsException1"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/cosmos/slashing/v1beta1/signing_infos": {
      "get": {
        "tags": [
          "Query"
        ],
        "summary": "SigningInfos",
        "description": "SigningInfos queries signing info of all validators",
        "operationId": "SigningInfos",
        "parameters": [
          {
            "name": "pagination.key",
            "in": "query",
            "description": "key is a value returned in PageResponse.next_key to begin\nquerying the next page most efficiently. Only one of offset or key\nshould be set.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pagination.offset",
            "in": "query",
            "description": "offset is a numeric offset that can be used when key is unavailable.\nIt is less efficient than using key. Only one of offset or key should\nbe set.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pagination.limit",
            "in": "query",
            "description": "limit is the total number of results to be returned in the result page.\nIf left empty it will default to a value to be set by each app.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pagination.count_total",
            "in": "query",
            "description": "count_total is set to true  to indicate that the result set should include\na count of the total number of items available for pagination in UIs.\ncount_total is only respected when offset is used. It is ignored when key\nis set.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "pagination.reverse",
            "in": "query",
            "description": "reverse is set to true if results are to be returned in the descending order.\n\nSince: cosmos-sdk 0.43",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuerySigningInfosResponseistheresponsetypefortheQuerySigningInfosRPCmethod"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigningInfosException1"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/cosmos/slashing/v1beta1/signing_infos/{cons_address}": {
      "get": {
        "tags": [
          "Query"
        ],
        "summary": "SigningInfo",
        "description": "SigningInfo queries the signing info of given cons address",
        "operationId": "SigningInfo",
        "parameters": [
          {
            "name": "cons_address",
            "in": "path",
            "description": "cons_address is the address to query signing info of",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuerySigningInfoResponseistheresponsetypefortheQuerySigningInfoRPCmethod"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigningInfoException1"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/cosmos/staking/v1beta1/delegations/{delegator_addr}": {
      "get": {
        "tags": [
          "Query"
        ],
        "summary": "DelegatorDelegations",
        "description": "DelegatorDelegations queries all delegations of a given delegator address.",
        "operationId": "DelegatorDelegations",
        "parameters": [
          {
            "name": "delegator_addr",
            "in": "path",
            "description": "delegator_addr defines the delegator address to query for.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pagination.key",
            "in": "query",
            "description": "key is a value returned in PageResponse.next_key to begin\nquerying the next page most efficiently. Only one of offset or key\nshould be set.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pagination.offset",
            "in": "query",
            "description": "offset is a numeric offset that can be used when key is unavailable.\nIt is less efficient than using key. Only one of offset or key should\nbe set.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pagination.limit",
            "in": "query",
            "description": "limit is the total number of results to be returned in the result page.\nIf left empty it will default to a value to be set by each app.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pagination.count_total",
            "in": "query",
            "description": "count_total is set to true  to indicate that the result set should include\na count of the total number of items available for pagination in UIs.\ncount_total is only respected when offset is used. It is ignored when key\nis set.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "pagination.reverse",
            "in": "query",
            "description": "reverse is set to true if results are to be returned in the descending order.\n\nSince: cosmos-sdk 0.43",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/cosmos.staking.v1beta1.QueryDelegatorDelegationsResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/grpc.gateway.runtime.Error"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/cosmos/staking/v1beta1/delegators/{delegator_addr}/redelegations": {
      "get": {
        "tags": [
          "Query"
        ],
        "summary": "Redelegations",
        "description": "Redelegations queries redelegations of given address.",
        "operationId": "Redelegations",
        "parameters": [
          {
            "name": "delegator_addr",
            "in": "path",
            "description": "delegator_addr defines the delegator address to query for.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "src_validator_addr",
            "in": "query",
            "description": "src_validator_addr defines the validator address to redelegate from.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dst_validator_addr",
            "in": "query",
            "description": "dst_validator_addr defines the validator address to redelegate to.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pagination.key",
            "in": "query",
            "description": "key is a value returned in PageResponse.next_key to begin\nquerying the next page most efficiently. Only one of offset or key\nshould be set.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pagination.offset",
            "in": "query",
            "description": "offset is a numeric offset that can be used when key is unavailable.\nIt is less efficient than using key. Only one of offset or key should\nbe set.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pagination.limit",
            "in": "query",
            "description": "limit is the total number of results to be returned in the result page.\nIf left empty it will default to a value to be set by each app.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pagination.count_total",
            "in": "query",
            "description": "count_total is set to true  to indicate that the result set should include\na count of the total number of items available for pagination in UIs.\ncount_total is only respected when offset is used. It is ignored when key\nis set.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "pagination.reverse",
            "in": "query",
            "description": "reverse is set to true if results are to be returned in the descending order.\n\nSince: cosmos-sdk 0.43",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/cosmos.staking.v1beta1.QueryRedelegationsResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/grpc.gateway.runtime.Error"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/cosmos/staking/v1beta1/delegators/{delegator_addr}/unbonding_delegations": {
      "get": {
        "tags": [
          "Query"
        ],
        "summary": "DelegatorUnbondingDelegations",
        "description": "DelegatorUnbondingDelegations queries all unbonding delegations of a given\ndelegator address.",
        "operationId": "DelegatorUnbondingDelegations",
        "parameters": [
          {
            "name": "delegator_addr",
            "in": "path",
            "description": "delegator_addr defines the delegator address to query for.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pagination.key",
            "in": "query",
            "description": "key is a value returned in PageResponse.next_key to begin\nquerying the next page most efficiently. Only one of offset or key\nshould be set.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pagination.offset",
            "in": "query",
            "description": "offset is a numeric offset that can be used when key is unavailable.\nIt is less efficient than using key. Only one of offset or key should\nbe set.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pagination.limit",
            "in": "query",
            "description": "limit is the total number of results to be returned in the result page.\nIf left empty it will default to a value to be set by each app.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pagination.count_total",
            "in": "query",
            "description": "count_total is set to true  to indicate that the result set should include\na count of the total number of items available for pagination in UIs.\ncount_total is only respected when offset is used. It is ignored when key\nis set.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "pagination.reverse",
            "in": "query",
            "description": "reverse is set to true if results are to be returned in the descending order.\n\nSince: cosmos-sdk 0.43",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/cosmos.staking.v1beta1.QueryDelegatorUnbondingDelegationsResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/grpc.gateway.runtime.Error"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/cosmos/staking/v1beta1/delegators/{delegator_addr}/validators": {
      "get": {
        "tags": [
          "Query"
        ],
        "summary": "StakingDelegatorValidators",
        "description": "DelegatorValidators queries all validators info for given delegator\naddress.",
        "operationId": "StakingDelegatorValidators",
        "parameters": [
          {
            "name": "delegator_addr",
            "in": "path",
            "description": "delegator_addr defines the delegator address to query for.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pagination.key",
            "in": "query",
            "description": "key is a value returned in PageResponse.next_key to begin\nquerying the next page most efficiently. Only one of offset or key\nshould be set.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pagination.offset",
            "in": "query",
            "description": "offset is a numeric offset that can be used when key is unavailable.\nIt is less efficient than using key. Only one of offset or key should\nbe set.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pagination.limit",
            "in": "query",
            "description": "limit is the total number of results to be returned in the result page.\nIf left empty it will default to a value to be set by each app.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pagination.count_total",
            "in": "query",
            "description": "count_total is set to true  to indicate that the result set should include\na count of the total number of items available for pagination in UIs.\ncount_total is only respected when offset is used. It is ignored when key\nis set.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "pagination.reverse",
            "in": "query",
            "description": "reverse is set to true if results are to be returned in the descending order.\n\nSince: cosmos-sdk 0.43",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StakingDelegatorValidatorsResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/grpc.gateway.runtime.Error"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/cosmos/staking/v1beta1/delegators/{delegator_addr}/validators/{validator_addr}": {
      "get": {
        "tags": [
          "Query"
        ],
        "summary": "DelegatorValidator",
        "description": "DelegatorValidator queries validator info for given delegator validator\npair.",
        "operationId": "DelegatorValidator",
        "parameters": [
          {
            "name": "delegator_addr",
            "in": "path",
            "description": "delegator_addr defines the delegator address to query for.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "validator_addr",
            "in": "path",
            "description": "validator_addr defines the validator address to query for.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/cosmos.staking.v1beta1.QueryDelegatorValidatorResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/grpc.gateway.runtime.Error"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/cosmos/staking/v1beta1/historical_info/{height}": {
      "get": {
        "tags": [
          "Query"
        ],
        "summary": "HistoricalInfo",
        "description": "HistoricalInfo queries the historical info for given height.",
        "operationId": "HistoricalInfo",
        "parameters": [
          {
            "name": "height",
            "in": "path",
            "description": "height defines at which height to query the historical info.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/cosmos.staking.v1beta1.QueryHistoricalInfoResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/grpc.gateway.runtime.Error"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/cosmos/staking/v1beta1/params": {
      "get": {
        "tags": [
          "Query"
        ],
        "summary": "StakingParams",
        "description": "Parameters queries the staking parameters.",
        "operationId": "StakingParams",
        "parameters": [],
        "responses": {
          "200": {
            "description": "A successful response.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/cosmos.staking.v1beta1.QueryParamsResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/grpc.gateway.runtime.Error"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/cosmos/staking/v1beta1/pool": {
      "get": {
        "tags": [
          "Query"
        ],
        "summary": "Pool",
        "description": "Pool queries the pool info.",
        "operationId": "Pool",
        "parameters": [],
        "responses": {
          "200": {
            "description": "A successful response.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/cosmos.staking.v1beta1.QueryPoolResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/grpc.gateway.runtime.Error"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/cosmos/staking/v1beta1/validators": {
      "get": {
        "tags": [
          "Query"
        ],
        "summary": "Validators",
        "description": "Validators queries all validators that match the given status.",
        "operationId": "Validators",
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "description": "status enables to query for validators matching a given status.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pagination.key",
            "in": "query",
            "description": "key is a value returned in PageResponse.next_key to begin\nquerying the next page most efficiently. Only one of offset or key\nshould be set.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pagination.offset",
            "in": "query",
            "description": "offset is a numeric offset that can be used when key is unavailable.\nIt is less efficient than using key. Only one of offset or key should\nbe set.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pagination.limit",
            "in": "query",
            "description": "limit is the total number of results to be returned in the result page.\nIf left empty it will default to a value to be set by each app.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pagination.count_total",
            "in": "query",
            "description": "count_total is set to true  to indicate that the result set should include\na count of the total number of items available for pagination in UIs.\ncount_total is only respected when offset is used. It is ignored when key\nis set.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "pagination.reverse",
            "in": "query",
            "description": "reverse is set to true if results are to be returned in the descending order.\n\nSince: cosmos-sdk 0.43",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryValidatorsResponseisresponsetypefortheQueryValidatorsRPCmethod1"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/grpc.gateway.runtime.Error"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/cosmos/staking/v1beta1/validators/{validator_addr}": {
      "get": {
        "tags": [
          "Query"
        ],
        "summary": "Validator",
        "description": "Validator queries validator info for given validator address.",
        "operationId": "Validator",
        "parameters": [
          {
            "name": "validator_addr",
            "in": "path",
            "description": "validator_addr defines the validator address to query for.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryValidatorResponseisresponsetypefortheQueryValidatorRPCmethod"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/grpc.gateway.runtime.Error"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/cosmos/staking/v1beta1/validators/{validator_addr}/delegations": {
      "get": {
        "tags": [
          "Query"
        ],
        "summary": "ValidatorDelegations",
        "description": "ValidatorDelegations queries delegate info for given validator.",
        "operationId": "ValidatorDelegations",
        "parameters": [
          {
            "name": "validator_addr",
            "in": "path",
            "description": "validator_addr defines the validator address to query for.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pagination.key",
            "in": "query",
            "description": "key is a value returned in PageResponse.next_key to begin\nquerying the next page most efficiently. Only one of offset or key\nshould be set.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pagination.offset",
            "in": "query",
            "description": "offset is a numeric offset that can be used when key is unavailable.\nIt is less efficient than using key. Only one of offset or key should\nbe set.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pagination.limit",
            "in": "query",
            "description": "limit is the total number of results to be returned in the result page.\nIf left empty it will default to a value to be set by each app.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pagination.count_total",
            "in": "query",
            "description": "count_total is set to true  to indicate that the result set should include\na count of the total number of items available for pagination in UIs.\ncount_total is only respected when offset is used. It is ignored when key\nis set.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "pagination.reverse",
            "in": "query",
            "description": "reverse is set to true if results are to be returned in the descending order.\n\nSince: cosmos-sdk 0.43",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryValidatorDelegationsResponseisresponsetypefortheQueryValidatorDelegationsRPCmethod"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/grpc.gateway.runtime.Error"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/cosmos/staking/v1beta1/validators/{validator_addr}/delegations/{delegator_addr}": {
      "get": {
        "tags": [
          "Query"
        ],
        "summary": "Delegation",
        "description": "Delegation queries delegate info for given validator delegator pair.",
        "operationId": "Delegation",
        "parameters": [
          {
            "name": "validator_addr",
            "in": "path",
            "description": "validator_addr defines the validator address to query for.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "delegator_addr",
            "in": "path",
            "description": "delegator_addr defines the delegator address to query for.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/cosmos.staking.v1beta1.QueryDelegationResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/grpc.gateway.runtime.Error"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/cosmos/staking/v1beta1/validators/{validator_addr}/delegations/{delegator_addr}/unbonding_delegation": {
      "get": {
        "tags": [
          "Query"
        ],
        "summary": "UnbondingDelegation",
        "description": "UnbondingDelegation queries unbonding info for given validator delegator\npair.",
        "operationId": "UnbondingDelegation",
        "parameters": [
          {
            "name": "validator_addr",
            "in": "path",
            "description": "validator_addr defines the validator address to query for.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "delegator_addr",
            "in": "path",
            "description": "delegator_addr defines the delegator address to query for.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/cosmos.staking.v1beta1.QueryUnbondingDelegationResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/grpc.gateway.runtime.Error"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/cosmos/staking/v1beta1/validators/{validator_addr}/unbonding_delegations": {
      "get": {
        "tags": [
          "Query"
        ],
        "summary": "ValidatorUnbondingDelegations",
        "description": "ValidatorUnbondingDelegations queries unbonding delegations of a validator.",
        "operationId": "ValidatorUnbondingDelegations",
        "parameters": [
          {
            "name": "validator_addr",
            "in": "path",
            "description": "validator_addr defines the validator address to query for.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pagination.key",
            "in": "query",
            "description": "key is a value returned in PageResponse.next_key to begin\nquerying the next page most efficiently. Only one of offset or key\nshould be set.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pagination.offset",
            "in": "query",
            "description": "offset is a numeric offset that can be used when key is unavailable.\nIt is less efficient than using key. Only one of offset or key should\nbe set.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pagination.limit",
            "in": "query",
            "description": "limit is the total number of results to be returned in the result page.\nIf left empty it will default to a value to be set by each app.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pagination.count_total",
            "in": "query",
            "description": "count_total is set to true  to indicate that the result set should include\na count of the total number of items available for pagination in UIs.\ncount_total is only respected when offset is used. It is ignored when key\nis set.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "pagination.reverse",
            "in": "query",
            "description": "reverse is set to true if results are to be returned in the descending order.\n\nSince: cosmos-sdk 0.43",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/cosmos.staking.v1beta1.QueryValidatorUnbondingDelegationsResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/grpc.gateway.runtime.Error"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/cosmos/upgrade/v1beta1/applied_plan/{name}": {
      "get": {
        "tags": [
          "Query"
        ],
        "summary": "AppliedPlan",
        "description": "AppliedPlan queries a previously applied upgrade plan by its name.",
        "operationId": "AppliedPlan",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "name is the name of the applied plan to query for.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/cosmos.upgrade.v1beta1.QueryAppliedPlanResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/grpc.gateway.runtime.Error"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/cosmos/upgrade/v1beta1/current_plan": {
      "get": {
        "tags": [
          "Query"
        ],
        "summary": "CurrentPlan",
        "description": "CurrentPlan queries the current upgrade plan.",
        "operationId": "CurrentPlan",
        "parameters": [],
        "responses": {
          "200": {
            "description": "A successful response.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/cosmos.upgrade.v1beta1.QueryCurrentPlanResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/grpc.gateway.runtime.Error"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/cosmos/upgrade/v1beta1/module_versions": {
      "get": {
        "tags": [
          "Query"
        ],
        "summary": "ModuleVersions",
        "description": "Since: cosmos-sdk 0.43",
        "operationId": "ModuleVersions",
        "parameters": [
          {
            "name": "module_name",
            "in": "query",
            "description": "module_name is a field to query a specific module\nconsensus version from state. Leaving this empty will\nfetch the full list of module versions from state.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/cosmos.upgrade.v1beta1.QueryModuleVersionsResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/grpc.gateway.runtime.Error"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/cosmos/upgrade/v1beta1/upgraded_consensus_state/{last_height}": {
      "get": {
        "tags": [
          "Query"
        ],
        "summary": "UpgradedConsensusState",
        "description": "UpgradedConsensusState queries the consensus state that will serve\nas a trusted kernel for the next version of this chain. It will only be\nstored at the last height of this chain.\nUpgradedConsensusState RPC not supported with legacy querier\nThis rpc is deprecated now that IBC has its own replacement\n(https://github.com/cosmos/ibc-go/blob/2c880a22e9f9cc75f62b527ca94aa75ce1106001/proto/ibc/core/client/v1/query.proto#L54)",
        "operationId": "UpgradedConsensusState",
        "parameters": [
          {
            "name": "last_height",
            "in": "path",
            "description": "last height of the current chain must be sent in request\nas this is the height under which next consensus state is stored",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/cosmos.upgrade.v1beta1.QueryUpgradedConsensusStateResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/grpc.gateway.runtime.Error"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/terra/market/v1beta1/params": {
      "get": {
        "tags": [
          "Query"
        ],
        "summary": "MarketParams",
        "description": "Params queries all parameters.",
        "operationId": "MarketParams",
        "parameters": [],
        "responses": {
          "200": {
            "description": "A successful response.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/terra.market.v1beta1.QueryParamsResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MarketParamsException1"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/terra/market/v1beta1/swap": {
      "get": {
        "tags": [
          "Query"
        ],
        "summary": "Swap",
        "description": "Swap returns simulated swap amount.",
        "operationId": "Swap",
        "parameters": [
          {
            "name": "offer_coin",
            "in": "query",
            "description": "offer_coin defines the coin being offered (i.e. 1000000uluna).",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ask_denom",
            "in": "query",
            "description": "ask_denom defines the denom of the coin to swap to.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/terra.market.v1beta1.QuerySwapResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SwapException1"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/terra/market/v1beta1/terra_pool_delta": {
      "get": {
        "tags": [
          "Query"
        ],
        "summary": "TerraPoolDelta",
        "description": "TerraPoolDelta returns terra_pool_delta amount.",
        "operationId": "TerraPoolDelta",
        "parameters": [],
        "responses": {
          "200": {
            "description": "A successful response.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/terra.market.v1beta1.QueryTerraPoolDeltaResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TerraPoolDeltaException1"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/terra/oracle/v1beta1/denoms/actives": {
      "get": {
        "tags": [
          "Query"
        ],
        "summary": "Actives",
        "description": "Actives returns all active denoms",
        "operationId": "Actives",
        "parameters": [],
        "responses": {
          "200": {
            "description": "A successful response.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/terra.oracle.v1beta1.QueryActivesResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActivesException1"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/terra/oracle/v1beta1/denoms/exchange_rates": {
      "get": {
        "tags": [
          "Query"
        ],
        "summary": "ExchangeRates",
        "description": "ExchangeRates returns exchange rates of all denoms",
        "operationId": "ExchangeRates",
        "parameters": [],
        "responses": {
          "200": {
            "description": "A successful response.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/terra.oracle.v1beta1.QueryExchangeRatesResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExchangeRatesException1"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/terra/oracle/v1beta1/denoms/tobin_taxes": {
      "get": {
        "tags": [
          "Query"
        ],
        "summary": "TobinTaxes",
        "description": "TobinTaxes returns tobin taxes of all denoms",
        "operationId": "TobinTaxes",
        "parameters": [],
        "responses": {
          "200": {
            "description": "A successful response.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/terra.oracle.v1beta1.QueryTobinTaxesResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TobinTaxesException1"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/terra/oracle/v1beta1/denoms/vote_targets": {
      "get": {
        "tags": [
          "Query"
        ],
        "summary": "VoteTargets",
        "description": "VoteTargets returns all vote target denoms",
        "operationId": "VoteTargets",
        "parameters": [],
        "responses": {
          "200": {
            "description": "A successful response.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/terra.oracle.v1beta1.QueryVoteTargetsResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VoteTargetsException1"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/terra/oracle/v1beta1/denoms/{denom}/exchange_rate": {
      "get": {
        "tags": [
          "Query"
        ],
        "summary": "ExchangeRate",
        "description": "ExchangeRate returns exchange rate of a denom",
        "operationId": "ExchangeRate",
        "parameters": [
          {
            "name": "denom",
            "in": "path",
            "description": "denom defines the denomination to query for.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/terra.oracle.v1beta1.QueryExchangeRateResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExchangeRateException1"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/terra/oracle/v1beta1/denoms/{denom}/tobin_tax": {
      "get": {
        "tags": [
          "Query"
        ],
        "summary": "TobinTax",
        "description": "TobinTax returns tobin tax of a denom",
        "operationId": "TobinTax",
        "parameters": [
          {
            "name": "denom",
            "in": "path",
            "description": "denom defines the denomination to query for.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/terra.oracle.v1beta1.QueryTobinTaxResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TobinTaxException1"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/terra/oracle/v1beta1/params": {
      "get": {
        "tags": [
          "Query"
        ],
        "summary": "OracleParams",
        "description": "Params queries all parameters.",
        "operationId": "OracleParams",
        "parameters": [],
        "responses": {
          "200": {
            "description": "A successful response.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/terra.oracle.v1beta1.QueryParamsResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OracleParamsException1"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/terra/oracle/v1beta1/valdiators/{validator_addr}/aggregate_vote": {
      "get": {
        "tags": [
          "Query"
        ],
        "summary": "AggregateVote",
        "description": "AggregateVote returns an aggregate vote of a validator",
        "operationId": "AggregateVote",
        "parameters": [
          {
            "name": "validator_addr",
            "in": "path",
            "description": "validator defines the validator address to query for.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/terra.oracle.v1beta1.QueryAggregateVoteResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AggregateVoteException1"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/terra/oracle/v1beta1/validators/aggregate_prevotes": {
      "get": {
        "tags": [
          "Query"
        ],
        "summary": "AggregatePrevotes",
        "description": "AggregatePrevotes returns aggregate prevotes of all validators",
        "operationId": "AggregatePrevotes",
        "parameters": [],
        "responses": {
          "200": {
            "description": "A successful response.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/terra.oracle.v1beta1.QueryAggregatePrevotesResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AggregatePrevotesException1"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/terra/oracle/v1beta1/validators/aggregate_votes": {
      "get": {
        "tags": [
          "Query"
        ],
        "summary": "AggregateVotes",
        "description": "AggregateVotes returns aggregate votes of all validators",
        "operationId": "AggregateVotes",
        "parameters": [],
        "responses": {
          "200": {
            "description": "A successful response.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/terra.oracle.v1beta1.QueryAggregateVotesResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AggregateVotesException1"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/terra/oracle/v1beta1/validators/{validator_addr}/aggregate_prevote": {
      "get": {
        "tags": [
          "Query"
        ],
        "summary": "AggregatePrevote",
        "description": "AggregatePrevote returns an aggregate prevote of a validator",
        "operationId": "AggregatePrevote",
        "parameters": [
          {
            "name": "validator_addr",
            "in": "path",
            "description": "validator defines the validator address to query for.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/terra.oracle.v1beta1.QueryAggregatePrevoteResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AggregatePrevoteException1"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/terra/oracle/v1beta1/validators/{validator_addr}/feeder": {
      "get": {
        "tags": [
          "Query"
        ],
        "summary": "FeederDelegation",
        "description": "FeederDelegation returns feeder delegation of a validator",
        "operationId": "FeederDelegation",
        "parameters": [
          {
            "name": "validator_addr",
            "in": "path",
            "description": "validator defines the validator address to query for.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/terra.oracle.v1beta1.QueryFeederDelegationResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FeederDelegationException1"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/terra/oracle/v1beta1/validators/{validator_addr}/miss": {
      "get": {
        "tags": [
          "Query"
        ],
        "summary": "MissCounter",
        "description": "MissCounter returns oracle miss counter of a validator",
        "operationId": "MissCounter",
        "parameters": [
          {
            "name": "validator_addr",
            "in": "path",
            "description": "validator defines the validator address to query for.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/terra.oracle.v1beta1.QueryMissCounterResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MissCounterException1"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/terra/treasury/v1beta1/indicators": {
      "get": {
        "tags": [
          "Query"
        ],
        "summary": "Indicators",
        "description": "Indicators return the current trl informations",
        "operationId": "Indicators",
        "parameters": [],
        "responses": {
          "200": {
            "description": "A successful response.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/terra.treasury.v1beta1.QueryIndicatorsResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IndicatorsException1"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/terra/treasury/v1beta1/params": {
      "get": {
        "tags": [
          "Query"
        ],
        "summary": "TreasuryParams",
        "description": "Params queries all parameters.",
        "operationId": "TreasuryParams",
        "parameters": [],
        "responses": {
          "200": {
            "description": "A successful response.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/terra.treasury.v1beta1.QueryParamsResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TreasuryParamsException1"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/terra/treasury/v1beta1/reward_weight": {
      "get": {
        "tags": [
          "Query"
        ],
        "summary": "RewardWeight",
        "description": "RewardWeight return the current reward weight",
        "operationId": "RewardWeight",
        "parameters": [],
        "responses": {
          "200": {
            "description": "A successful response.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/terra.treasury.v1beta1.QueryRewardWeightResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RewardWeightException1"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/terra/treasury/v1beta1/seigniorage_proceeds": {
      "get": {
        "tags": [
          "Query"
        ],
        "summary": "SeigniorageProceeds",
        "description": "SeigniorageProceeds return the current seigniorage proceeds",
        "operationId": "SeigniorageProceeds",
        "parameters": [],
        "responses": {
          "200": {
            "description": "A successful response.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/terra.treasury.v1beta1.QuerySeigniorageProceedsResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SeigniorageProceedsException1"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/terra/treasury/v1beta1/tax_caps": {
      "get": {
        "tags": [
          "Query"
        ],
        "summary": "TaxCaps",
        "description": "TaxCaps returns the all tax caps",
        "operationId": "TaxCaps",
        "parameters": [],
        "responses": {
          "200": {
            "description": "A successful response.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/terra.treasury.v1beta1.QueryTaxCapsResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaxCapsException1"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/terra/treasury/v1beta1/tax_caps/{denom}": {
      "get": {
        "tags": [
          "Query"
        ],
        "summary": "TaxCap",
        "description": "TaxCap returns the tax cap of a denom",
        "operationId": "TaxCap",
        "parameters": [
          {
            "name": "denom",
            "in": "path",
            "description": "denom defines the denomination to query for.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/terra.treasury.v1beta1.QueryTaxCapResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaxCapException1"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/terra/treasury/v1beta1/tax_proceeds": {
      "get": {
        "tags": [
          "Query"
        ],
        "summary": "TaxProceeds",
        "description": "TaxProceeds return the current tax proceeds",
        "operationId": "TaxProceeds",
        "parameters": [],
        "responses": {
          "200": {
            "description": "A successful response.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/terra.treasury.v1beta1.QueryTaxProceedsResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaxProceedsException1"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/terra/treasury/v1beta1/tax_rate": {
      "get": {
        "tags": [
          "Query"
        ],
        "summary": "TaxRate",
        "description": "TaxRate return the current tax rate",
        "operationId": "TaxRate",
        "parameters": [],
        "responses": {
          "200": {
            "description": "A successful response.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/terra.treasury.v1beta1.QueryTaxRateResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaxRateException1"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/terra/wasm/v1beta1/codes/{code_id}": {
      "get": {
        "tags": [
          "Query"
        ],
        "summary": "CodeInfo",
        "description": "CodeInfo returns the stored code info",
        "operationId": "CodeInfo",
        "parameters": [
          {
            "name": "code_id",
            "in": "path",
            "description": "grpc-gateway_out does not support Go style CodID",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/terra.wasm.v1beta1.QueryCodeInfoResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CodeInfoException1"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/terra/wasm/v1beta1/codes/{code_id}/byte_code": {
      "get": {
        "tags": [
          "Query"
        ],
        "summary": "ByteCode",
        "description": "ByteCode returns the stored byte code",
        "operationId": "ByteCode",
        "parameters": [
          {
            "name": "code_id",
            "in": "path",
            "description": "grpc-gateway_out does not support Go style CodID",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/terra.wasm.v1beta1.QueryByteCodeResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ByteCodeException1"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/terra/wasm/v1beta1/contracts/{contract_address}": {
      "get": {
        "tags": [
          "Query"
        ],
        "summary": "ContractInfo",
        "description": "ContractInfo returns the stored contract info",
        "operationId": "ContractInfo",
        "parameters": [
          {
            "name": "contract_address",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/terra.wasm.v1beta1.QueryContractInfoResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContractInfoException1"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/terra/wasm/v1beta1/contracts/{contract_address}/store": {
      "get": {
        "tags": [
          "Query"
        ],
        "summary": "ContractStore",
        "description": "ContractStore return smart query result from the contract",
        "operationId": "ContractStore",
        "parameters": [
          {
            "name": "contract_address",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query_msg",
            "in": "query",
            "description": "",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/terra.wasm.v1beta1.QueryContractStoreResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContractStoreException1"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/terra/wasm/v1beta1/contracts/{contract_address}/store/raw": {
      "get": {
        "tags": [
          "Query"
        ],
        "summary": "RawStore",
        "description": "RawStore return single key from the raw store data of a contract",
        "operationId": "RawStore",
        "parameters": [
          {
            "name": "contract_address",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "key",
            "in": "query",
            "description": "",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/terra.wasm.v1beta1.QueryRawStoreResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RawStoreException1"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/terra/wasm/v1beta1/params": {
      "get": {
        "tags": [
          "Query"
        ],
        "summary": "WasmParams",
        "description": "Params queries all parameters.",
        "operationId": "WasmParams",
        "parameters": [],
        "responses": {
          "200": {
            "description": "A successful response.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/terra.wasm.v1beta1.QueryParamsResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WasmParamsException1"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/ibc/core/channel/v1/channels": {
      "get": {
        "tags": [
          "Query"
        ],
        "summary": "Channels",
        "description": "Channels queries all the IBC channels of a chain.",
        "operationId": "Channels",
        "parameters": [
          {
            "name": "pagination.key",
            "in": "query",
            "description": "key is a value returned in PageResponse.next_key to begin\nquerying the next page most efficiently. Only one of offset or key\nshould be set.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pagination.offset",
            "in": "query",
            "description": "offset is a numeric offset that can be used when key is unavailable.\nIt is less efficient than using key. Only one of offset or key should\nbe set.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pagination.limit",
            "in": "query",
            "description": "limit is the total number of results to be returned in the result page.\nIf left empty it will default to a value to be set by each app.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pagination.count_total",
            "in": "query",
            "description": "count_total is set to true  to indicate that the result set should include\na count of the total number of items available for pagination in UIs.\ncount_total is only respected when offset is used. It is ignored when key\nis set.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "pagination.reverse",
            "in": "query",
            "description": "reverse is set to true if results are to be returned in the descending order.\n\nSince: cosmos-sdk 0.43",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ibc.core.channel.v1.QueryChannelsResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/grpc.gateway.runtime.Error"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/ibc/core/channel/v1/channels/{channel_id}/ports/{port_id}": {
      "get": {
        "tags": [
          "Query"
        ],
        "summary": "Channel",
        "description": "Channel queries an IBC Channel.",
        "operationId": "Channel",
        "parameters": [
          {
            "name": "channel_id",
            "in": "path",
            "description": "channel unique identifier",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "port_id",
            "in": "path",
            "description": "port unique identifier",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ibc.core.channel.v1.QueryChannelResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/grpc.gateway.runtime.Error"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/ibc/core/channel/v1/channels/{channel_id}/ports/{port_id}/client_state": {
      "get": {
        "tags": [
          "Query"
        ],
        "summary": "ChannelClientState",
        "description": "ChannelClientState queries for the client state for the channel associated\nwith the provided channel identifiers.",
        "operationId": "ChannelClientState",
        "parameters": [
          {
            "name": "channel_id",
            "in": "path",
            "description": "channel unique identifier",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "port_id",
            "in": "path",
            "description": "port unique identifier",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryConnectionClientStateResponseistheresponsetypefortheQueryConnectionClientStateRPCmethod"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/grpc.gateway.runtime.Error"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/ibc/core/channel/v1/channels/{channel_id}/ports/{port_id}/consensus_state/revision/{revision_number}/height/{revision_height}": {
      "get": {
        "tags": [
          "Query"
        ],
        "summary": "ChannelConsensusState",
        "description": "ChannelConsensusState queries for the consensus state for the channel\nassociated with the provided channel identifiers.",
        "operationId": "ChannelConsensusState",
        "parameters": [
          {
            "name": "channel_id",
            "in": "path",
            "description": "channel unique identifier",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "port_id",
            "in": "path",
            "description": "port unique identifier",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "revision_number",
            "in": "path",
            "description": "revision number of the consensus state",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "revision_height",
            "in": "path",
            "description": "revision height of the consensus state",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryConnectionConsensusStateResponseistheresponsetypefortheQueryConnectionConsensusStateRPCmethod"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/grpc.gateway.runtime.Error"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/ibc/core/channel/v1/channels/{channel_id}/ports/{port_id}/next_sequence": {
      "get": {
        "tags": [
          "Query"
        ],
        "summary": "NextSequenceReceive",
        "description": "NextSequenceReceive returns the next receive sequence for a given channel.",
        "operationId": "NextSequenceReceive",
        "parameters": [
          {
            "name": "channel_id",
            "in": "path",
            "description": "channel unique identifier",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "port_id",
            "in": "path",
            "description": "port unique identifier",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuerySequenceResponseistherequesttypefortheQueryQueryNextSequenceReceiveResponseRPCmethod"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/grpc.gateway.runtime.Error"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/ibc/core/channel/v1/channels/{channel_id}/ports/{port_id}/packet_acknowledgements": {
      "get": {
        "tags": [
          "Query"
        ],
        "summary": "PacketAcknowledgements",
        "description": "PacketAcknowledgements returns all the packet acknowledgements associated\nwith a channel.",
        "operationId": "PacketAcknowledgements",
        "parameters": [
          {
            "name": "channel_id",
            "in": "path",
            "description": "channel unique identifier",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "port_id",
            "in": "path",
            "description": "port unique identifier",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pagination.key",
            "in": "query",
            "description": "key is a value returned in PageResponse.next_key to begin\nquerying the next page most efficiently. Only one of offset or key\nshould be set.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pagination.offset",
            "in": "query",
            "description": "offset is a numeric offset that can be used when key is unavailable.\nIt is less efficient than using key. Only one of offset or key should\nbe set.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pagination.limit",
            "in": "query",
            "description": "limit is the total number of results to be returned in the result page.\nIf left empty it will default to a value to be set by each app.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pagination.count_total",
            "in": "query",
            "description": "count_total is set to true  to indicate that the result set should include\na count of the total number of items available for pagination in UIs.\ncount_total is only respected when offset is used. It is ignored when key\nis set.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "pagination.reverse",
            "in": "query",
            "description": "reverse is set to true if results are to be returned in the descending order.\n\nSince: cosmos-sdk 0.43",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryPacketAcknowledgemetsResponseistherequesttypefortheQueryQueryPacketAcknowledgementsRPCmethod"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/grpc.gateway.runtime.Error"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/ibc/core/channel/v1/channels/{channel_id}/ports/{port_id}/packet_acks/{sequence}": {
      "get": {
        "tags": [
          "Query"
        ],
        "summary": "PacketAcknowledgement",
        "description": "PacketAcknowledgement queries a stored packet acknowledgement hash.",
        "operationId": "PacketAcknowledgement",
        "parameters": [
          {
            "name": "channel_id",
            "in": "path",
            "description": "channel unique identifier",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "port_id",
            "in": "path",
            "description": "port unique identifier",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sequence",
            "in": "path",
            "description": "packet sequence",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryPacketAcknowledgementResponsedefinestheclientqueryresponseforapacketwhichalsoincludesaproofandtheheightfromwhichtheproofwasretrieved"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/grpc.gateway.runtime.Error"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/ibc/core/channel/v1/channels/{channel_id}/ports/{port_id}/packet_commitments": {
      "get": {
        "tags": [
          "Query"
        ],
        "summary": "PacketCommitments",
        "description": "PacketCommitments returns all the packet commitments hashes associated\nwith a channel.",
        "operationId": "PacketCommitments",
        "parameters": [
          {
            "name": "channel_id",
            "in": "path",
            "description": "channel unique identifier",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "port_id",
            "in": "path",
            "description": "port unique identifier",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pagination.key",
            "in": "query",
            "description": "key is a value returned in PageResponse.next_key to begin\nquerying the next page most efficiently. Only one of offset or key\nshould be set.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pagination.offset",
            "in": "query",
            "description": "offset is a numeric offset that can be used when key is unavailable.\nIt is less efficient than using key. Only one of offset or key should\nbe set.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pagination.limit",
            "in": "query",
            "description": "limit is the total number of results to be returned in the result page.\nIf left empty it will default to a value to be set by each app.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pagination.count_total",
            "in": "query",
            "description": "count_total is set to true  to indicate that the result set should include\na count of the total number of items available for pagination in UIs.\ncount_total is only respected when offset is used. It is ignored when key\nis set.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "pagination.reverse",
            "in": "query",
            "description": "reverse is set to true if results are to be returned in the descending order.\n\nSince: cosmos-sdk 0.43",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryPacketCommitmentsResponseistherequesttypefortheQueryQueryPacketCommitmentsRPCmethod"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/grpc.gateway.runtime.Error"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/ibc/core/channel/v1/channels/{channel_id}/ports/{port_id}/packet_commitments/{packet_ack_sequences}/unreceived_acks": {
      "get": {
        "tags": [
          "Query"
        ],
        "summary": "UnreceivedAcks",
        "description": "UnreceivedAcks returns all the unreceived IBC acknowledgements associated\nwith a channel and sequences.",
        "operationId": "UnreceivedAcks",
        "parameters": [
          {
            "name": "channel_id",
            "in": "path",
            "description": "channel unique identifier",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "port_id",
            "in": "path",
            "description": "port unique identifier",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "packet_ack_sequences",
            "in": "path",
            "description": "list of acknowledgement sequences",
            "required": true,
            "style": "simple",
            "schema": {
              "minItems": 1,
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryUnreceivedAcksResponseistheresponsetypefortheQueryUnreceivedAcksRPCmethod"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/grpc.gateway.runtime.Error"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/ibc/core/channel/v1/channels/{channel_id}/ports/{port_id}/packet_commitments/{packet_commitment_sequences}/unreceived_packets": {
      "get": {
        "tags": [
          "Query"
        ],
        "summary": "UnreceivedPackets",
        "description": "UnreceivedPackets returns all the unreceived IBC packets associated with a\nchannel and sequences.",
        "operationId": "UnreceivedPackets",
        "parameters": [
          {
            "name": "channel_id",
            "in": "path",
            "description": "channel unique identifier",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "port_id",
            "in": "path",
            "description": "port unique identifier",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "packet_commitment_sequences",
            "in": "path",
            "description": "list of packet sequences",
            "required": true,
            "style": "simple",
            "schema": {
              "minItems": 1,
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryUnreceivedPacketsResponseistheresponsetypefortheQueryUnreceivedPacketCommitmentsRPCmethod"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/grpc.gateway.runtime.Error"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/ibc/core/channel/v1/channels/{channel_id}/ports/{port_id}/packet_commitments/{sequence}": {
      "get": {
        "tags": [
          "Query"
        ],
        "summary": "PacketCommitment",
        "description": "PacketCommitment queries a stored packet commitment hash.",
        "operationId": "PacketCommitment",
        "parameters": [
          {
            "name": "channel_id",
            "in": "path",
            "description": "channel unique identifier",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "port_id",
            "in": "path",
            "description": "port unique identifier",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sequence",
            "in": "path",
            "description": "packet sequence",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryPacketCommitmentResponsedefinestheclientqueryresponseforapacketwhichalsoincludesaproofandtheheightfromwhichtheproofwasretrieved"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/grpc.gateway.runtime.Error"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/ibc/core/channel/v1/channels/{channel_id}/ports/{port_id}/packet_receipts/{sequence}": {
      "get": {
        "tags": [
          "Query"
        ],
        "summary": "PacketReceipt",
        "description": "PacketReceipt queries if a given packet sequence has been received on the\nqueried chain",
        "operationId": "PacketReceipt",
        "parameters": [
          {
            "name": "channel_id",
            "in": "path",
            "description": "channel unique identifier",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "port_id",
            "in": "path",
            "description": "port unique identifier",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sequence",
            "in": "path",
            "description": "packet sequence",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryPacketReceiptResponsedefinestheclientqueryresponseforapacketreceiptwhichalsoincludesaproofandtheheightfromwhichtheproofwasretrieved"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/grpc.gateway.runtime.Error"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/ibc/core/channel/v1/connections/{connection}/channels": {
      "get": {
        "tags": [
          "Query"
        ],
        "summary": "ConnectionChannels",
        "description": "ConnectionChannels queries all the channels associated with a connection\nend.",
        "operationId": "ConnectionChannels",
        "parameters": [
          {
            "name": "connection",
            "in": "path",
            "description": "connection unique identifier",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pagination.key",
            "in": "query",
            "description": "key is a value returned in PageResponse.next_key to begin\nquerying the next page most efficiently. Only one of offset or key\nshould be set.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pagination.offset",
            "in": "query",
            "description": "offset is a numeric offset that can be used when key is unavailable.\nIt is less efficient than using key. Only one of offset or key should\nbe set.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pagination.limit",
            "in": "query",
            "description": "limit is the total number of results to be returned in the result page.\nIf left empty it will default to a value to be set by each app.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pagination.count_total",
            "in": "query",
            "description": "count_total is set to true  to indicate that the result set should include\na count of the total number of items available for pagination in UIs.\ncount_total is only respected when offset is used. It is ignored when key\nis set.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "pagination.reverse",
            "in": "query",
            "description": "reverse is set to true if results are to be returned in the descending order.\n\nSince: cosmos-sdk 0.43",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryConnectionChannelsResponseistheResponsetypefortheQueryQueryConnectionChannelsRPCmethod"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/grpc.gateway.runtime.Error"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/ibc/client/v1/params": {
      "get": {
        "tags": [
          "Query"
        ],
        "summary": "ClientParams",
        "description": "ClientParams queries all parameters of the ibc client.",
        "operationId": "ClientParams",
        "parameters": [],
        "responses": {
          "200": {
            "description": "A successful response.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ibc.core.client.v1.QueryClientParamsResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/grpc.gateway.runtime.Error"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/ibc/core/client/v1/client_states": {
      "get": {
        "tags": [
          "Query"
        ],
        "summary": "ClientStates",
        "description": "ClientStates queries all the IBC light clients of a chain.",
        "operationId": "ClientStates",
        "parameters": [
          {
            "name": "pagination.key",
            "in": "query",
            "description": "key is a value returned in PageResponse.next_key to begin\nquerying the next page most efficiently. Only one of offset or key\nshould be set.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pagination.offset",
            "in": "query",
            "description": "offset is a numeric offset that can be used when key is unavailable.\nIt is less efficient than using key. Only one of offset or key should\nbe set.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pagination.limit",
            "in": "query",
            "description": "limit is the total number of results to be returned in the result page.\nIf left empty it will default to a value to be set by each app.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pagination.count_total",
            "in": "query",
            "description": "count_total is set to true  to indicate that the result set should include\na count of the total number of items available for pagination in UIs.\ncount_total is only respected when offset is used. It is ignored when key\nis set.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "pagination.reverse",
            "in": "query",
            "description": "reverse is set to true if results are to be returned in the descending order.\n\nSince: cosmos-sdk 0.43",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ibc.core.client.v1.QueryClientStatesResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/grpc.gateway.runtime.Error"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/ibc/core/client/v1/client_states/{client_id}": {
      "get": {
        "tags": [
          "Query"
        ],
        "summary": "ClientState",
        "description": "ClientState queries an IBC light client.",
        "operationId": "ClientState",
        "parameters": [
          {
            "name": "client_id",
            "in": "path",
            "description": "client state unique identifier",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ibc.core.client.v1.QueryClientStateResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/grpc.gateway.runtime.Error"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/ibc/core/client/v1/client_status/{client_id}": {
      "get": {
        "tags": [
          "Query"
        ],
        "summary": "ClientStatus",
        "description": "Status queries the status of an IBC client.",
        "operationId": "ClientStatus",
        "parameters": [
          {
            "name": "client_id",
            "in": "path",
            "description": "client unique identifier",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ibc.core.client.v1.QueryClientStatusResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/grpc.gateway.runtime.Error"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/ibc/core/client/v1/consensus_states/{client_id}": {
      "get": {
        "tags": [
          "Query"
        ],
        "summary": "ConsensusStates",
        "description": "ConsensusStates queries all the consensus state associated with a given\nclient.",
        "operationId": "ConsensusStates",
        "parameters": [
          {
            "name": "client_id",
            "in": "path",
            "description": "client identifier",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pagination.key",
            "in": "query",
            "description": "key is a value returned in PageResponse.next_key to begin\nquerying the next page most efficiently. Only one of offset or key\nshould be set.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pagination.offset",
            "in": "query",
            "description": "offset is a numeric offset that can be used when key is unavailable.\nIt is less efficient than using key. Only one of offset or key should\nbe set.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pagination.limit",
            "in": "query",
            "description": "limit is the total number of results to be returned in the result page.\nIf left empty it will default to a value to be set by each app.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pagination.count_total",
            "in": "query",
            "description": "count_total is set to true  to indicate that the result set should include\na count of the total number of items available for pagination in UIs.\ncount_total is only respected when offset is used. It is ignored when key\nis set.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "pagination.reverse",
            "in": "query",
            "description": "reverse is set to true if results are to be returned in the descending order.\n\nSince: cosmos-sdk 0.43",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryConsensusStatesResponseistheresponsetypefortheQueryConsensusStatesRPCmethod"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/grpc.gateway.runtime.Error"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/ibc/core/client/v1/consensus_states/{client_id}/revision/{revision_number}/height/{revision_height}": {
      "get": {
        "tags": [
          "Query"
        ],
        "summary": "ConsensusState",
        "description": "ConsensusState queries a consensus state associated with a client state at\na given height.",
        "operationId": "ConsensusState",
        "parameters": [
          {
            "name": "client_id",
            "in": "path",
            "description": "client identifier",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "revision_number",
            "in": "path",
            "description": "consensus state revision number",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "revision_height",
            "in": "path",
            "description": "consensus state revision height",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "latest_height",
            "in": "query",
            "description": "latest_height overrrides the height field and queries the latest stored\nConsensusState.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryConsensusStateResponseistheresponsetypefortheQueryConsensusStateRPCmethod"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/grpc.gateway.runtime.Error"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/ibc/core/client/v1/upgraded_client_states": {
      "get": {
        "tags": [
          "Query"
        ],
        "summary": "UpgradedClientState",
        "description": "UpgradedClientState queries an Upgraded IBC light client.",
        "operationId": "UpgradedClientState",
        "parameters": [],
        "responses": {
          "200": {
            "description": "A successful response.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ibc.core.client.v1.QueryUpgradedClientStateResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/grpc.gateway.runtime.Error"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/ibc/core/client/v1/upgraded_consensus_states": {
      "get": {
        "tags": [
          "Query"
        ],
        "summary": "IBCUpgradedConsensusState",
        "description": "UpgradedConsensusState queries an Upgraded IBC consensus state.",
        "operationId": "IBCUpgradedConsensusState",
        "parameters": [],
        "responses": {
          "200": {
            "description": "A successful response.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ibc.core.client.v1.QueryUpgradedConsensusStateResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/grpc.gateway.runtime.Error"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/ibc/core/connection/v1/client_connections/{client_id}": {
      "get": {
        "tags": [
          "Query"
        ],
        "summary": "ClientConnections",
        "description": "ClientConnections queries the connection paths associated with a client\nstate.",
        "operationId": "ClientConnections",
        "parameters": [
          {
            "name": "client_id",
            "in": "path",
            "description": "client identifier associated with a connection",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryClientConnectionsResponseistheresponsetypefortheQueryClientConnectionsRPCmethod"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/grpc.gateway.runtime.Error"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/ibc/core/connection/v1/connections": {
      "get": {
        "tags": [
          "Query"
        ],
        "summary": "Connections",
        "description": "Connections queries all the IBC connections of a chain.",
        "operationId": "Connections",
        "parameters": [
          {
            "name": "pagination.key",
            "in": "query",
            "description": "key is a value returned in PageResponse.next_key to begin\nquerying the next page most efficiently. Only one of offset or key\nshould be set.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pagination.offset",
            "in": "query",
            "description": "offset is a numeric offset that can be used when key is unavailable.\nIt is less efficient than using key. Only one of offset or key should\nbe set.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pagination.limit",
            "in": "query",
            "description": "limit is the total number of results to be returned in the result page.\nIf left empty it will default to a value to be set by each app.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pagination.count_total",
            "in": "query",
            "description": "count_total is set to true  to indicate that the result set should include\na count of the total number of items available for pagination in UIs.\ncount_total is only respected when offset is used. It is ignored when key\nis set.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "pagination.reverse",
            "in": "query",
            "description": "reverse is set to true if results are to be returned in the descending order.\n\nSince: cosmos-sdk 0.43",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ibc.core.connection.v1.QueryConnectionsResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/grpc.gateway.runtime.Error"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/ibc/core/connection/v1/connections/{connection_id}": {
      "get": {
        "tags": [
          "Query"
        ],
        "summary": "Connection",
        "description": "Connection queries an IBC connection end.",
        "operationId": "Connection",
        "parameters": [
          {
            "name": "connection_id",
            "in": "path",
            "description": "connection unique identifier",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ibc.core.connection.v1.QueryConnectionResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/grpc.gateway.runtime.Error"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/ibc/core/connection/v1/connections/{connection_id}/client_state": {
      "get": {
        "tags": [
          "Query"
        ],
        "summary": "ConnectionClientState",
        "description": "ConnectionClientState queries the client state associated with the\nconnection.",
        "operationId": "ConnectionClientState",
        "parameters": [
          {
            "name": "connection_id",
            "in": "path",
            "description": "connection identifier",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryConnectionClientStateResponseistheresponsetypefortheQueryConnectionClientStateRPCmethod"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/grpc.gateway.runtime.Error"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/ibc/core/connection/v1/connections/{connection_id}/consensus_state/revision/{revision_number}/height/{revision_height}": {
      "get": {
        "tags": [
          "Query"
        ],
        "summary": "ConnectionConsensusState",
        "description": "ConnectionConsensusState queries the consensus state associated with the\nconnection.",
        "operationId": "ConnectionConsensusState",
        "parameters": [
          {
            "name": "connection_id",
            "in": "path",
            "description": "connection identifier",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "revision_number",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "revision_height",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryConnectionConsensusStateResponseistheresponsetypefortheQueryConnectionConsensusStateRPCmethod"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/grpc.gateway.runtime.Error"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/ibc/apps/transfer/v1/denom_traces": {
      "get": {
        "tags": [
          "Query"
        ],
        "summary": "DenomTraces",
        "description": "DenomTraces queries all denomination traces.",
        "operationId": "DenomTraces",
        "parameters": [
          {
            "name": "pagination.key",
            "in": "query",
            "description": "key is a value returned in PageResponse.next_key to begin\nquerying the next page most efficiently. Only one of offset or key\nshould be set.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pagination.offset",
            "in": "query",
            "description": "offset is a numeric offset that can be used when key is unavailable.\nIt is less efficient than using key. Only one of offset or key should\nbe set.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pagination.limit",
            "in": "query",
            "description": "limit is the total number of results to be returned in the result page.\nIf left empty it will default to a value to be set by each app.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pagination.count_total",
            "in": "query",
            "description": "count_total is set to true  to indicate that the result set should include\na count of the total number of items available for pagination in UIs.\ncount_total is only respected when offset is used. It is ignored when key\nis set.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "pagination.reverse",
            "in": "query",
            "description": "reverse is set to true if results are to be returned in the descending order.\n\nSince: cosmos-sdk 0.43",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ibc.applications.transfer.v1.QueryDenomTracesResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DenomTracesException1"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/ibc/apps/transfer/v1/denom_traces/{hash}": {
      "get": {
        "tags": [
          "Query"
        ],
        "summary": "DenomTrace",
        "description": "DenomTrace queries a denomination trace information.",
        "operationId": "DenomTrace",
        "parameters": [
          {
            "name": "hash",
            "in": "path",
            "description": "hash (in hex format) of the denomination trace information.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ibc.applications.transfer.v1.QueryDenomTraceResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DenomTraceException1"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/ibc/apps/transfer/v1/params": {
      "get": {
        "tags": [
          "Query"
        ],
        "summary": "IBCTransferParams",
        "description": "Params queries all parameters of the ibc-transfer module.",
        "operationId": "IBCTransferParams",
        "parameters": [],
        "responses": {
          "200": {
            "description": "A successful response.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ibc.applications.transfer.v1.QueryParamsResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IBCTransferParamsException1"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/cosmos/base/tendermint/v1beta1/blocks/latest": {
      "get": {
        "tags": [
          "Service"
        ],
        "summary": "GetLatestBlock",
        "description": "GetLatestBlock returns the latest block.",
        "operationId": "GetLatestBlock",
        "parameters": [],
        "responses": {
          "200": {
            "description": "A successful response.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/cosmos.base.tendermint.v1beta1.GetLatestBlockResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/grpc.gateway.runtime.Error"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/cosmos/base/tendermint/v1beta1/blocks/{height}": {
      "get": {
        "tags": [
          "Service"
        ],
        "summary": "GetBlockByHeight",
        "description": "GetBlockByHeight queries block for given height.",
        "operationId": "GetBlockByHeight",
        "parameters": [
          {
            "name": "height",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/cosmos.base.tendermint.v1beta1.GetBlockByHeightResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/grpc.gateway.runtime.Error"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/cosmos/base/tendermint/v1beta1/node_info": {
      "get": {
        "tags": [
          "Service"
        ],
        "summary": "GetNodeInfo",
        "description": "GetNodeInfo queries the current node info.",
        "operationId": "GetNodeInfo",
        "parameters": [],
        "responses": {
          "200": {
            "description": "A successful response.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/cosmos.base.tendermint.v1beta1.GetNodeInfoResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/grpc.gateway.runtime.Error"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/cosmos/base/tendermint/v1beta1/syncing": {
      "get": {
        "tags": [
          "Service"
        ],
        "summary": "GetSyncing",
        "description": "GetSyncing queries node syncing.",
        "operationId": "GetSyncing",
        "parameters": [],
        "responses": {
          "200": {
            "description": "A successful response.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/cosmos.base.tendermint.v1beta1.GetSyncingResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/grpc.gateway.runtime.Error"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/cosmos/base/tendermint/v1beta1/validatorsets/latest": {
      "get": {
        "tags": [
          "Service"
        ],
        "summary": "GetLatestValidatorSet",
        "description": "GetLatestValidatorSet queries latest validator-set.",
        "operationId": "GetLatestValidatorSet",
        "parameters": [
          {
            "name": "pagination.key",
            "in": "query",
            "description": "key is a value returned in PageResponse.next_key to begin\nquerying the next page most efficiently. Only one of offset or key\nshould be set.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pagination.offset",
            "in": "query",
            "description": "offset is a numeric offset that can be used when key is unavailable.\nIt is less efficient than using key. Only one of offset or key should\nbe set.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pagination.limit",
            "in": "query",
            "description": "limit is the total number of results to be returned in the result page.\nIf left empty it will default to a value to be set by each app.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pagination.count_total",
            "in": "query",
            "description": "count_total is set to true  to indicate that the result set should include\na count of the total number of items available for pagination in UIs.\ncount_total is only respected when offset is used. It is ignored when key\nis set.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "pagination.reverse",
            "in": "query",
            "description": "reverse is set to true if results are to be returned in the descending order.\n\nSince: cosmos-sdk 0.43",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/cosmos.base.tendermint.v1beta1.GetLatestValidatorSetResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/grpc.gateway.runtime.Error"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/cosmos/base/tendermint/v1beta1/validatorsets/{height}": {
      "get": {
        "tags": [
          "Service"
        ],
        "summary": "GetValidatorSetByHeight",
        "description": "GetValidatorSetByHeight queries validator-set at a given height.",
        "operationId": "GetValidatorSetByHeight",
        "parameters": [
          {
            "name": "height",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pagination.key",
            "in": "query",
            "description": "key is a value returned in PageResponse.next_key to begin\nquerying the next page most efficiently. Only one of offset or key\nshould be set.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pagination.offset",
            "in": "query",
            "description": "offset is a numeric offset that can be used when key is unavailable.\nIt is less efficient than using key. Only one of offset or key should\nbe set.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pagination.limit",
            "in": "query",
            "description": "limit is the total number of results to be returned in the result page.\nIf left empty it will default to a value to be set by each app.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pagination.count_total",
            "in": "query",
            "description": "count_total is set to true  to indicate that the result set should include\na count of the total number of items available for pagination in UIs.\ncount_total is only respected when offset is used. It is ignored when key\nis set.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "pagination.reverse",
            "in": "query",
            "description": "reverse is set to true if results are to be returned in the descending order.\n\nSince: cosmos-sdk 0.43",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/cosmos.base.tendermint.v1beta1.GetValidatorSetByHeightResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/grpc.gateway.runtime.Error"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/cosmos/tx/v1beta1/simulate": {
      "post": {
        "tags": [
          "Service"
        ],
        "summary": "Simulate",
        "description": "Simulate simulates executing a transaction for estimating gas usage.",
        "operationId": "Simulate",
        "parameters": [],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/cosmos.tx.v1beta1.SimulateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "A successful response.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/cosmos.tx.v1beta1.SimulateResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/grpc.gateway.runtime.Error"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/cosmos/tx/v1beta1/txs": {
      "get": {
        "tags": [
          "Service"
        ],
        "summary": "GetTxsEvent",
        "description": "GetTxsEvent fetches txs by event.",
        "operationId": "GetTxsEvent",
        "parameters": [
          {
            "name": "events",
            "in": "query",
            "description": "events is the list of transaction event type.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "pagination.key",
            "in": "query",
            "description": "key is a value returned in PageResponse.next_key to begin\nquerying the next page most efficiently. Only one of offset or key\nshould be set.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pagination.offset",
            "in": "query",
            "description": "offset is a numeric offset that can be used when key is unavailable.\nIt is less efficient than using key. Only one of offset or key should\nbe set.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pagination.limit",
            "in": "query",
            "description": "limit is the total number of results to be returned in the result page.\nIf left empty it will default to a value to be set by each app.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pagination.count_total",
            "in": "query",
            "description": "count_total is set to true  to indicate that the result set should include\na count of the total number of items available for pagination in UIs.\ncount_total is only respected when offset is used. It is ignored when key\nis set.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "pagination.reverse",
            "in": "query",
            "description": "reverse is set to true if results are to be returned in the descending order.\n\nSince: cosmos-sdk 0.43",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "order_by",
            "in": "query",
            "description": "- ORDER_BY_UNSPECIFIED: ORDER_BY_UNSPECIFIED specifies an unknown sorting order. OrderBy defaults to ASC in this case.\n - ORDER_BY_ASC: ORDER_BY_ASC defines ascending order\n - ORDER_BY_DESC: ORDER_BY_DESC defines descending order",
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/order_by"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/cosmos.tx.v1beta1.GetTxsEventResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/grpc.gateway.runtime.Error"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "Service"
        ],
        "summary": "BroadcastTx",
        "description": "BroadcastTx broadcast transaction.",
        "operationId": "BroadcastTx",
        "parameters": [],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/cosmos.tx.v1beta1.BroadcastTxRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "A successful response.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/cosmos.tx.v1beta1.BroadcastTxResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/grpc.gateway.runtime.Error"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/cosmos/tx/v1beta1/txs/{hash}": {
      "get": {
        "tags": [
          "Service"
        ],
        "summary": "GetTx",
        "description": "GetTx fetches a tx by hash.",
        "operationId": "GetTx1",
        "parameters": [
          {
            "name": "hash",
            "in": "path",
            "description": "hash is the tx hash to query, encoded as a hex string.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/cosmos.tx.v1beta1.GetTxResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/grpc.gateway.runtime.Error"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/terra/tx/v1beta1/compute_tax": {
      "post": {
        "tags": [
          "Service"
        ],
        "summary": "ComputeTax",
        "description": "EstimateFee simulates executing a transaction for estimating gas usage.",
        "operationId": "ComputeTax",
        "parameters": [],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/terra.tx.v1beta1.ComputeTaxRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "A successful response.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/terra.tx.v1beta1.ComputeTaxResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/grpc.gateway.runtime.Error"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/dashboard/account_growth": {
      "get": {
        "tags": [
          "Dashboard"
        ],
        "summary": "Get account growth history",
        "description": "Get account growth history",
        "operationId": "Getaccountgrowthhistory",
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "enum": [
                "application/json"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/getAccountGrowthResult"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/dashboard/active_accounts": {
      "get": {
        "tags": [
          "Dashboard"
        ],
        "summary": "Get active accounts count history",
        "description": "Get active accounts count history",
        "operationId": "Getactiveaccountscounthistory",
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "enum": [
                "application/json"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/getActiveAccountsResult"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/dashboard/block_rewards": {
      "get": {
        "tags": [
          "Dashboard"
        ],
        "summary": "Get block reward history",
        "description": "Get block reward history",
        "operationId": "Getblockrewardhistory",
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "enum": [
                "application/json"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/getBlockRewardResult"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/dashboard": {
      "get": {
        "tags": [
          "Dashboard"
        ],
        "summary": "Get information to be used on the dashboard",
        "description": "Get information to be used on the dashboard",
        "operationId": "Getinformationtobeusedonthedashboard",
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "enum": [
                "application/json"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/getDashboardResult"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/dashboard/last_hour_ops_txs_count": {
      "get": {
        "tags": [
          "Dashboard"
        ],
        "summary": "V1DashboardLastHourOpsTxsCount_GET",
        "operationId": "V1DashboardLastHourOpsTxsCount_GET",
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "enum": [
                "application/json"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/getLastHourTxAndOpsCountResult"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/dashboard/registered_accounts": {
      "get": {
        "tags": [
          "Dashboard"
        ],
        "summary": "Get registered accounts count history",
        "description": "Get registered accounts count history",
        "operationId": "Getregisteredaccountscounthistory",
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "enum": [
                "application/json"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/getRegisteredAccountsResult"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/dashboard/seigniorage_proceeds": {
      "get": {
        "tags": [
          "Dashboard"
        ],
        "summary": "Get the amount of seigniorage in the start of the day",
        "description": "Get the amount of seigniorage in the start of the day",
        "operationId": "Gettheamountofseigniorageinthestartoftheday",
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "enum": [
                "application/json"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/seigniorage"
                  },
                  "description": ""
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/dashboard/staking_ratio": {
      "get": {
        "tags": [
          "Dashboard"
        ],
        "summary": "Get the historical staking ratio",
        "description": "Get the historical staking ratio",
        "operationId": "Getthehistoricalstakingratio",
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "enum": [
                "application/json"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/stakingHistory"
                  },
                  "description": ""
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/dashboard/staking_return": {
      "get": {
        "tags": [
          "Dashboard"
        ],
        "summary": "Get staking return history",
        "description": "Get staking return history",
        "operationId": "Getstakingreturnhistory",
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "enum": [
                "application/json"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/seigniorage"
                  },
                  "description": ""
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/dashboard/tx_volume": {
      "get": {
        "tags": [
          "Dashboard"
        ],
        "summary": "Get tx volume history",
        "description": "Get tx volume history",
        "operationId": "Gettxvolumehistory",
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "enum": [
                "application/json"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/getTxVolumeResult"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    }
  },
  "components": {
    "schemas": {
      "CheckTxResult": {
        "title": "CheckTxResult",
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "data": {
            "type": "string"
          },
          "gas_used": {
            "type": "integer",
            "format": "int32"
          },
          "gas_wanted": {
            "type": "integer",
            "format": "int32"
          },
          "info": {
            "type": "string"
          },
          "log": {
            "type": "string"
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/KVPair"
            },
            "description": ""
          }
        }
      },
      "DeliverTxResult": {
        "title": "DeliverTxResult",
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "data": {
            "type": "string"
          },
          "gas_used": {
            "type": "integer",
            "format": "int32"
          },
          "gas_wanted": {
            "type": "integer",
            "format": "int32"
          },
          "info": {
            "type": "string"
          },
          "log": {
            "type": "string"
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/KVPair"
            },
            "description": ""
          }
        }
      },
      "BroadcastTxCommitResult": {
        "title": "BroadcastTxCommitResult",
        "type": "object",
        "properties": {
          "check_tx": {
            "$ref": "#/components/schemas/CheckTxResult"
          },
          "deliver_tx": {
            "$ref": "#/components/schemas/CheckTxResult"
          },
          "hash": {
            "type": "string",
            "example": "EE5F3404034C524501629B56E0DDC38FAD651F04"
          },
          "height": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "KVPair": {
        "title": "KVPair",
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "Coin": {
        "title": "Coin",
        "type": "object",
        "properties": {
          "denom": {
            "type": "string",
            "example": "uluna"
          },
          "amount": {
            "type": "string",
            "example": "50"
          }
        }
      },
      "DecCoin": {
        "title": "DecCoin",
        "type": "object",
        "properties": {
          "denom": {
            "type": "string",
            "example": "ukrw"
          },
          "amount": {
            "type": "string",
            "example": "50.000"
          }
        }
      },
      "TxQuery": {
        "title": "TxQuery",
        "type": "object",
        "properties": {
          "hash": {
            "type": "string",
            "example": "D085138D913993919295FF4B0A9107F1F2CDE0D37A87CE0644E217CBF3B49656"
          },
          "height": {
            "type": "number",
            "example": 368
          },
          "tx": {
            "$ref": "#/components/schemas/StdTx"
          },
          "result": {
            "$ref": "#/components/schemas/Result"
          }
        }
      },
      "PaginatedQueryTxs": {
        "title": "PaginatedQueryTxs",
        "type": "object",
        "properties": {
          "total_count": {
            "type": "number",
            "example": 1
          },
          "count": {
            "type": "number",
            "example": 1
          },
          "page_number": {
            "type": "number",
            "example": 1
          },
          "page_total": {
            "type": "number",
            "example": 1
          },
          "limit": {
            "type": "number",
            "example": 30
          },
          "txs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TxQuery"
            },
            "description": ""
          }
        }
      },
      "StdTx": {
        "title": "StdTx",
        "type": "object",
        "properties": {
          "msg": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": ""
          },
          "fee": {
            "$ref": "#/components/schemas/Fee"
          },
          "memo": {
            "type": "string"
          },
          "signature": {
            "$ref": "#/components/schemas/Signature"
          }
        }
      },
      "BlockID": {
        "title": "BlockID",
        "type": "object",
        "properties": {
          "hash": {
            "type": "string",
            "example": "EE5F3404034C524501629B56E0DDC38FAD651F04"
          },
          "parts": {
            "$ref": "#/components/schemas/Parts"
          }
        }
      },
      "BlockHeader": {
        "title": "BlockHeader",
        "type": "object",
        "properties": {
          "chain_id": {
            "type": "string",
            "example": "columbus-5"
          },
          "height": {
            "type": "number",
            "example": 1
          },
          "time": {
            "type": "string",
            "example": "2017-12-30T05:53:09.287+01:00"
          },
          "num_txs": {
            "type": "number",
            "example": 0
          },
          "last_block_id": {
            "$ref": "#/components/schemas/BlockID"
          },
          "total_txs": {
            "type": "number",
            "example": 35
          },
          "last_commit_hash": {
            "type": "string",
            "example": "EE5F3404034C524501629B56E0DDC38FAD651F04"
          },
          "data_hash": {
            "type": "string",
            "example": "EE5F3404034C524501629B56E0DDC38FAD651F04"
          },
          "validators_hash": {
            "type": "string",
            "example": "EE5F3404034C524501629B56E0DDC38FAD651F04"
          },
          "next_validators_hash": {
            "type": "string",
            "example": "EE5F3404034C524501629B56E0DDC38FAD651F04"
          },
          "consensus_hash": {
            "type": "string",
            "example": "EE5F3404034C524501629B56E0DDC38FAD651F04"
          },
          "app_hash": {
            "type": "string",
            "example": "EE5F3404034C524501629B56E0DDC38FAD651F04"
          },
          "last_results_hash": {
            "type": "string",
            "example": "EE5F3404034C524501629B56E0DDC38FAD651F04"
          },
          "evidence_hash": {
            "type": "string",
            "example": "EE5F3404034C524501629B56E0DDC38FAD651F04"
          },
          "proposer_address": {
            "type": "string",
            "description": "bech32 encoded address",
            "example": "terra1wg2mlrxdmnnkkykgqg4znky86nyrtc45q336yv"
          },
          "version": {
            "$ref": "#/components/schemas/Version"
          }
        }
      },
      "Block": {
        "title": "Block",
        "type": "object",
        "properties": {
          "header": {
            "$ref": "#/components/schemas/BlockHeader"
          },
          "txs": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": ""
          },
          "evidence": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": ""
          },
          "last_commit": {
            "$ref": "#/components/schemas/LastCommit"
          }
        }
      },
      "BlockQuery": {
        "title": "BlockQuery",
        "type": "object",
        "properties": {
          "block_meta": {
            "$ref": "#/components/schemas/BlockMeta"
          },
          "block": {
            "$ref": "#/components/schemas/Block"
          }
        }
      },
      "DelegationDelegatorReward": {
        "title": "DelegationDelegatorReward",
        "type": "object",
        "properties": {
          "validator_address": {
            "type": "string",
            "description": "bech32 encoded address",
            "example": "terravaloper1wg2mlrxdmnnkkykgqg4znky86nyrtc45q7a85l"
          },
          "reward": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Coin"
            },
            "description": ""
          }
        }
      },
      "DelegatorTotalRewards": {
        "title": "DelegatorTotalRewards",
        "type": "object",
        "properties": {
          "rewards": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DelegationDelegatorReward"
            },
            "description": ""
          },
          "total": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Coin"
            },
            "description": ""
          }
        }
      },
      "BaseReq": {
        "title": "BaseReq",
        "type": "object",
        "properties": {
          "from": {
            "type": "string",
            "description": "Sender address or Keybase name to generate a transaction",
            "example": "terra1wg2mlrxdmnnkkykgqg4znky86nyrtc45q336yv"
          },
          "memo": {
            "type": "string",
            "example": "Sent via Terra Station 🚀"
          },
          "chain_id": {
            "type": "string",
            "example": "Columbus-5"
          },
          "account_number": {
            "type": "string",
            "example": "0"
          },
          "sequence": {
            "type": "string",
            "example": "1"
          },
          "gas": {
            "type": "string",
            "example": "200000"
          },
          "gas_adjustment": {
            "type": "string",
            "example": "1.2"
          },
          "fees": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Coin"
            },
            "description": ""
          },
          "simulate": {
            "type": "boolean",
            "description": "Estimate gas for a transaction (cannot be used in conjunction with generate_only)",
            "example": false
          }
        }
      },
      "TendermintValidator": {
        "title": "TendermintValidator",
        "type": "object",
        "properties": {
          "address": {
            "type": "string",
            "description": "bech32 encoded address",
            "example": "terravaloper1wg2mlrxdmnnkkykgqg4znky86nyrtc45q7a85l"
          },
          "pub_key": {
            "$ref": "#/components/schemas/PublicKey"
          },
          "voting_power": {
            "type": "string",
            "example": "1000"
          },
          "proposer_priority": {
            "type": "string",
            "example": "1000"
          }
        }
      },
      "TextProposal": {
        "title": "TextProposal",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "1"
          },
          "content": {
            "$ref": "#/components/schemas/Content"
          },
          "status": {
            "type": "number"
          },
          "final_tally_result": {
            "$ref": "#/components/schemas/TallyResult"
          },
          "total_deposit": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Coin"
            },
            "description": ""
          },
          "submit_time": {
            "type": "string"
          },
          "deposit_end_time": {
            "type": "string"
          },
          "voting_start_time": {
            "type": "string"
          },
          "voting_end_time": {
            "type": "string"
          }
        }
      },
      "Proposer": {
        "title": "Proposer",
        "type": "object",
        "properties": {
          "proposal_id": {
            "type": "string"
          },
          "proposer": {
            "type": "string"
          }
        }
      },
      "Deposit": {
        "title": "Deposit",
        "type": "object",
        "properties": {
          "amount": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Coin"
            },
            "description": ""
          },
          "proposal_id": {
            "type": "string"
          },
          "depositor": {
            "type": "string",
            "description": "bech32 encoded address",
            "example": "terra1wg2mlrxdmnnkkykgqg4znky86nyrtc45q336yv"
          }
        }
      },
      "TallyResult": {
        "title": "TallyResult",
        "type": "object",
        "properties": {
          "yes": {
            "type": "string",
            "example": "0.0000000000"
          },
          "abstain": {
            "type": "string",
            "example": "0.0000000000"
          },
          "no": {
            "type": "string",
            "example": "0.0000000000"
          },
          "no_with_veto": {
            "type": "string",
            "example": "0.0000000000"
          }
        }
      },
      "Vote": {
        "title": "Vote",
        "type": "object",
        "properties": {
          "voter": {
            "type": "string"
          },
          "proposal_id": {
            "type": "string"
          },
          "options": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Option"
            },
            "description": ""
          }
        }
      },
      "Validator": {
        "title": "Validator",
        "type": "object",
        "properties": {
          "operator_address": {
            "type": "string",
            "description": "bech32 encoded address",
            "example": "terravaloper1wg2mlrxdmnnkkykgqg4znky86nyrtc45q7a85l"
          },
          "consensus_pubkey": {
            "$ref": "#/components/schemas/PublicKey"
          },
          "jailed": {
            "type": "boolean"
          },
          "status": {
            "type": "integer",
            "format": "int32"
          },
          "tokens": {
            "type": "string"
          },
          "delegator_shares": {
            "type": "string"
          },
          "description": {
            "$ref": "#/components/schemas/Description"
          },
          "bond_height": {
            "type": "string",
            "example": "0"
          },
          "bond_intra_tx_counter": {
            "type": "integer",
            "format": "int32",
            "example": 0
          },
          "unbonding_height": {
            "type": "string",
            "example": "0"
          },
          "unbonding_time": {
            "type": "string",
            "example": "1970-01-01T00:00:00Z"
          },
          "commission": {
            "$ref": "#/components/schemas/Commission"
          }
        }
      },
      "Delegation": {
        "title": "Delegation",
        "type": "object",
        "properties": {
          "delegation": {
            "$ref": "#/components/schemas/Delegation1"
          },
          "balance": {
            "$ref": "#/components/schemas/Coin"
          }
        }
      },
      "UnbondingDelegation": {
        "title": "UnbondingDelegation",
        "type": "object",
        "properties": {
          "delegator_address": {
            "type": "string"
          },
          "validator_address": {
            "type": "string"
          },
          "entries": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UnbondingEntry"
            },
            "description": ""
          }
        }
      },
      "UnbondingEntry": {
        "title": "UnbondingEntry",
        "type": "object",
        "properties": {
          "initial_balance": {
            "type": "string"
          },
          "balance": {
            "type": "string"
          },
          "creation_height": {
            "type": "string"
          },
          "completion_time": {
            "type": "string"
          }
        }
      },
      "Redelegation": {
        "title": "Redelegation",
        "type": "object",
        "properties": {
          "delegator_address": {
            "type": "string"
          },
          "validator_src_address": {
            "type": "string"
          },
          "validator_dst_address": {
            "type": "string"
          },
          "entries": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RedelegationEntry"
            },
            "description": ""
          }
        }
      },
      "RedelegationEntry": {
        "title": "RedelegationEntry",
        "type": "object",
        "properties": {
          "creation_height": {
            "type": "integer",
            "format": "int32"
          },
          "completion_time": {
            "type": "integer",
            "format": "int32"
          },
          "initial_balance": {
            "type": "string"
          },
          "balance": {
            "type": "string"
          },
          "shares_dst": {
            "type": "string"
          }
        }
      },
      "ValidatorDistInfo": {
        "title": "ValidatorDistInfo",
        "type": "object",
        "properties": {
          "operator_address": {
            "type": "string",
            "description": "bech32 encoded address",
            "example": "terravaloper1wg2mlrxdmnnkkykgqg4znky86nyrtc45q7a85l"
          },
          "self_bond_rewards": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Coin"
            },
            "description": ""
          },
          "val_commission": {
            "$ref": "#/components/schemas/ValCommission"
          }
        }
      },
      "PublicKey": {
        "title": "PublicKey",
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "SigningInfo": {
        "title": "SigningInfo",
        "type": "object",
        "properties": {
          "address": {
            "type": "string",
            "example": "terravalcons1qsdpq864szmfk8nh82qcg7lyle6k95w07acdqn"
          },
          "start_height": {
            "type": "string"
          },
          "index_offset": {
            "type": "string"
          },
          "jailed_until": {
            "type": "string"
          },
          "missed_blocks_counter": {
            "type": "string"
          }
        }
      },
      "ParamChange": {
        "title": "ParamChange",
        "type": "object",
        "properties": {
          "subspace": {
            "type": "string",
            "example": "staking"
          },
          "key": {
            "type": "string",
            "example": "MaxValidators"
          },
          "subkey": {
            "type": "string"
          },
          "value": {
            "type": "object"
          }
        }
      },
      "Supply": {
        "title": "Supply",
        "type": "object",
        "properties": {
          "total": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Coin"
            },
            "description": ""
          }
        }
      },
      "BaseAccount": {
        "title": "BaseAccount",
        "type": "object",
        "properties": {
          "account_number": {
            "type": "string"
          },
          "address": {
            "type": "string"
          },
          "public_key": {
            "type": "string"
          },
          "sequence": {
            "type": "string"
          }
        }
      },
      "Account": {
        "title": "Account",
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "example": "core/Account"
          },
          "value": {
            "$ref": "#/components/schemas/BaseAccount"
          }
        }
      },
      "BaseVestingAccount": {
        "title": "BaseVestingAccount",
        "type": "object",
        "properties": {
          "BaseAccount": {
            "$ref": "#/components/schemas/BaseAccount"
          },
          "original_vesting": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Coin"
            },
            "description": ""
          },
          "delegated_free": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Coin"
            },
            "description": ""
          },
          "delegated_vesting": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Coin"
            },
            "description": ""
          },
          "end_time": {
            "type": "string",
            "example": "0"
          }
        }
      },
      "Schedule": {
        "title": "Schedule",
        "type": "object",
        "properties": {
          "start_time": {
            "type": "string",
            "example": "1556085600"
          },
          "end_time": {
            "type": "string",
            "example": "1556085600"
          },
          "ratio": {
            "type": "string",
            "example": "0.100000000000000000"
          }
        }
      },
      "VestingSchedule": {
        "title": "VestingSchedule",
        "type": "object",
        "properties": {
          "denom": {
            "type": "string",
            "example": "usdr"
          },
          "lazy_schedules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Schedule"
            },
            "description": ""
          }
        }
      },
      "BaseLazyGradedVestingAccount": {
        "title": "BaseLazyGradedVestingAccount",
        "type": "object",
        "properties": {
          "BaseVestingAccount": {
            "$ref": "#/components/schemas/BaseVestingAccount"
          },
          "vesting_schedules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VestingSchedule"
            },
            "description": ""
          }
        }
      },
      "LazyGradedVestingAccount": {
        "title": "LazyGradedVestingAccount",
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "example": "core/LazyGradedVestingAccount"
          },
          "value": {
            "$ref": "#/components/schemas/BaseLazyGradedVestingAccount"
          }
        }
      },
      "SwapReq": {
        "title": "SwapReq",
        "required": [
          "base_req",
          "offer_coin",
          "ask_denom"
        ],
        "type": "object",
        "properties": {
          "base_req": {
            "$ref": "#/components/schemas/BaseReq"
          },
          "offer_coin": {
            "$ref": "#/components/schemas/Coin"
          },
          "ask_denom": {
            "type": "string",
            "example": "uluna"
          },
          "receiver": {
            "type": "string",
            "description": "the `receiver` field can be skipped when the receiver is trader",
            "example": "terra1wg2mlrxdmnnkkykgqg4znky86nyrtc45q336yv"
          }
        }
      },
      "MarketParams": {
        "title": "MarketParams",
        "type": "object",
        "properties": {
          "base_pool": {
            "type": "number",
            "example": 1000000
          },
          "pool_recovery_period": {
            "type": "number",
            "example": 16000
          },
          "min_stability_spread": {
            "type": "number",
            "example": 0.02
          }
        }
      },
      "PrevoteReq": {
        "title": "PrevoteReq",
        "type": "object",
        "properties": {
          "base_req": {
            "$ref": "#/components/schemas/BaseReq"
          },
          "exchange_rate": {
            "type": "number",
            "description": "exchange rate of Luna in denom currency is to make prevote hash; this field is required to submit prevote in case absence of hash",
            "example": 1000
          },
          "salt": {
            "type": "string",
            "description": "salt is to make prevote hash; this field is required to submit prevote in case  absence of hash",
            "example": "abcd"
          },
          "hash": {
            "type": "string",
            "description": "hex string; hash of next vote; empty == skip prevote",
            "example": "061bf1e27dfff121f40c826e593c8a28ec299a02"
          },
          "validator": {
            "type": "string",
            "description": "bech32 encoded address",
            "example": "terravaloper1wg2mlrxdmnnkkykgqg4znky86nyrtc45q7a85l"
          }
        }
      },
      "VoteReq": {
        "title": "VoteReq",
        "type": "object",
        "properties": {
          "base_req": {
            "$ref": "#/components/schemas/BaseReq"
          },
          "exchange_rate": {
            "type": "number",
            "description": "proof exchange rate of Luna in denom currency was used to make prevote hash; initial prevote does not require this field",
            "example": 1000
          },
          "salt": {
            "type": "string",
            "description": "proof salt was used to make prevote hash; initial prevote does not require this field",
            "example": "abcd"
          },
          "validator": {
            "type": "string",
            "description": "bech32 encoded address",
            "example": "terravaloper1wg2mlrxdmnnkkykgqg4znky86nyrtc45q7a85l"
          }
        }
      },
      "AggregatePrevoteReq": {
        "title": "AggregatePrevoteReq",
        "type": "object",
        "properties": {
          "base_req": {
            "$ref": "#/components/schemas/BaseReq"
          },
          "exchange_rates": {
            "type": "string",
            "description": "exchange rates of Luna in denom currencies are to make aggregate prevote hash; this field is required to submit prevote in case absence of hash",
            "example": "1000.0ukrw,1.2uusd,0.99usdr"
          },
          "salt": {
            "type": "string",
            "description": "salt is to make prevote hash; this field is required to submit prevote in case  absence of hash",
            "example": "abcd"
          },
          "hash": {
            "type": "string",
            "description": "hex string; hash of next vote; empty == skip prevote",
            "example": "061bf1e27dfff121f40c826e593c8a28ec299a02"
          }
        }
      },
      "AggregateVoteReq": {
        "title": "AggregateVoteReq",
        "type": "object",
        "properties": {
          "base_req": {
            "$ref": "#/components/schemas/BaseReq"
          },
          "exchange_rates": {
            "type": "string",
            "description": "proof exchange rates of Luna in denom currency were used to make aggregate prevote hash",
            "example": "1000.0ukrw,1.2uusd,0.99usdr"
          },
          "salt": {
            "type": "string",
            "description": "proof salt was used to make prevote hash; initial prevote does not require this field",
            "example": "abcd"
          }
        }
      },
      "DelegateReq": {
        "title": "DelegateReq",
        "type": "object",
        "properties": {
          "base_req": {
            "$ref": "#/components/schemas/BaseReq"
          },
          "feeder": {
            "type": "string",
            "description": "bech32 encoded address",
            "example": "terra1wg2mlrxdmnnkkykgqg4znky86nyrtc45q336yv"
          }
        }
      },
      "ExchangeRateVote": {
        "title": "ExchangeRateVote",
        "type": "object",
        "properties": {
          "exchange_rate": {
            "type": "number",
            "example": 0.01241
          },
          "denom": {
            "type": "string",
            "example": "ukrw"
          },
          "voter": {
            "type": "string",
            "description": "bech32 encoded address",
            "example": "terravaloper1wg2mlrxdmnnkkykgqg4znky86nyrtc45q7a85l"
          }
        }
      },
      "ExchangeRatePrevote": {
        "title": "ExchangeRatePrevote",
        "type": "object",
        "properties": {
          "hash": {
            "type": "string",
            "example": "061bf1e27dfff121f40c826e593c8a28ec299a02"
          },
          "denom": {
            "type": "string",
            "example": "uusd"
          },
          "voter": {
            "type": "string",
            "description": "bech32 encoded address",
            "example": "terravaloper1wg2mlrxdmnnkkykgqg4znky86nyrtc45q7a85l"
          },
          "submit_block": {
            "type": "number",
            "example": 1
          }
        }
      },
      "AggregateExchangeRatePrevote": {
        "title": "AggregateExchangeRatePrevote",
        "type": "object",
        "properties": {
          "hash": {
            "type": "string",
            "example": "061bf1e27dfff121f40c826e593c8a28ec299a02"
          },
          "voter": {
            "type": "string",
            "description": "bech32 encoded address",
            "example": "terravaloper1wg2mlrxdmnnkkykgqg4znky86nyrtc45q7a85l"
          },
          "submit_block": {
            "type": "number",
            "example": 1
          }
        }
      },
      "AggregateExchangeRateVote": {
        "title": "AggregateExchangeRateVote",
        "type": "object",
        "properties": {
          "exchange_rates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Coin"
            },
            "description": ""
          },
          "voter": {
            "type": "string",
            "description": "bech32 encoded address",
            "example": "terravaloper1wg2mlrxdmnnkkykgqg4znky86nyrtc45q7a85l"
          }
        }
      },
      "OracleParams": {
        "title": "OracleParams",
        "type": "object",
        "properties": {
          "vote_period": {
            "type": "number",
            "example": 900
          },
          "vote_threshold": {
            "type": "number",
            "example": 0.67
          },
          "drop_threshold": {
            "type": "number",
            "example": 10
          },
          "oracle_reward_band": {
            "type": "number",
            "example": 0.02
          }
        }
      },
      "PolicyConstraints": {
        "title": "PolicyConstraints",
        "type": "object",
        "properties": {
          "rate_min": {
            "type": "number",
            "description": "0.05%",
            "example": 0.0005
          },
          "rate_max": {
            "type": "number",
            "description": "1%",
            "example": 0.01
          },
          "cap": {
            "$ref": "#/components/schemas/Coin"
          },
          "change_max": {
            "type": "number",
            "description": "0.025%",
            "example": 0.00025
          }
        }
      },
      "TreasuryParams": {
        "title": "TreasuryParams",
        "type": "object",
        "properties": {
          "tax_policy": {
            "$ref": "#/components/schemas/PolicyConstraints"
          },
          "reward_policy": {
            "$ref": "#/components/schemas/PolicyConstraints"
          },
          "seigniorage_burden_target": {
            "type": "number",
            "description": "67%",
            "example": 0.67
          },
          "mining_increment": {
            "type": "number",
            "example": 1.07
          },
          "window_short": {
            "type": "integer",
            "format": "int32",
            "example": 4
          },
          "window_long": {
            "type": "integer",
            "format": "int32",
            "example": 52
          },
          "window_probation": {
            "type": "integer",
            "format": "int32",
            "example": 12
          }
        }
      },
      "WasmParams": {
        "title": "WasmParams",
        "type": "object",
        "properties": {
          "max_contract_size": {
            "type": "number",
            "description": "allowed max contract bytes size",
            "example": 1000000
          },
          "max_contract_gas": {
            "type": "number",
            "description": "allowed max gas usages per each contract execution",
            "example": 1000000
          },
          "max_contract_msg_size": {
            "type": "number",
            "description": "allowed max contract exe msg bytes size",
            "example": 1000000
          },
          "max_contract_data_size": {
            "type": "number",
            "description": "allowed max contract return data size",
            "example": 100
          },
          "event_params": {
            "$ref": "#/components/schemas/EventParams"
          }
        }
      },
      "MultiSignPubKey": {
        "title": "MultiSignPubKey",
        "type": "object",
        "properties": {
          "threshold": {
            "type": "number",
            "example": 1
          },
          "pubkeys": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": ""
          }
        }
      },
      "StdSignature": {
        "title": "StdSignature",
        "type": "object",
        "properties": {
          "signature": {
            "type": "string",
            "example": "MEUCIQD02fsDPra8MtbRsyB1w7bqTM55Wu138zQbFcWx4+CFyAIge5WNPfKIuvzBZ69MyqHsqD8S1IwiEp+iUb6VSdtlpgY="
          },
          "pub_key": {
            "$ref": "#/components/schemas/PublicKey"
          }
        }
      },
      "EstimateFeeResp": {
        "title": "EstimateFeeResp",
        "type": "object",
        "properties": {
          "fee": {
            "$ref": "#/components/schemas/Fee"
          }
        }
      },
      "CodeInfo": {
        "title": "CodeInfo",
        "type": "object",
        "properties": {
          "code_hash": {
            "type": "string"
          },
          "creator": {
            "type": "string"
          }
        }
      },
      "ContractInfo": {
        "title": "ContractInfo",
        "type": "object",
        "properties": {
          "code_id": {
            "type": "string"
          },
          "address": {
            "type": "string",
            "description": "bech32 encoded address",
            "example": "terra1wg2mlrxdmnnkkykgqg4znky86nyrtc45q336yv"
          },
          "creator": {
            "type": "string",
            "description": "bech32 encoded address",
            "example": "terra1wg2mlrxdmnnkkykgqg4znky86nyrtc45q336yv"
          },
          "admin": {
            "type": "string",
            "description": "bech32 encoded address",
            "example": "terra1wg2mlrxdmnnkkykgqg4znky86nyrtc45q336yv"
          },
          "init_msg": {
            "type": "string"
          }
        }
      },
      "StoreCodeReq": {
        "title": "StoreCodeReq",
        "type": "object",
        "properties": {
          "base_req": {
            "$ref": "#/components/schemas/BaseReq"
          },
          "wasm_bytes": {
            "type": "string",
            "example": "Avz04VhtKJh8ACCVzlI8aTosGy0ikFXKIVHQ3jKMrosH"
          }
        }
      },
      "MigrateCodeReq": {
        "title": "MigrateCodeReq",
        "type": "object",
        "properties": {
          "base_req": {
            "$ref": "#/components/schemas/BaseReq"
          },
          "wasm_bytes": {
            "type": "string",
            "example": "Avz04VhtKJh8ACCVzlI8aTosGy0ikFXKIVHQ3jKMrosH"
          }
        }
      },
      "InstantiateContractReq": {
        "title": "InstantiateContractReq",
        "type": "object",
        "properties": {
          "base_req": {
            "$ref": "#/components/schemas/BaseReq"
          },
          "init_coins": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Coin"
            },
            "description": ""
          },
          "init_msg": {
            "type": "string",
            "description": "json formatted string"
          },
          "admin": {
            "type": "string",
            "description": "bech32 encoded address",
            "example": "terra1wg2mlrxdmnnkkykgqg4znky86nyrtc45q336yv"
          }
        }
      },
      "ExecuteContractReq": {
        "title": "ExecuteContractReq",
        "type": "object",
        "properties": {
          "base_req": {
            "$ref": "#/components/schemas/BaseReq"
          },
          "coins": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Coin"
            },
            "description": ""
          },
          "exec_msg": {
            "type": "string"
          }
        }
      },
      "MigrateContractReq": {
        "title": "MigrateContractReq",
        "type": "object",
        "properties": {
          "base_req": {
            "$ref": "#/components/schemas/BaseReq"
          },
          "new_code_id": {
            "type": "number",
            "example": 10
          },
          "migrate_msg": {
            "type": "string"
          }
        }
      },
      "UpdateContractAdminReq": {
        "title": "UpdateContractAdminReq",
        "type": "object",
        "properties": {
          "base_req": {
            "$ref": "#/components/schemas/BaseReq"
          },
          "new_admin": {
            "type": "string",
            "description": "bech32 encoded address",
            "example": "terra1wg2mlrxdmnnkkykgqg4znky86nyrtc45q336yv"
          }
        }
      },
      "ClearContractAdminReq": {
        "title": "ClearContractAdminReq",
        "type": "object",
        "properties": {
          "base_req": {
            "$ref": "#/components/schemas/BaseReq"
          }
        }
      },
      "GenericAuthorization": {
        "title": "GenericAuthorization",
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "example": "msgauth/GenericAuthorization"
          },
          "value": {
            "$ref": "#/components/schemas/Value3"
          }
        }
      },
      "SendAuthorization": {
        "title": "SendAuthorization",
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "example": "msgauth/SendAuthorization"
          },
          "value": {
            "$ref": "#/components/schemas/Value4"
          }
        }
      },
      "GenericGrantInfo": {
        "title": "GenericGrantInfo",
        "type": "object",
        "properties": {
          "authorization": {
            "$ref": "#/components/schemas/GenericAuthorization"
          },
          "expiration": {
            "type": "string",
            "example": "2021-06-24T09:33:20.012999Z"
          }
        }
      },
      "SendGrantInfo": {
        "title": "SendGrantInfo",
        "type": "object",
        "properties": {
          "authorization": {
            "$ref": "#/components/schemas/SendAuthorization"
          },
          "expiration": {
            "type": "string",
            "example": "2021-06-24T09:33:20.012999Z"
          }
        }
      },
      "GrantReq": {
        "title": "GrantReq",
        "required": [
          "base_req",
          "period"
        ],
        "type": "object",
        "properties": {
          "base_req": {
            "$ref": "#/components/schemas/BaseReq"
          },
          "period": {
            "type": "string",
            "description": "nano second of time duration",
            "example": "3600000000000"
          },
          "limit": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Coin"
            },
            "description": "required when grant MsgType == send"
          }
        }
      },
      "RevokeGrantReq": {
        "title": "RevokeGrantReq",
        "required": [
          "base_req"
        ],
        "type": "object",
        "properties": {
          "base_req": {
            "$ref": "#/components/schemas/BaseReq"
          }
        }
      },
      "ExecuteGrantReq": {
        "title": "ExecuteGrantReq",
        "required": [
          "base_req",
          "msgs"
        ],
        "type": "object",
        "properties": {
          "base_req": {
            "$ref": "#/components/schemas/BaseReq"
          },
          "msgs": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": ""
          }
        }
      },
      "TaxCap": {
        "title": "TaxCap",
        "type": "object",
        "properties": {
          "denom": {
            "type": "string",
            "example": "uluna"
          },
          "tax_cap": {
            "type": "string",
            "example": "50"
          }
        }
      },
      "cosmos.auth.v1beta1.Params": {
        "title": "cosmos.auth.v1beta1.Params",
        "type": "object",
        "properties": {
          "max_memo_characters": {
            "type": "string"
          },
          "tx_sig_limit": {
            "type": "string"
          },
          "tx_size_cost_per_byte": {
            "type": "string"
          },
          "sig_verify_cost_ed25519": {
            "type": "string"
          },
          "sig_verify_cost_secp256k1": {
            "type": "string"
          }
        },
        "description": "Params defines the parameters for the auth module."
      },
      "cosmos.auth.v1beta1.QueryAccountResponse": {
        "title": "cosmos.auth.v1beta1.QueryAccountResponse",
        "type": "object",
        "properties": {
          "account": {
            "$ref": "#/components/schemas/google.protobuf.Any"
          }
        },
        "description": "QueryAccountResponse is the response type for the Query/Account RPC method."
      },
      "cosmos.auth.v1beta1.QueryAccountsResponse": {
        "title": "cosmos.auth.v1beta1.QueryAccountsResponse",
        "type": "object",
        "properties": {
          "accounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/google.protobuf.Any"
            },
            "description": ""
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        },
        "description": "QueryAccountsResponse is the response type for the Query/Accounts RPC method.\n\nSince: cosmos-sdk 0.43"
      },
      "cosmos.auth.v1beta1.QueryParamsResponse": {
        "title": "cosmos.auth.v1beta1.QueryParamsResponse",
        "type": "object",
        "properties": {
          "params": {
            "$ref": "#/components/schemas/Params"
          }
        },
        "description": "QueryParamsResponse is the response type for the Query/Params RPC method."
      },
      "PageRequestistobeembeddedingRPCrequestmessagesforefficientpagination.Ex": {
        "title": "PageRequestistobeembeddedingRPCrequestmessagesforefficientpagination.Ex",
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "key is a value returned in PageResponse.next_key to begin\nquerying the next page most efficiently. Only one of offset or key\nshould be set."
          },
          "offset": {
            "type": "string",
            "description": "offset is a numeric offset that can be used when key is unavailable.\nIt is less efficient than using key. Only one of offset or key should\nbe set."
          },
          "limit": {
            "type": "string",
            "description": "limit is the total number of results to be returned in the result page.\nIf left empty it will default to a value to be set by each app."
          },
          "count_total": {
            "type": "boolean",
            "description": "count_total is set to true  to indicate that the result set should include\na count of the total number of items available for pagination in UIs.\ncount_total is only respected when offset is used. It is ignored when key\nis set."
          },
          "reverse": {
            "type": "boolean",
            "description": "reverse is set to true if results are to be returned in the descending order.\n\nSince: cosmos-sdk 0.43"
          }
        },
        "description": "message SomeRequest {\n         Foo some_parameter = 1;\n         PageRequest pagination = 2;\n }"
      },
      "cosmos.base.query.v1beta1.PageResponse": {
        "title": "cosmos.base.query.v1beta1.PageResponse",
        "type": "object",
        "properties": {
          "next_key": {
            "type": "string"
          },
          "total": {
            "type": "string"
          }
        },
        "description": "PageResponse is to be embedded in gRPC response messages where the\ncorresponding request message has used PageRequest.\n\n message SomeResponse {\n         repeated Bar results = 1;\n         PageResponse page = 2;\n }"
      },
      "google.protobuf.Any": {
        "title": "google.protobuf.Any",
        "type": "object",
        "properties": {
          "type_url": {
            "type": "string",
            "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
          },
          "value": {
            "type": "string",
            "description": "Must be a valid serialized protocol buffer of the above specified type."
          }
        },
        "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n\n Example 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\n Example 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := ptypes.MarshalAny(foo)\n     ...\n     foo := &pb.Foo{}\n     if err := ptypes.UnmarshalAny(any, foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\n\nJSON\n====\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
      },
      "grpc.gateway.runtime.Error": {
        "title": "grpc.gateway.runtime.Error",
        "type": "object",
        "properties": {
          "error": {
            "type": "string"
          },
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          },
          "details": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/google.protobuf.Any"
            },
            "description": ""
          }
        }
      },
      "cosmos.authz.v1beta1.Grant": {
        "title": "cosmos.authz.v1beta1.Grant",
        "type": "object",
        "properties": {
          "authorization": {
            "$ref": "#/components/schemas/google.protobuf.Any"
          },
          "expiration": {
            "type": "string",
            "format": "date-time"
          }
        },
        "description": "Grant gives permissions to execute\nthe provide method with expiration time."
      },
      "cosmos.authz.v1beta1.QueryGrantsResponse": {
        "title": "cosmos.authz.v1beta1.QueryGrantsResponse",
        "type": "object",
        "properties": {
          "grants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/cosmos.authz.v1beta1.Grant"
            },
            "description": "authorizations is a list of grants granted for grantee by granter."
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination1"
          }
        },
        "description": "QueryGrantsResponse is the response type for the Query/Authorizations RPC method."
      },
      "cosmos.bank.v1beta1.DenomUnit": {
        "title": "cosmos.bank.v1beta1.DenomUnit",
        "type": "object",
        "properties": {
          "denom": {
            "type": "string",
            "description": "denom represents the string name of the given denom unit (e.g uatom)."
          },
          "exponent": {
            "type": "integer",
            "description": "exponent represents power of 10 exponent that one must\nraise the base_denom to in order to equal the given DenomUnit's denom\n1 denom = 1^exponent base_denom\n(e.g. with a base_denom of uatom, one can create a DenomUnit of 'atom' with\nexponent = 6, thus: 1 atom = 10^6 uatom).",
            "format": "int64"
          },
          "aliases": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": ""
          }
        },
        "description": "DenomUnit represents a struct that describes a given\ndenomination unit of the basic token."
      },
      "cosmos.bank.v1beta1.Metadata": {
        "title": "cosmos.bank.v1beta1.Metadata",
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "denom_units": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/cosmos.bank.v1beta1.DenomUnit"
            },
            "description": ""
          },
          "base": {
            "type": "string",
            "description": "base represents the base denom (should be the DenomUnit with exponent = 0)."
          },
          "display": {
            "type": "string",
            "description": "display indicates the suggested denom that should be\ndisplayed in clients."
          },
          "name": {
            "type": "string",
            "description": "Since: cosmos-sdk 0.43"
          },
          "symbol": {
            "type": "string",
            "description": "symbol is the token symbol usually shown on exchanges (eg: ATOM). This can\nbe the same as the display.\n\nSince: cosmos-sdk 0.43"
          }
        },
        "description": "Metadata represents a struct that describes\na basic token."
      },
      "cosmos.bank.v1beta1.Params": {
        "title": "cosmos.bank.v1beta1.Params",
        "type": "object",
        "properties": {
          "send_enabled": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/cosmos.bank.v1beta1.SendEnabled"
            },
            "description": ""
          },
          "default_send_enabled": {
            "type": "boolean"
          }
        },
        "description": "Params defines the parameters for the bank module."
      },
      "cosmos.bank.v1beta1.QueryAllBalancesResponse": {
        "title": "cosmos.bank.v1beta1.QueryAllBalancesResponse",
        "type": "object",
        "properties": {
          "balances": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/cosmos.base.v1beta1.Coin"
            },
            "description": "balances is the balances of all the coins."
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        },
        "description": "QueryAllBalancesResponse is the response type for the Query/AllBalances RPC\nmethod."
      },
      "cosmos.bank.v1beta1.QueryBalanceResponse": {
        "title": "cosmos.bank.v1beta1.QueryBalanceResponse",
        "type": "object",
        "properties": {
          "balance": {
            "$ref": "#/components/schemas/cosmos.base.v1beta1.Coin"
          }
        },
        "description": "QueryBalanceResponse is the response type for the Query/Balance RPC method."
      },
      "cosmos.bank.v1beta1.QueryDenomMetadataResponse": {
        "title": "cosmos.bank.v1beta1.QueryDenomMetadataResponse",
        "type": "object",
        "properties": {
          "metadata": {
            "$ref": "#/components/schemas/cosmos.bank.v1beta1.Metadata"
          }
        },
        "description": "QueryDenomMetadataResponse is the response type for the Query/DenomMetadata RPC\nmethod."
      },
      "cosmos.bank.v1beta1.QueryDenomsMetadataResponse": {
        "title": "cosmos.bank.v1beta1.QueryDenomsMetadataResponse",
        "type": "object",
        "properties": {
          "metadatas": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/cosmos.bank.v1beta1.Metadata"
            },
            "description": "metadata provides the client information for all the registered tokens."
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        },
        "description": "QueryDenomsMetadataResponse is the response type for the Query/DenomsMetadata RPC\nmethod."
      },
      "cosmos.bank.v1beta1.QueryParamsResponse": {
        "title": "cosmos.bank.v1beta1.QueryParamsResponse",
        "type": "object",
        "properties": {
          "params": {
            "$ref": "#/components/schemas/cosmos.bank.v1beta1.Params"
          }
        },
        "description": "QueryParamsResponse defines the response type for querying x/bank parameters."
      },
      "cosmos.bank.v1beta1.QuerySupplyOfResponse": {
        "title": "cosmos.bank.v1beta1.QuerySupplyOfResponse",
        "type": "object",
        "properties": {
          "amount": {
            "$ref": "#/components/schemas/cosmos.base.v1beta1.Coin"
          }
        },
        "description": "QuerySupplyOfResponse is the response type for the Query/SupplyOf RPC method."
      },
      "QueryTotalSupplyResponseistheresponsetypefortheQueryTotalSupplyRPCmethod": {
        "title": "QueryTotalSupplyResponseistheresponsetypefortheQueryTotalSupplyRPCmethod",
        "type": "object",
        "properties": {
          "supply": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/cosmos.base.v1beta1.Coin"
            },
            "description": ""
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination4"
          }
        }
      },
      "cosmos.bank.v1beta1.SendEnabled": {
        "title": "cosmos.bank.v1beta1.SendEnabled",
        "type": "object",
        "properties": {
          "denom": {
            "type": "string"
          },
          "enabled": {
            "type": "boolean"
          }
        },
        "description": "SendEnabled maps coin denom to a send_enabled status (whether a denom is\nsendable)."
      },
      "cosmos.base.v1beta1.Coin": {
        "title": "cosmos.base.v1beta1.Coin",
        "type": "object",
        "properties": {
          "denom": {
            "type": "string"
          },
          "amount": {
            "type": "string"
          }
        },
        "description": "Coin defines a token with a denomination and an amount.\n\nNOTE: The amount field is an Int which implements the custom method\nsignatures required by gogoproto."
      },
      "cosmos.base.tendermint.v1beta1.GetBlockByHeightResponse": {
        "title": "cosmos.base.tendermint.v1beta1.GetBlockByHeightResponse",
        "type": "object",
        "properties": {
          "block_id": {
            "$ref": "#/components/schemas/BlockID26"
          },
          "block": {
            "$ref": "#/components/schemas/tendermint.types.Block"
          }
        },
        "description": "GetBlockByHeightResponse is the response type for the Query/GetBlockByHeight RPC method."
      },
      "cosmos.base.tendermint.v1beta1.GetLatestBlockResponse": {
        "title": "cosmos.base.tendermint.v1beta1.GetLatestBlockResponse",
        "type": "object",
        "properties": {
          "block_id": {
            "$ref": "#/components/schemas/BlockID26"
          },
          "block": {
            "$ref": "#/components/schemas/tendermint.types.Block"
          }
        },
        "description": "GetLatestBlockResponse is the response type for the Query/GetLatestBlock RPC method."
      },
      "cosmos.base.tendermint.v1beta1.GetLatestValidatorSetResponse": {
        "title": "cosmos.base.tendermint.v1beta1.GetLatestValidatorSetResponse",
        "type": "object",
        "properties": {
          "block_height": {
            "type": "string"
          },
          "validators": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/cosmos.base.tendermint.v1beta1.Validator"
            },
            "description": ""
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination1"
          }
        },
        "description": "GetLatestValidatorSetResponse is the response type for the Query/GetValidatorSetByHeight RPC method."
      },
      "cosmos.base.tendermint.v1beta1.GetNodeInfoResponse": {
        "title": "cosmos.base.tendermint.v1beta1.GetNodeInfoResponse",
        "type": "object",
        "properties": {
          "default_node_info": {
            "$ref": "#/components/schemas/tendermint.p2p.DefaultNodeInfo"
          },
          "application_version": {
            "$ref": "#/components/schemas/cosmos.base.tendermint.v1beta1.VersionInfo"
          }
        },
        "description": "GetNodeInfoResponse is the request type for the Query/GetNodeInfo RPC method."
      },
      "cosmos.base.tendermint.v1beta1.GetSyncingResponse": {
        "title": "cosmos.base.tendermint.v1beta1.GetSyncingResponse",
        "type": "object",
        "properties": {
          "syncing": {
            "type": "boolean"
          }
        },
        "description": "GetSyncingResponse is the response type for the Query/GetSyncing RPC method."
      },
      "cosmos.base.tendermint.v1beta1.GetValidatorSetByHeightResponse": {
        "title": "cosmos.base.tendermint.v1beta1.GetValidatorSetByHeightResponse",
        "type": "object",
        "properties": {
          "block_height": {
            "type": "string"
          },
          "validators": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/cosmos.base.tendermint.v1beta1.Validator"
            },
            "description": ""
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination1"
          }
        },
        "description": "GetValidatorSetByHeightResponse is the response type for the Query/GetValidatorSetByHeight RPC method."
      },
      "ModuleisthetypeforVersionInfo": {
        "title": "ModuleisthetypeforVersionInfo",
        "type": "object",
        "properties": {
          "path": {
            "type": "string"
          },
          "version": {
            "type": "string"
          },
          "sum": {
            "type": "string"
          }
        }
      },
      "cosmos.base.tendermint.v1beta1.Validator": {
        "title": "cosmos.base.tendermint.v1beta1.Validator",
        "type": "object",
        "properties": {
          "address": {
            "type": "string"
          },
          "pub_key": {
            "$ref": "#/components/schemas/google.protobuf.Any"
          },
          "voting_power": {
            "type": "string"
          },
          "proposer_priority": {
            "type": "string"
          }
        },
        "description": "Validator is the type for the validator-set."
      },
      "cosmos.base.tendermint.v1beta1.VersionInfo": {
        "title": "cosmos.base.tendermint.v1beta1.VersionInfo",
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "app_name": {
            "type": "string"
          },
          "version": {
            "type": "string"
          },
          "git_commit": {
            "type": "string"
          },
          "build_tags": {
            "type": "string"
          },
          "go_version": {
            "type": "string"
          },
          "build_deps": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ModuleisthetypeforVersionInfo"
            },
            "description": ""
          },
          "cosmos_sdk_version": {
            "type": "string"
          }
        },
        "description": "VersionInfo is the type for the GetNodeInfoResponse message."
      },
      "PublicKeydefinesthekeysavailableforusewithTendermintValidators": {
        "title": "PublicKeydefinesthekeysavailableforusewithTendermintValidators",
        "type": "object",
        "properties": {
          "ed25519": {
            "type": "string"
          },
          "secp256k1": {
            "type": "string"
          }
        }
      },
      "tendermint.p2p.DefaultNodeInfo": {
        "title": "tendermint.p2p.DefaultNodeInfo",
        "type": "object",
        "properties": {
          "protocol_version": {
            "$ref": "#/components/schemas/tendermint.p2p.ProtocolVersion"
          },
          "default_node_id": {
            "type": "string"
          },
          "listen_addr": {
            "type": "string"
          },
          "network": {
            "type": "string"
          },
          "version": {
            "type": "string"
          },
          "channels": {
            "type": "string"
          },
          "moniker": {
            "type": "string"
          },
          "other": {
            "$ref": "#/components/schemas/tendermint.p2p.DefaultNodeInfoOther"
          }
        }
      },
      "tendermint.p2p.DefaultNodeInfoOther": {
        "title": "tendermint.p2p.DefaultNodeInfoOther",
        "type": "object",
        "properties": {
          "tx_index": {
            "type": "string"
          },
          "rpc_address": {
            "type": "string"
          }
        }
      },
      "tendermint.p2p.ProtocolVersion": {
        "title": "tendermint.p2p.ProtocolVersion",
        "type": "object",
        "properties": {
          "p2p": {
            "type": "string"
          },
          "block": {
            "type": "string"
          },
          "app": {
            "type": "string"
          }
        }
      },
      "tendermint.types.Block": {
        "title": "tendermint.types.Block",
        "type": "object",
        "properties": {
          "header": {
            "$ref": "#/components/schemas/tendermint.types.Header"
          },
          "data": {
            "$ref": "#/components/schemas/Datacontainsthesetoftransactionsincludedintheblock"
          },
          "evidence": {
            "$ref": "#/components/schemas/tendermint.types.EvidenceList"
          },
          "last_commit": {
            "$ref": "#/components/schemas/tendermint.types.Commit"
          }
        }
      },
      "BlockID26": {
        "title": "BlockID26",
        "type": "object",
        "properties": {
          "hash": {
            "type": "string"
          },
          "part_set_header": {
            "$ref": "#/components/schemas/PartsetHeader"
          }
        }
      },
      "BlockIdFlagindicateswhichBlcokIDthesignatureisfor": {
        "title": "BlockIdFlagindicateswhichBlcokIDthesignatureisfor",
        "enum": [
          "BLOCK_ID_FLAG_UNKNOWN",
          "BLOCK_ID_FLAG_ABSENT",
          "BLOCK_ID_FLAG_COMMIT",
          "BLOCK_ID_FLAG_NIL"
        ],
        "type": "string"
      },
      "tendermint.types.Commit": {
        "title": "tendermint.types.Commit",
        "type": "object",
        "properties": {
          "height": {
            "type": "string"
          },
          "round": {
            "type": "integer",
            "format": "int32"
          },
          "block_id": {
            "$ref": "#/components/schemas/BlockID26"
          },
          "signatures": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/tendermint.types.CommitSig"
            },
            "description": ""
          }
        },
        "description": "Commit contains the evidence that a block was committed by a set of validators."
      },
      "tendermint.types.CommitSig": {
        "title": "tendermint.types.CommitSig",
        "type": "object",
        "properties": {
          "block_id_flag": {
            "$ref": "#/components/schemas/BlockIdFlagindicateswhichBlcokIDthesignatureisfor"
          },
          "validator_address": {
            "type": "string"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "signature": {
            "type": "string"
          }
        },
        "description": "CommitSig is a part of the Vote included in a Commit."
      },
      "Datacontainsthesetoftransactionsincludedintheblock": {
        "title": "Datacontainsthesetoftransactionsincludedintheblock",
        "type": "object",
        "properties": {
          "txs": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Txs that will be applied by state @ block.Height+1.\nNOTE: not all txs here are valid.  We're just agreeing on the order first.\nThis means that block.AppHash does not include these txs."
          }
        }
      },
      "tendermint.types.DuplicateVoteEvidence": {
        "title": "tendermint.types.DuplicateVoteEvidence",
        "type": "object",
        "properties": {
          "vote_a": {
            "$ref": "#/components/schemas/tendermint.types.Vote"
          },
          "vote_b": {
            "$ref": "#/components/schemas/tendermint.types.Vote"
          },
          "total_voting_power": {
            "type": "string"
          },
          "validator_power": {
            "type": "string"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          }
        },
        "description": "DuplicateVoteEvidence contains evidence of a validator signed two conflicting votes."
      },
      "tendermint.types.Evidence": {
        "title": "tendermint.types.Evidence",
        "type": "object",
        "properties": {
          "duplicate_vote_evidence": {
            "$ref": "#/components/schemas/tendermint.types.DuplicateVoteEvidence"
          },
          "light_client_attack_evidence": {
            "$ref": "#/components/schemas/tendermint.types.LightClientAttackEvidence"
          }
        }
      },
      "tendermint.types.EvidenceList": {
        "title": "tendermint.types.EvidenceList",
        "type": "object",
        "properties": {
          "evidence": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/tendermint.types.Evidence"
            },
            "description": ""
          }
        }
      },
      "tendermint.types.Header": {
        "title": "tendermint.types.Header",
        "type": "object",
        "properties": {
          "version": {
            "$ref": "#/components/schemas/tendermint.version.Consensus"
          },
          "chain_id": {
            "type": "string"
          },
          "height": {
            "type": "string"
          },
          "time": {
            "type": "string",
            "format": "date-time"
          },
          "last_block_id": {
            "$ref": "#/components/schemas/BlockID26"
          },
          "last_commit_hash": {
            "type": "string"
          },
          "data_hash": {
            "type": "string"
          },
          "validators_hash": {
            "type": "string"
          },
          "next_validators_hash": {
            "type": "string"
          },
          "consensus_hash": {
            "type": "string"
          },
          "app_hash": {
            "type": "string"
          },
          "last_results_hash": {
            "type": "string"
          },
          "evidence_hash": {
            "type": "string"
          },
          "proposer_address": {
            "type": "string"
          }
        },
        "description": "Header defines the structure of a Tendermint block header."
      },
      "tendermint.types.LightBlock": {
        "title": "tendermint.types.LightBlock",
        "type": "object",
        "properties": {
          "signed_header": {
            "$ref": "#/components/schemas/tendermint.types.SignedHeader"
          },
          "validator_set": {
            "$ref": "#/components/schemas/tendermint.types.ValidatorSet"
          }
        }
      },
      "tendermint.types.LightClientAttackEvidence": {
        "title": "tendermint.types.LightClientAttackEvidence",
        "type": "object",
        "properties": {
          "conflicting_block": {
            "$ref": "#/components/schemas/tendermint.types.LightBlock"
          },
          "common_height": {
            "type": "string"
          },
          "byzantine_validators": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/tendermint.types.Validator"
            },
            "description": ""
          },
          "total_voting_power": {
            "type": "string"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          }
        },
        "description": "LightClientAttackEvidence contains evidence of a set of validators attempting to mislead a light client."
      },
      "PartsetHeader": {
        "title": "PartsetHeader",
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "format": "int64"
          },
          "hash": {
            "type": "string"
          }
        }
      },
      "tendermint.types.SignedHeader": {
        "title": "tendermint.types.SignedHeader",
        "type": "object",
        "properties": {
          "header": {
            "$ref": "#/components/schemas/tendermint.types.Header"
          },
          "commit": {
            "$ref": "#/components/schemas/tendermint.types.Commit"
          }
        }
      },
      "tendermint.types.SignedMsgType": {
        "title": "tendermint.types.SignedMsgType",
        "enum": [
          "SIGNED_MSG_TYPE_UNKNOWN",
          "SIGNED_MSG_TYPE_PREVOTE",
          "SIGNED_MSG_TYPE_PRECOMMIT",
          "SIGNED_MSG_TYPE_PROPOSAL"
        ],
        "type": "string",
        "description": "SignedMsgType is a type of signed message in the consensus.\n\n - SIGNED_MSG_TYPE_PREVOTE: Votes\n - SIGNED_MSG_TYPE_PROPOSAL: Proposals"
      },
      "tendermint.types.Validator": {
        "title": "tendermint.types.Validator",
        "type": "object",
        "properties": {
          "address": {
            "type": "string"
          },
          "pub_key": {
            "$ref": "#/components/schemas/PublicKeydefinesthekeysavailableforusewithTendermintValidators"
          },
          "voting_power": {
            "type": "string"
          },
          "proposer_priority": {
            "type": "string"
          }
        }
      },
      "tendermint.types.ValidatorSet": {
        "title": "tendermint.types.ValidatorSet",
        "type": "object",
        "properties": {
          "validators": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/tendermint.types.Validator"
            },
            "description": ""
          },
          "proposer": {
            "$ref": "#/components/schemas/tendermint.types.Validator"
          },
          "total_voting_power": {
            "type": "string"
          }
        }
      },
      "tendermint.types.Vote": {
        "title": "tendermint.types.Vote",
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/tendermint.types.SignedMsgType"
          },
          "height": {
            "type": "string"
          },
          "round": {
            "type": "integer",
            "format": "int32"
          },
          "block_id": {
            "$ref": "#/components/schemas/BlockID26"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "validator_address": {
            "type": "string"
          },
          "validator_index": {
            "type": "integer",
            "format": "int32"
          },
          "signature": {
            "type": "string"
          }
        },
        "description": "Vote represents a prevote, precommit, or commit vote from validators for\nconsensus."
      },
      "tendermint.version.Consensus": {
        "title": "tendermint.version.Consensus",
        "type": "object",
        "properties": {
          "block": {
            "type": "string"
          },
          "app": {
            "type": "string"
          }
        },
        "description": "Consensus captures the consensus rules for processing a block in the blockchain,\nincluding all blockchain data structures and the rules of the application's\nstate transition machine."
      },
      "cosmos.base.v1beta1.DecCoin": {
        "title": "cosmos.base.v1beta1.DecCoin",
        "type": "object",
        "properties": {
          "denom": {
            "type": "string"
          },
          "amount": {
            "type": "string"
          }
        },
        "description": "DecCoin defines a token with a denomination and a decimal amount.\n\nNOTE: The amount field is an Dec which implements the custom method\nsignatures required by gogoproto."
      },
      "cosmos.distribution.v1beta1.DelegationDelegatorReward": {
        "title": "cosmos.distribution.v1beta1.DelegationDelegatorReward",
        "type": "object",
        "properties": {
          "validator_address": {
            "type": "string"
          },
          "reward": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/cosmos.base.v1beta1.DecCoin"
            },
            "description": ""
          }
        },
        "description": "DelegationDelegatorReward represents the properties\nof a delegator's delegation reward."
      },
      "cosmos.distribution.v1beta1.Params": {
        "title": "cosmos.distribution.v1beta1.Params",
        "type": "object",
        "properties": {
          "community_tax": {
            "type": "string"
          },
          "base_proposer_reward": {
            "type": "string"
          },
          "bonus_proposer_reward": {
            "type": "string"
          },
          "withdraw_addr_enabled": {
            "type": "boolean"
          }
        },
        "description": "Params defines the set of params for the distribution module."
      },
      "cosmos.distribution.v1beta1.QueryCommunityPoolResponse": {
        "title": "cosmos.distribution.v1beta1.QueryCommunityPoolResponse",
        "type": "object",
        "properties": {
          "pool": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/cosmos.base.v1beta1.DecCoin"
            },
            "description": "pool defines community pool's coins."
          }
        },
        "description": "QueryCommunityPoolResponse is the response type for the Query/CommunityPool\nRPC method."
      },
      "cosmos.distribution.v1beta1.QueryDelegationRewardsResponse": {
        "title": "cosmos.distribution.v1beta1.QueryDelegationRewardsResponse",
        "type": "object",
        "properties": {
          "rewards": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/cosmos.base.v1beta1.DecCoin"
            },
            "description": "rewards defines the rewards accrued by a delegation."
          }
        },
        "description": "QueryDelegationRewardsResponse is the response type for the\nQuery/DelegationRewards RPC method."
      },
      "cosmos.distribution.v1beta1.QueryDelegationTotalRewardsResponse": {
        "title": "cosmos.distribution.v1beta1.QueryDelegationTotalRewardsResponse",
        "type": "object",
        "properties": {
          "rewards": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/cosmos.distribution.v1beta1.DelegationDelegatorReward"
            },
            "description": "rewards defines all the rewards accrued by a delegator."
          },
          "total": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/cosmos.base.v1beta1.DecCoin"
            },
            "description": "total defines the sum of all the rewards."
          }
        },
        "description": "QueryDelegationTotalRewardsResponse is the response type for the\nQuery/DelegationTotalRewards RPC method."
      },
      "cosmos.distribution.v1beta1.QueryDelegatorValidatorsResponse": {
        "title": "cosmos.distribution.v1beta1.QueryDelegatorValidatorsResponse",
        "type": "object",
        "properties": {
          "validators": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "validators defines the validators a delegator is delegating for."
          }
        },
        "description": "QueryDelegatorValidatorsResponse is the response type for the\nQuery/DelegatorValidators RPC method."
      },
      "cosmos.distribution.v1beta1.QueryDelegatorWithdrawAddressResponse": {
        "title": "cosmos.distribution.v1beta1.QueryDelegatorWithdrawAddressResponse",
        "type": "object",
        "properties": {
          "withdraw_address": {
            "type": "string",
            "description": "withdraw_address defines the delegator address to query for."
          }
        },
        "description": "QueryDelegatorWithdrawAddressResponse is the response type for the\nQuery/DelegatorWithdrawAddress RPC method."
      },
      "cosmos.distribution.v1beta1.QueryParamsResponse": {
        "title": "cosmos.distribution.v1beta1.QueryParamsResponse",
        "type": "object",
        "properties": {
          "params": {
            "$ref": "#/components/schemas/Params2"
          }
        },
        "description": "QueryParamsResponse is the response type for the Query/Params RPC method."
      },
      "QueryValidatorCommissionResponseistheresponsetypefortheQueryValidatorCommissionRPCmethod": {
        "title": "QueryValidatorCommissionResponseistheresponsetypefortheQueryValidatorCommissionRPCmethod",
        "type": "object",
        "properties": {
          "commission": {
            "$ref": "#/components/schemas/Commission2"
          }
        }
      },
      "cosmos.distribution.v1beta1.QueryValidatorOutstandingRewardsResponse": {
        "title": "cosmos.distribution.v1beta1.QueryValidatorOutstandingRewardsResponse",
        "type": "object",
        "properties": {
          "rewards": {
            "$ref": "#/components/schemas/cosmos.distribution.v1beta1.ValidatorOutstandingRewards"
          }
        },
        "description": "QueryValidatorOutstandingRewardsResponse is the response type for the\nQuery/ValidatorOutstandingRewards RPC method."
      },
      "cosmos.distribution.v1beta1.QueryValidatorSlashesResponse": {
        "title": "cosmos.distribution.v1beta1.QueryValidatorSlashesResponse",
        "type": "object",
        "properties": {
          "slashes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/cosmos.distribution.v1beta1.ValidatorSlashEvent"
            },
            "description": "slashes defines the slashes the validator received."
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        },
        "description": "QueryValidatorSlashesResponse is the response type for the\nQuery/ValidatorSlashes RPC method."
      },
      "cosmos.distribution.v1beta1.ValidatorAccumulatedCommission": {
        "title": "cosmos.distribution.v1beta1.ValidatorAccumulatedCommission",
        "type": "object",
        "properties": {
          "commission": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/cosmos.base.v1beta1.DecCoin"
            },
            "description": ""
          }
        },
        "description": "ValidatorAccumulatedCommission represents accumulated commission\nfor a validator kept as a running counter, can be withdrawn at any time."
      },
      "cosmos.distribution.v1beta1.ValidatorOutstandingRewards": {
        "title": "cosmos.distribution.v1beta1.ValidatorOutstandingRewards",
        "type": "object",
        "properties": {
          "rewards": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/cosmos.base.v1beta1.DecCoin"
            },
            "description": ""
          }
        },
        "description": "ValidatorOutstandingRewards represents outstanding (un-withdrawn) rewards\nfor a validator inexpensive to track, allows simple sanity checks."
      },
      "cosmos.distribution.v1beta1.ValidatorSlashEvent": {
        "title": "cosmos.distribution.v1beta1.ValidatorSlashEvent",
        "type": "object",
        "properties": {
          "validator_period": {
            "type": "string"
          },
          "fraction": {
            "type": "string"
          }
        },
        "description": "ValidatorSlashEvent represents a validator slash event.\nHeight is implicit within the store key.\nThis is needed to calculate appropriate amount of staking tokens\nfor delegations which are withdrawn after a slash has occurred."
      },
      "cosmos.evidence.v1beta1.QueryAllEvidenceResponse": {
        "title": "cosmos.evidence.v1beta1.QueryAllEvidenceResponse",
        "type": "object",
        "properties": {
          "evidence": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/google.protobuf.Any"
            },
            "description": "evidence returns all evidences."
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        },
        "description": "QueryAllEvidenceResponse is the response type for the Query/AllEvidence RPC\nmethod."
      },
      "cosmos.evidence.v1beta1.QueryEvidenceResponse": {
        "title": "cosmos.evidence.v1beta1.QueryEvidenceResponse",
        "type": "object",
        "properties": {
          "evidence": {
            "$ref": "#/components/schemas/google.protobuf.Any"
          }
        },
        "description": "QueryEvidenceResponse is the response type for the Query/Evidence RPC method."
      },
      "GrantisstoredintheKVStoretorecordagrantwithfullcontext": {
        "title": "GrantisstoredintheKVStoretorecordagrantwithfullcontext",
        "type": "object",
        "properties": {
          "granter": {
            "type": "string",
            "description": "granter is the address of the user granting an allowance of their funds."
          },
          "grantee": {
            "type": "string",
            "description": "grantee is the address of the user being granted an allowance of another user's funds."
          },
          "allowance": {
            "$ref": "#/components/schemas/Allowance"
          }
        }
      },
      "cosmos.feegrant.v1beta1.QueryAllowanceResponse": {
        "title": "cosmos.feegrant.v1beta1.QueryAllowanceResponse",
        "type": "object",
        "properties": {
          "allowance": {
            "$ref": "#/components/schemas/GrantisstoredintheKVStoretorecordagrantwithfullcontext1"
          }
        },
        "description": "QueryAllowanceResponse is the response type for the Query/Allowance RPC method."
      },
      "cosmos.feegrant.v1beta1.QueryAllowancesResponse": {
        "title": "cosmos.feegrant.v1beta1.QueryAllowancesResponse",
        "type": "object",
        "properties": {
          "allowances": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GrantisstoredintheKVStoretorecordagrantwithfullcontext"
            },
            "description": "allowances are allowance's granted for grantee by granter."
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination1"
          }
        },
        "description": "QueryAllowancesResponse is the response type for the Query/Allowances RPC method."
      },
      "cosmos.gov.v1beta1.Deposit": {
        "title": "cosmos.gov.v1beta1.Deposit",
        "type": "object",
        "properties": {
          "proposal_id": {
            "type": "string"
          },
          "depositor": {
            "type": "string"
          },
          "amount": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/cosmos.base.v1beta1.Coin"
            },
            "description": ""
          }
        },
        "description": "Deposit defines an amount deposited by an account address to an active\nproposal."
      },
      "cosmos.gov.v1beta1.DepositParams": {
        "title": "cosmos.gov.v1beta1.DepositParams",
        "type": "object",
        "properties": {
          "min_deposit": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/cosmos.base.v1beta1.Coin"
            },
            "description": "Minimum deposit for a proposal to enter voting period."
          },
          "max_deposit_period": {
            "type": "string",
            "description": "Maximum period for Atom holders to deposit on a proposal. Initial value: 2\n months."
          }
        },
        "description": "DepositParams defines the params for deposits on governance proposals."
      },
      "cosmos.gov.v1beta1.Proposal": {
        "title": "cosmos.gov.v1beta1.Proposal",
        "type": "object",
        "properties": {
          "proposal_id": {
            "type": "string"
          },
          "content": {
            "$ref": "#/components/schemas/google.protobuf.Any"
          },
          "status": {
            "$ref": "#/components/schemas/cosmos.gov.v1beta1.ProposalStatus"
          },
          "final_tally_result": {
            "$ref": "#/components/schemas/cosmos.gov.v1beta1.TallyResult"
          },
          "submit_time": {
            "type": "string",
            "format": "date-time"
          },
          "deposit_end_time": {
            "type": "string",
            "format": "date-time"
          },
          "total_deposit": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/cosmos.base.v1beta1.Coin"
            },
            "description": ""
          },
          "voting_start_time": {
            "type": "string",
            "format": "date-time"
          },
          "voting_end_time": {
            "type": "string",
            "format": "date-time"
          }
        },
        "description": "Proposal defines the core field members of a governance proposal."
      },
      "cosmos.gov.v1beta1.ProposalStatus": {
        "title": "cosmos.gov.v1beta1.ProposalStatus",
        "enum": [
          "PROPOSAL_STATUS_UNSPECIFIED",
          "PROPOSAL_STATUS_DEPOSIT_PERIOD",
          "PROPOSAL_STATUS_VOTING_PERIOD",
          "PROPOSAL_STATUS_PASSED",
          "PROPOSAL_STATUS_REJECTED",
          "PROPOSAL_STATUS_FAILED"
        ],
        "type": "string",
        "description": "ProposalStatus enumerates the valid statuses of a proposal.\n\n - PROPOSAL_STATUS_UNSPECIFIED: PROPOSAL_STATUS_UNSPECIFIED defines the default propopsal status.\n - PROPOSAL_STATUS_DEPOSIT_PERIOD: PROPOSAL_STATUS_DEPOSIT_PERIOD defines a proposal status during the deposit\nperiod.\n - PROPOSAL_STATUS_VOTING_PERIOD: PROPOSAL_STATUS_VOTING_PERIOD defines a proposal status during the voting\nperiod.\n - PROPOSAL_STATUS_PASSED: PROPOSAL_STATUS_PASSED defines a proposal status of a proposal that has\npassed.\n - PROPOSAL_STATUS_REJECTED: PROPOSAL_STATUS_REJECTED defines a proposal status of a proposal that has\nbeen rejected.\n - PROPOSAL_STATUS_FAILED: PROPOSAL_STATUS_FAILED defines a proposal status of a proposal that has\nfailed."
      },
      "cosmos.gov.v1beta1.QueryDepositResponse": {
        "title": "cosmos.gov.v1beta1.QueryDepositResponse",
        "type": "object",
        "properties": {
          "deposit": {
            "$ref": "#/components/schemas/cosmos.gov.v1beta1.Deposit"
          }
        },
        "description": "QueryDepositResponse is the response type for the Query/Deposit RPC method."
      },
      "cosmos.gov.v1beta1.QueryDepositsResponse": {
        "title": "cosmos.gov.v1beta1.QueryDepositsResponse",
        "type": "object",
        "properties": {
          "deposits": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/cosmos.gov.v1beta1.Deposit"
            },
            "description": ""
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        },
        "description": "QueryDepositsResponse is the response type for the Query/Deposits RPC method."
      },
      "cosmos.gov.v1beta1.QueryParamsResponse": {
        "title": "cosmos.gov.v1beta1.QueryParamsResponse",
        "type": "object",
        "properties": {
          "voting_params": {
            "$ref": "#/components/schemas/VotingParams"
          },
          "deposit_params": {
            "$ref": "#/components/schemas/DepositParams"
          },
          "tally_params": {
            "$ref": "#/components/schemas/TallyParams"
          }
        },
        "description": "QueryParamsResponse is the response type for the Query/Params RPC method."
      },
      "cosmos.gov.v1beta1.QueryProposalResponse": {
        "title": "cosmos.gov.v1beta1.QueryProposalResponse",
        "type": "object",
        "properties": {
          "proposal": {
            "$ref": "#/components/schemas/cosmos.gov.v1beta1.Proposal"
          }
        },
        "description": "QueryProposalResponse is the response type for the Query/Proposal RPC method."
      },
      "cosmos.gov.v1beta1.QueryProposalsResponse": {
        "title": "cosmos.gov.v1beta1.QueryProposalsResponse",
        "type": "object",
        "properties": {
          "proposals": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/cosmos.gov.v1beta1.Proposal"
            },
            "description": ""
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        },
        "description": "QueryProposalsResponse is the response type for the Query/Proposals RPC\nmethod."
      },
      "cosmos.gov.v1beta1.QueryTallyResultResponse": {
        "title": "cosmos.gov.v1beta1.QueryTallyResultResponse",
        "type": "object",
        "properties": {
          "tally": {
            "$ref": "#/components/schemas/cosmos.gov.v1beta1.TallyResult"
          }
        },
        "description": "QueryTallyResultResponse is the response type for the Query/Tally RPC method."
      },
      "cosmos.gov.v1beta1.QueryVoteResponse": {
        "title": "cosmos.gov.v1beta1.QueryVoteResponse",
        "type": "object",
        "properties": {
          "vote": {
            "$ref": "#/components/schemas/cosmos.gov.v1beta1.Vote"
          }
        },
        "description": "QueryVoteResponse is the response type for the Query/Vote RPC method."
      },
      "cosmos.gov.v1beta1.QueryVotesResponse": {
        "title": "cosmos.gov.v1beta1.QueryVotesResponse",
        "type": "object",
        "properties": {
          "votes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/cosmos.gov.v1beta1.Vote"
            },
            "description": "votes defined the queried votes."
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        },
        "description": "QueryVotesResponse is the response type for the Query/Votes RPC method."
      },
      "cosmos.gov.v1beta1.TallyParams": {
        "title": "cosmos.gov.v1beta1.TallyParams",
        "type": "object",
        "properties": {
          "quorum": {
            "type": "string",
            "description": "Minimum percentage of total stake needed to vote for a result to be\n considered valid."
          },
          "threshold": {
            "type": "string",
            "description": "Minimum proportion of Yes votes for proposal to pass. Default value: 0.5."
          },
          "veto_threshold": {
            "type": "string",
            "description": "Minimum value of Veto votes to Total votes ratio for proposal to be\n vetoed. Default value: 1/3."
          }
        },
        "description": "TallyParams defines the params for tallying votes on governance proposals."
      },
      "cosmos.gov.v1beta1.TallyResult": {
        "title": "cosmos.gov.v1beta1.TallyResult",
        "type": "object",
        "properties": {
          "yes": {
            "type": "string"
          },
          "abstain": {
            "type": "string"
          },
          "no": {
            "type": "string"
          },
          "no_with_veto": {
            "type": "string"
          }
        },
        "description": "TallyResult defines a standard tally for a governance proposal."
      },
      "cosmos.gov.v1beta1.Vote": {
        "title": "cosmos.gov.v1beta1.Vote",
        "type": "object",
        "properties": {
          "proposal_id": {
            "type": "string"
          },
          "voter": {
            "type": "string"
          },
          "option": {
            "$ref": "#/components/schemas/Option2"
          },
          "options": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/cosmos.gov.v1beta1.WeightedVoteOption"
            },
            "description": ""
          }
        },
        "description": "Vote defines a vote on a governance proposal.\nA Vote consists of a proposal ID, the voter, and the vote option."
      },
      "cosmos.gov.v1beta1.VoteOption": {
        "title": "cosmos.gov.v1beta1.VoteOption",
        "enum": [
          "VOTE_OPTION_UNSPECIFIED",
          "VOTE_OPTION_YES",
          "VOTE_OPTION_ABSTAIN",
          "VOTE_OPTION_NO",
          "VOTE_OPTION_NO_WITH_VETO"
        ],
        "type": "string",
        "description": "VoteOption enumerates the valid vote options for a given governance proposal.\n\n - VOTE_OPTION_UNSPECIFIED: VOTE_OPTION_UNSPECIFIED defines a no-op vote option.\n - VOTE_OPTION_YES: VOTE_OPTION_YES defines a yes vote option.\n - VOTE_OPTION_ABSTAIN: VOTE_OPTION_ABSTAIN defines an abstain vote option.\n - VOTE_OPTION_NO: VOTE_OPTION_NO defines a no vote option.\n - VOTE_OPTION_NO_WITH_VETO: VOTE_OPTION_NO_WITH_VETO defines a no with veto vote option."
      },
      "cosmos.gov.v1beta1.VotingParams": {
        "title": "cosmos.gov.v1beta1.VotingParams",
        "type": "object",
        "properties": {
          "voting_period": {
            "type": "string",
            "description": "Length of the voting period."
          }
        },
        "description": "VotingParams defines the params for voting on governance proposals."
      },
      "cosmos.gov.v1beta1.WeightedVoteOption": {
        "title": "cosmos.gov.v1beta1.WeightedVoteOption",
        "type": "object",
        "properties": {
          "option": {
            "$ref": "#/components/schemas/cosmos.gov.v1beta1.VoteOption"
          },
          "weight": {
            "type": "string"
          }
        },
        "description": "WeightedVoteOption defines a unit of vote for vote split.\n\nSince: cosmos-sdk 0.43"
      },
      "cosmos.mint.v1beta1.Params": {
        "title": "cosmos.mint.v1beta1.Params",
        "type": "object",
        "properties": {
          "mint_denom": {
            "type": "string"
          },
          "inflation_rate_change": {
            "type": "string"
          },
          "inflation_max": {
            "type": "string"
          },
          "inflation_min": {
            "type": "string"
          },
          "goal_bonded": {
            "type": "string"
          },
          "blocks_per_year": {
            "type": "string"
          }
        },
        "description": "Params holds parameters for the mint module."
      },
      "cosmos.mint.v1beta1.QueryAnnualProvisionsResponse": {
        "title": "cosmos.mint.v1beta1.QueryAnnualProvisionsResponse",
        "type": "object",
        "properties": {
          "annual_provisions": {
            "type": "string",
            "description": "annual_provisions is the current minting annual provisions value."
          }
        },
        "description": "QueryAnnualProvisionsResponse is the response type for the\nQuery/AnnualProvisions RPC method."
      },
      "cosmos.mint.v1beta1.QueryInflationResponse": {
        "title": "cosmos.mint.v1beta1.QueryInflationResponse",
        "type": "object",
        "properties": {
          "inflation": {
            "type": "string",
            "description": "inflation is the current minting inflation value."
          }
        },
        "description": "QueryInflationResponse is the response type for the Query/Inflation RPC\nmethod."
      },
      "cosmos.mint.v1beta1.QueryParamsResponse": {
        "title": "cosmos.mint.v1beta1.QueryParamsResponse",
        "type": "object",
        "properties": {
          "params": {
            "$ref": "#/components/schemas/Params3"
          }
        },
        "description": "QueryParamsResponse is the response type for the Query/Params RPC method."
      },
      "cosmos.params.v1beta1.ParamChange": {
        "title": "cosmos.params.v1beta1.ParamChange",
        "type": "object",
        "properties": {
          "subspace": {
            "type": "string"
          },
          "key": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "description": "ParamChange defines an individual parameter change, for use in\nParameterChangeProposal."
      },
      "cosmos.params.v1beta1.QueryParamsResponse": {
        "title": "cosmos.params.v1beta1.QueryParamsResponse",
        "type": "object",
        "properties": {
          "param": {
            "$ref": "#/components/schemas/Param"
          }
        },
        "description": "QueryParamsResponse is response type for the Query/Params RPC method."
      },
      "cosmos.slashing.v1beta1.Params": {
        "title": "cosmos.slashing.v1beta1.Params",
        "type": "object",
        "properties": {
          "signed_blocks_window": {
            "type": "string"
          },
          "min_signed_per_window": {
            "type": "string"
          },
          "downtime_jail_duration": {
            "type": "string"
          },
          "slash_fraction_double_sign": {
            "type": "string"
          },
          "slash_fraction_downtime": {
            "type": "string"
          }
        },
        "description": "Params represents the parameters used for by the slashing module."
      },
      "QueryParamsResponseistheresponsetypefortheQueryParamsRPCmethod": {
        "title": "QueryParamsResponseistheresponsetypefortheQueryParamsRPCmethod",
        "type": "object",
        "properties": {
          "params": {
            "$ref": "#/components/schemas/cosmos.slashing.v1beta1.Params"
          }
        }
      },
      "QuerySigningInfoResponseistheresponsetypefortheQuerySigningInfoRPCmethod": {
        "title": "QuerySigningInfoResponseistheresponsetypefortheQuerySigningInfoRPCmethod",
        "type": "object",
        "properties": {
          "val_signing_info": {
            "$ref": "#/components/schemas/cosmos.slashing.v1beta1.ValidatorSigningInfo"
          }
        }
      },
      "QuerySigningInfosResponseistheresponsetypefortheQuerySigningInfosRPCmethod": {
        "title": "QuerySigningInfosResponseistheresponsetypefortheQuerySigningInfosRPCmethod",
        "type": "object",
        "properties": {
          "info": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/cosmos.slashing.v1beta1.ValidatorSigningInfo"
            },
            "description": ""
          },
          "pagination": {
            "$ref": "#/components/schemas/cosmos.base.query.v1beta1.PageResponse"
          }
        }
      },
      "cosmos.slashing.v1beta1.ValidatorSigningInfo": {
        "title": "cosmos.slashing.v1beta1.ValidatorSigningInfo",
        "type": "object",
        "properties": {
          "address": {
            "type": "string"
          },
          "start_height": {
            "type": "string"
          },
          "index_offset": {
            "type": "string",
            "description": "Index which is incremented each time the validator was a bonded\nin a block and may have signed a precommit or not. This in conjunction with the\n`SignedBlocksWindow` param determines the index in the `MissedBlocksBitArray`."
          },
          "jailed_until": {
            "type": "string",
            "description": "Timestamp until which the validator is jailed due to liveness downtime.",
            "format": "date-time"
          },
          "tombstoned": {
            "type": "boolean",
            "description": "Whether or not a validator has been tombstoned (killed out of validator set). It is set\nonce the validator commits an equivocation or for any other configured misbehiavor."
          },
          "missed_blocks_counter": {
            "type": "string",
            "description": "A counter kept to avoid unnecessary array reads.\nNote that `Sum(MissedBlocksBitArray)` always equals `MissedBlocksCounter`."
          }
        },
        "description": "ValidatorSigningInfo defines a validator's signing info for monitoring their\nliveness activity."
      },
      "cosmos.staking.v1beta1.BondStatus": {
        "title": "cosmos.staking.v1beta1.BondStatus",
        "enum": [
          "BOND_STATUS_UNSPECIFIED",
          "BOND_STATUS_UNBONDED",
          "BOND_STATUS_UNBONDING",
          "BOND_STATUS_BONDED"
        ],
        "type": "string",
        "description": "BondStatus is the status of a validator.\n\n - BOND_STATUS_UNSPECIFIED: UNSPECIFIED defines an invalid validator status.\n - BOND_STATUS_UNBONDED: UNBONDED defines a validator that is not bonded.\n - BOND_STATUS_UNBONDING: UNBONDING defines a validator that is unbonding.\n - BOND_STATUS_BONDED: BONDED defines a validator that is bonded."
      },
      "cosmos.staking.v1beta1.Commission": {
        "title": "cosmos.staking.v1beta1.Commission",
        "type": "object",
        "properties": {
          "commission_rates": {
            "$ref": "#/components/schemas/CommissionRates"
          },
          "update_time": {
            "type": "string",
            "description": "update_time is the last time the commission rate was changed.",
            "format": "date-time"
          }
        },
        "description": "Commission defines commission parameters for a given validator."
      },
      "cosmos.staking.v1beta1.CommissionRates": {
        "title": "cosmos.staking.v1beta1.CommissionRates",
        "type": "object",
        "properties": {
          "rate": {
            "type": "string",
            "description": "rate is the commission rate charged to delegators, as a fraction."
          },
          "max_rate": {
            "type": "string",
            "description": "max_rate defines the maximum commission rate which validator can ever charge, as a fraction."
          },
          "max_change_rate": {
            "type": "string",
            "description": "max_change_rate defines the maximum daily increase of the validator commission, as a fraction."
          }
        },
        "description": "CommissionRates defines the initial commission rates to be used for creating\na validator."
      },
      "cosmos.staking.v1beta1.Delegation": {
        "title": "cosmos.staking.v1beta1.Delegation",
        "type": "object",
        "properties": {
          "delegator_address": {
            "type": "string",
            "description": "delegator_address is the bech32-encoded address of the delegator."
          },
          "validator_address": {
            "type": "string",
            "description": "validator_address is the bech32-encoded address of the validator."
          },
          "shares": {
            "type": "string",
            "description": "shares define the delegation shares received."
          }
        },
        "description": "Delegation represents the bond with tokens held by an account. It is\nowned by one delegator, and is associated with the voting power of one\nvalidator."
      },
      "cosmos.staking.v1beta1.DelegationResponse": {
        "title": "cosmos.staking.v1beta1.DelegationResponse",
        "type": "object",
        "properties": {
          "delegation": {
            "$ref": "#/components/schemas/cosmos.staking.v1beta1.Delegation"
          },
          "balance": {
            "$ref": "#/components/schemas/cosmos.base.v1beta1.Coin"
          }
        },
        "description": "DelegationResponse is equivalent to Delegation except that it contains a\nbalance in addition to shares which is more suitable for client responses."
      },
      "cosmos.staking.v1beta1.Description": {
        "title": "cosmos.staking.v1beta1.Description",
        "type": "object",
        "properties": {
          "moniker": {
            "type": "string",
            "description": "moniker defines a human-readable name for the validator."
          },
          "identity": {
            "type": "string",
            "description": "identity defines an optional identity signature (ex. UPort or Keybase)."
          },
          "website": {
            "type": "string",
            "description": "website defines an optional website link."
          },
          "security_contact": {
            "type": "string",
            "description": "security_contact defines an optional email for security contact."
          },
          "details": {
            "type": "string",
            "description": "details define other optional details."
          }
        },
        "description": "Description defines a validator description."
      },
      "cosmos.staking.v1beta1.HistoricalInfo": {
        "title": "cosmos.staking.v1beta1.HistoricalInfo",
        "type": "object",
        "properties": {
          "header": {
            "$ref": "#/components/schemas/tendermint.types.Header"
          },
          "valset": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/cosmos.staking.v1beta1.Validator"
            },
            "description": ""
          }
        },
        "description": "HistoricalInfo contains header and validator information for a given block.\nIt is stored as part of staking module's state, which persists the `n` most\nrecent HistoricalInfo\n(`n` is set by the staking module's `historical_entries` parameter)."
      },
      "cosmos.staking.v1beta1.Params": {
        "title": "cosmos.staking.v1beta1.Params",
        "type": "object",
        "properties": {
          "unbonding_time": {
            "type": "string",
            "description": "unbonding_time is the time duration of unbonding."
          },
          "max_validators": {
            "type": "integer",
            "description": "max_validators is the maximum number of validators.",
            "format": "int64"
          },
          "max_entries": {
            "type": "integer",
            "description": "max_entries is the max entries for either unbonding delegation or redelegation (per pair/trio).",
            "format": "int64"
          },
          "historical_entries": {
            "type": "integer",
            "description": "historical_entries is the number of historical entries to persist.",
            "format": "int64"
          },
          "bond_denom": {
            "type": "string",
            "description": "bond_denom defines the bondable coin denomination."
          }
        },
        "description": "Params defines the parameters for the staking module."
      },
      "cosmos.staking.v1beta1.Pool": {
        "title": "cosmos.staking.v1beta1.Pool",
        "type": "object",
        "properties": {
          "not_bonded_tokens": {
            "type": "string"
          },
          "bonded_tokens": {
            "type": "string"
          }
        },
        "description": "Pool is used for tracking bonded and not-bonded token supply of the bond\ndenomination."
      },
      "cosmos.staking.v1beta1.QueryDelegationResponse": {
        "title": "cosmos.staking.v1beta1.QueryDelegationResponse",
        "type": "object",
        "properties": {
          "delegation_response": {
            "$ref": "#/components/schemas/cosmos.staking.v1beta1.DelegationResponse"
          }
        },
        "description": "QueryDelegationResponse is response type for the Query/Delegation RPC method."
      },
      "cosmos.staking.v1beta1.QueryDelegatorDelegationsResponse": {
        "title": "cosmos.staking.v1beta1.QueryDelegatorDelegationsResponse",
        "type": "object",
        "properties": {
          "delegation_responses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/cosmos.staking.v1beta1.DelegationResponse"
            },
            "description": "delegation_responses defines all the delegations' info of a delegator."
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        },
        "description": "QueryDelegatorDelegationsResponse is response type for the\nQuery/DelegatorDelegations RPC method."
      },
      "cosmos.staking.v1beta1.QueryDelegatorUnbondingDelegationsResponse": {
        "title": "cosmos.staking.v1beta1.QueryDelegatorUnbondingDelegationsResponse",
        "type": "object",
        "properties": {
          "unbonding_responses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/cosmos.staking.v1beta1.UnbondingDelegation"
            },
            "description": ""
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        },
        "description": "QueryUnbondingDelegatorDelegationsResponse is response type for the\nQuery/UnbondingDelegatorDelegations RPC method."
      },
      "cosmos.staking.v1beta1.QueryDelegatorValidatorResponse": {
        "title": "cosmos.staking.v1beta1.QueryDelegatorValidatorResponse",
        "type": "object",
        "properties": {
          "validator": {
            "$ref": "#/components/schemas/cosmos.staking.v1beta1.Validator"
          }
        },
        "description": "QueryDelegatorValidatorResponse response type for the\nQuery/DelegatorValidator RPC method."
      },
      "cosmos.staking.v1beta1.QueryDelegatorValidatorsResponse": {
        "title": "cosmos.staking.v1beta1.QueryDelegatorValidatorsResponse",
        "type": "object",
        "properties": {
          "validators": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/cosmos.staking.v1beta1.Validator"
            },
            "description": "validators defines the the validators' info of a delegator."
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        },
        "description": "QueryDelegatorValidatorsResponse is response type for the\nQuery/DelegatorValidators RPC method."
      },
      "cosmos.staking.v1beta1.QueryHistoricalInfoResponse": {
        "title": "cosmos.staking.v1beta1.QueryHistoricalInfoResponse",
        "type": "object",
        "properties": {
          "hist": {
            "$ref": "#/components/schemas/Hist"
          }
        },
        "description": "QueryHistoricalInfoResponse is response type for the Query/HistoricalInfo RPC\nmethod."
      },
      "cosmos.staking.v1beta1.QueryParamsResponse": {
        "title": "cosmos.staking.v1beta1.QueryParamsResponse",
        "type": "object",
        "properties": {
          "params": {
            "$ref": "#/components/schemas/Params5"
          }
        },
        "description": "QueryParamsResponse is response type for the Query/Params RPC method."
      },
      "cosmos.staking.v1beta1.QueryPoolResponse": {
        "title": "cosmos.staking.v1beta1.QueryPoolResponse",
        "type": "object",
        "properties": {
          "pool": {
            "$ref": "#/components/schemas/Pool1"
          }
        },
        "description": "QueryPoolResponse is response type for the Query/Pool RPC method."
      },
      "cosmos.staking.v1beta1.QueryRedelegationsResponse": {
        "title": "cosmos.staking.v1beta1.QueryRedelegationsResponse",
        "type": "object",
        "properties": {
          "redelegation_responses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/cosmos.staking.v1beta1.RedelegationResponse"
            },
            "description": ""
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        },
        "description": "QueryRedelegationsResponse is response type for the Query/Redelegations RPC\nmethod."
      },
      "cosmos.staking.v1beta1.QueryUnbondingDelegationResponse": {
        "title": "cosmos.staking.v1beta1.QueryUnbondingDelegationResponse",
        "type": "object",
        "properties": {
          "unbond": {
            "$ref": "#/components/schemas/cosmos.staking.v1beta1.UnbondingDelegation"
          }
        },
        "description": "QueryDelegationResponse is response type for the Query/UnbondingDelegation\nRPC method."
      },
      "QueryValidatorDelegationsResponseisresponsetypefortheQueryValidatorDelegationsRPCmethod": {
        "title": "QueryValidatorDelegationsResponseisresponsetypefortheQueryValidatorDelegationsRPCmethod",
        "type": "object",
        "properties": {
          "delegation_responses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/cosmos.staking.v1beta1.DelegationResponse"
            },
            "description": ""
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        }
      },
      "QueryValidatorResponseisresponsetypefortheQueryValidatorRPCmethod": {
        "title": "QueryValidatorResponseisresponsetypefortheQueryValidatorRPCmethod",
        "type": "object",
        "properties": {
          "validator": {
            "$ref": "#/components/schemas/cosmos.staking.v1beta1.Validator"
          }
        }
      },
      "cosmos.staking.v1beta1.QueryValidatorUnbondingDelegationsResponse": {
        "title": "cosmos.staking.v1beta1.QueryValidatorUnbondingDelegationsResponse",
        "type": "object",
        "properties": {
          "unbonding_responses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/cosmos.staking.v1beta1.UnbondingDelegation"
            },
            "description": ""
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        },
        "description": "QueryValidatorUnbondingDelegationsResponse is response type for the\nQuery/ValidatorUnbondingDelegations RPC method."
      },
      "QueryValidatorsResponseisresponsetypefortheQueryValidatorsRPCmethod": {
        "title": "QueryValidatorsResponseisresponsetypefortheQueryValidatorsRPCmethod",
        "type": "object",
        "properties": {
          "validators": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/cosmos.staking.v1beta1.Validator"
            },
            "description": "validators contains all the queried validators."
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        }
      },
      "cosmos.staking.v1beta1.Redelegation": {
        "title": "cosmos.staking.v1beta1.Redelegation",
        "type": "object",
        "properties": {
          "delegator_address": {
            "type": "string",
            "description": "delegator_address is the bech32-encoded address of the delegator."
          },
          "validator_src_address": {
            "type": "string",
            "description": "validator_src_address is the validator redelegation source operator address."
          },
          "validator_dst_address": {
            "type": "string",
            "description": "validator_dst_address is the validator redelegation destination operator address."
          },
          "entries": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/cosmos.staking.v1beta1.RedelegationEntry"
            },
            "description": "entries are the redelegation entries."
          }
        },
        "description": "Redelegation contains the list of a particular delegator's redelegating bonds\nfrom a particular source validator to a particular destination validator."
      },
      "cosmos.staking.v1beta1.RedelegationEntry": {
        "title": "cosmos.staking.v1beta1.RedelegationEntry",
        "type": "object",
        "properties": {
          "creation_height": {
            "type": "string",
            "description": "creation_height  defines the height which the redelegation took place."
          },
          "completion_time": {
            "type": "string",
            "description": "completion_time defines the unix time for redelegation completion.",
            "format": "date-time"
          },
          "initial_balance": {
            "type": "string",
            "description": "initial_balance defines the initial balance when redelegation started."
          },
          "shares_dst": {
            "type": "string",
            "description": "shares_dst is the amount of destination-validator shares created by redelegation."
          }
        },
        "description": "RedelegationEntry defines a redelegation object with relevant metadata."
      },
      "cosmos.staking.v1beta1.RedelegationEntryResponse": {
        "title": "cosmos.staking.v1beta1.RedelegationEntryResponse",
        "type": "object",
        "properties": {
          "redelegation_entry": {
            "$ref": "#/components/schemas/cosmos.staking.v1beta1.RedelegationEntry"
          },
          "balance": {
            "type": "string"
          }
        },
        "description": "RedelegationEntryResponse is equivalent to a RedelegationEntry except that it\ncontains a balance in addition to shares which is more suitable for client\nresponses."
      },
      "cosmos.staking.v1beta1.RedelegationResponse": {
        "title": "cosmos.staking.v1beta1.RedelegationResponse",
        "type": "object",
        "properties": {
          "redelegation": {
            "$ref": "#/components/schemas/cosmos.staking.v1beta1.Redelegation"
          },
          "entries": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/cosmos.staking.v1beta1.RedelegationEntryResponse"
            },
            "description": ""
          }
        },
        "description": "RedelegationResponse is equivalent to a Redelegation except that its entries\ncontain a balance in addition to shares which is more suitable for client\nresponses."
      },
      "cosmos.staking.v1beta1.UnbondingDelegation": {
        "title": "cosmos.staking.v1beta1.UnbondingDelegation",
        "type": "object",
        "properties": {
          "delegator_address": {
            "type": "string",
            "description": "delegator_address is the bech32-encoded address of the delegator."
          },
          "validator_address": {
            "type": "string",
            "description": "validator_address is the bech32-encoded address of the validator."
          },
          "entries": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/cosmos.staking.v1beta1.UnbondingDelegationEntry"
            },
            "description": "entries are the unbonding delegation entries."
          }
        },
        "description": "UnbondingDelegation stores all of a single delegator's unbonding bonds\nfor a single validator in an time-ordered list."
      },
      "cosmos.staking.v1beta1.UnbondingDelegationEntry": {
        "title": "cosmos.staking.v1beta1.UnbondingDelegationEntry",
        "type": "object",
        "properties": {
          "creation_height": {
            "type": "string",
            "description": "creation_height is the height which the unbonding took place."
          },
          "completion_time": {
            "type": "string",
            "description": "completion_time is the unix time for unbonding completion.",
            "format": "date-time"
          },
          "initial_balance": {
            "type": "string",
            "description": "initial_balance defines the tokens initially scheduled to receive at completion."
          },
          "balance": {
            "type": "string",
            "description": "balance defines the tokens to receive at completion."
          }
        },
        "description": "UnbondingDelegationEntry defines an unbonding object with relevant metadata."
      },
      "cosmos.staking.v1beta1.Validator": {
        "title": "cosmos.staking.v1beta1.Validator",
        "type": "object",
        "properties": {
          "operator_address": {
            "type": "string",
            "description": "operator_address defines the address of the validator's operator; bech encoded in JSON."
          },
          "consensus_pubkey": {
            "$ref": "#/components/schemas/google.protobuf.Any"
          },
          "jailed": {
            "type": "boolean",
            "description": "jailed defined whether the validator has been jailed from bonded status or not."
          },
          "status": {
            "$ref": "#/components/schemas/Status3"
          },
          "tokens": {
            "type": "string",
            "description": "tokens define the delegated tokens (incl. self-delegation)."
          },
          "delegator_shares": {
            "type": "string",
            "description": "delegator_shares defines total shares issued to a validator's delegators."
          },
          "description": {
            "$ref": "#/components/schemas/Description1"
          },
          "unbonding_height": {
            "type": "string",
            "description": "unbonding_height defines, if unbonding, the height at which this validator has begun unbonding."
          },
          "unbonding_time": {
            "type": "string",
            "description": "unbonding_time defines, if unbonding, the min time for the validator to complete unbonding.",
            "format": "date-time"
          },
          "commission": {
            "$ref": "#/components/schemas/Commission5"
          },
          "min_self_delegation": {
            "type": "string",
            "description": "min_self_delegation is the validator's self declared minimum self delegation."
          }
        },
        "description": "Validator defines a validator, together with the total amount of the\nValidator's bond shares and their exchange rate to coins. Slashing results in\na decrease in the exchange rate, allowing correct calculation of future\nundelegations without iterating over delegators. When coins are delegated to\nthis validator, the validator is credited with a delegation whose number of\nbond shares is based on the amount of coins delegated divided by the current\nexchange rate. Voting power can be calculated as total bonded shares\nmultiplied by exchange rate."
      },
      "cosmos.base.abci.v1beta1.ABCIMessageLog": {
        "title": "cosmos.base.abci.v1beta1.ABCIMessageLog",
        "type": "object",
        "properties": {
          "msg_index": {
            "type": "integer",
            "format": "int64"
          },
          "log": {
            "type": "string"
          },
          "events": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/cosmos.base.abci.v1beta1.StringEvent"
            },
            "description": "Events contains a slice of Event objects that were emitted during some\nexecution."
          }
        },
        "description": "ABCIMessageLog defines a structure containing an indexed tx ABCI message log."
      },
      "cosmos.base.abci.v1beta1.Attribute": {
        "title": "cosmos.base.abci.v1beta1.Attribute",
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "description": "Attribute defines an attribute wrapper where the key and value are\nstrings instead of raw bytes."
      },
      "cosmos.base.abci.v1beta1.GasInfo": {
        "title": "cosmos.base.abci.v1beta1.GasInfo",
        "type": "object",
        "properties": {
          "gas_wanted": {
            "type": "string",
            "description": "GasWanted is the maximum units of work we allow this tx to perform."
          },
          "gas_used": {
            "type": "string",
            "description": "GasUsed is the amount of gas actually consumed."
          }
        },
        "description": "GasInfo defines tx execution gas context."
      },
      "cosmos.base.abci.v1beta1.Result": {
        "title": "cosmos.base.abci.v1beta1.Result",
        "type": "object",
        "properties": {
          "data": {
            "type": "string",
            "description": "Data is any data returned from message or handler execution. It MUST be\nlength prefixed in order to separate data from multiple message executions."
          },
          "log": {
            "type": "string",
            "description": "Log contains the log information from message or handler execution."
          },
          "events": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/tendermint.abci.Event"
            },
            "description": "Events contains a slice of Event objects that were emitted during message\nor handler execution."
          }
        },
        "description": "Result is the union of ResponseFormat and ResponseCheckTx."
      },
      "cosmos.base.abci.v1beta1.StringEvent": {
        "title": "cosmos.base.abci.v1beta1.StringEvent",
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "attributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/cosmos.base.abci.v1beta1.Attribute"
            },
            "description": ""
          }
        },
        "description": "StringEvent defines en Event object wrapper where all the attributes\ncontain key/value pairs that are strings instead of raw bytes."
      },
      "cosmos.base.abci.v1beta1.TxResponse": {
        "title": "cosmos.base.abci.v1beta1.TxResponse",
        "type": "object",
        "properties": {
          "height": {
            "type": "string"
          },
          "txhash": {
            "type": "string",
            "description": "The transaction hash."
          },
          "codespace": {
            "type": "string"
          },
          "code": {
            "type": "integer",
            "description": "Response code.",
            "format": "int64"
          },
          "data": {
            "type": "string",
            "description": "Result bytes, if any."
          },
          "raw_log": {
            "type": "string",
            "description": "The output of the application's logger (raw string). May be\nnon-deterministic."
          },
          "logs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/cosmos.base.abci.v1beta1.ABCIMessageLog"
            },
            "description": "The output of the application's logger (typed). May be non-deterministic."
          },
          "info": {
            "type": "string",
            "description": "Additional information. May be non-deterministic."
          },
          "gas_wanted": {
            "type": "string",
            "description": "Amount of gas requested for transaction."
          },
          "gas_used": {
            "type": "string",
            "description": "Amount of gas consumed by transaction."
          },
          "tx": {
            "$ref": "#/components/schemas/google.protobuf.Any"
          },
          "timestamp": {
            "type": "string",
            "description": "Time of the previous block. For heights > 1, it's the weighted median of\nthe timestamps of the valid votes in the block.LastCommit. For height == 1,\nit's genesis time."
          },
          "events": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/tendermint.abci.Event"
            },
            "description": "Events defines all the events emitted by processing a transaction. Note,\nthese events include those emitted by processing all the messages and those\nemitted from the ante handler. Whereas Logs contains the events, with\nadditional metadata, emitted only by processing the messages.\n\nSince: cosmos-sdk 0.42.11, 0.44.5, 0.45"
          }
        },
        "description": "TxResponse defines a structure containing relevant tx data and metadata. The\ntags are stringified and the log is JSON decoded."
      },
      "cosmos.crypto.multisig.v1beta1.CompactBitArray": {
        "title": "cosmos.crypto.multisig.v1beta1.CompactBitArray",
        "type": "object",
        "properties": {
          "extra_bits_stored": {
            "type": "integer",
            "format": "int64"
          },
          "elems": {
            "type": "string"
          }
        },
        "description": "CompactBitArray is an implementation of a space efficient bit array.\nThis is used to ensure that the encoded data takes up a minimal amount of\nspace after proto encoding.\nThis is not thread safe, and is not intended for concurrent usage."
      },
      "cosmos.tx.signing.v1beta1.SignMode": {
        "title": "cosmos.tx.signing.v1beta1.SignMode",
        "enum": [
          "SIGN_MODE_UNSPECIFIED",
          "SIGN_MODE_DIRECT",
          "SIGN_MODE_TEXTUAL",
          "SIGN_MODE_LEGACY_AMINO_JSON"
        ],
        "type": "string",
        "description": "SignMode represents a signing mode with its own security guarantees.\n\n - SIGN_MODE_UNSPECIFIED: SIGN_MODE_UNSPECIFIED specifies an unknown signing mode and will be\nrejected\n - SIGN_MODE_DIRECT: SIGN_MODE_DIRECT specifies a signing mode which uses SignDoc and is\nverified with raw bytes from Tx\n - SIGN_MODE_TEXTUAL: SIGN_MODE_TEXTUAL is a future signing mode that will verify some\nhuman-readable textual representation on top of the binary representation\nfrom SIGN_MODE_DIRECT\n - SIGN_MODE_LEGACY_AMINO_JSON: SIGN_MODE_LEGACY_AMINO_JSON is a backwards compatibility mode which uses\nAmino JSON and will be removed in the future"
      },
      "cosmos.tx.v1beta1.AuthInfo": {
        "title": "cosmos.tx.v1beta1.AuthInfo",
        "type": "object",
        "properties": {
          "signer_infos": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/cosmos.tx.v1beta1.SignerInfo"
            },
            "description": "signer_infos defines the signing modes for the required signers. The number\nand order of elements must match the required signers from TxBody's\nmessages. The first element is the primary signer and the one which pays\nthe fee."
          },
          "fee": {
            "$ref": "#/components/schemas/Fee21"
          }
        },
        "description": "AuthInfo describes the fee and signer modes that are used to sign a\ntransaction."
      },
      "cosmos.tx.v1beta1.BroadcastMode": {
        "title": "cosmos.tx.v1beta1.BroadcastMode",
        "enum": [
          "BROADCAST_MODE_UNSPECIFIED",
          "BROADCAST_MODE_BLOCK",
          "BROADCAST_MODE_SYNC",
          "BROADCAST_MODE_ASYNC"
        ],
        "type": "string",
        "description": "BroadcastMode specifies the broadcast mode for the TxService.Broadcast RPC method.\n\n - BROADCAST_MODE_UNSPECIFIED: zero-value for mode ordering\n - BROADCAST_MODE_BLOCK: BROADCAST_MODE_BLOCK defines a tx broadcasting mode where the client waits for\nthe tx to be committed in a block.\n - BROADCAST_MODE_SYNC: BROADCAST_MODE_SYNC defines a tx broadcasting mode where the client waits for\na CheckTx execution response only.\n - BROADCAST_MODE_ASYNC: BROADCAST_MODE_ASYNC defines a tx broadcasting mode where the client returns\nimmediately."
      },
      "cosmos.tx.v1beta1.BroadcastTxRequest": {
        "title": "cosmos.tx.v1beta1.BroadcastTxRequest",
        "type": "object",
        "properties": {
          "tx_bytes": {
            "type": "string",
            "description": "tx_bytes is the raw transaction."
          },
          "mode": {
            "$ref": "#/components/schemas/cosmos.tx.v1beta1.BroadcastMode"
          }
        },
        "description": "BroadcastTxRequest is the request type for the Service.BroadcastTxRequest\nRPC method."
      },
      "cosmos.tx.v1beta1.BroadcastTxResponse": {
        "title": "cosmos.tx.v1beta1.BroadcastTxResponse",
        "type": "object",
        "properties": {
          "tx_response": {
            "$ref": "#/components/schemas/cosmos.base.abci.v1beta1.TxResponse"
          }
        },
        "description": "BroadcastTxResponse is the response type for the\nService.BroadcastTx method."
      },
      "cosmos.tx.v1beta1.Fee": {
        "title": "cosmos.tx.v1beta1.Fee",
        "type": "object",
        "properties": {
          "amount": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/cosmos.base.v1beta1.Coin"
            },
            "description": ""
          },
          "gas_limit": {
            "type": "string"
          },
          "payer": {
            "type": "string",
            "description": "if unset, the first signer is responsible for paying the fees. If set, the specified account must pay the fees.\nthe payer must be a tx signer (and thus have signed this field in AuthInfo).\nsetting this field does *not* change the ordering of required signers for the transaction."
          },
          "granter": {
            "type": "string"
          }
        },
        "description": "Fee includes the amount of coins paid in fees and the maximum\ngas to be used by the transaction. The ratio yields an effective \"gasprice\",\nwhich must be above some miminum to be accepted into the mempool."
      },
      "cosmos.tx.v1beta1.GetTxResponse": {
        "title": "cosmos.tx.v1beta1.GetTxResponse",
        "type": "object",
        "properties": {
          "tx": {
            "$ref": "#/components/schemas/cosmos.tx.v1beta1.Tx"
          },
          "tx_response": {
            "$ref": "#/components/schemas/cosmos.base.abci.v1beta1.TxResponse"
          }
        },
        "description": "GetTxResponse is the response type for the Service.GetTx method."
      },
      "cosmos.tx.v1beta1.GetTxsEventResponse": {
        "title": "cosmos.tx.v1beta1.GetTxsEventResponse",
        "type": "object",
        "properties": {
          "txs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/cosmos.tx.v1beta1.Tx"
            },
            "description": "txs is the list of queried transactions."
          },
          "tx_responses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/cosmos.base.abci.v1beta1.TxResponse"
            },
            "description": "tx_responses is the list of queried TxResponses."
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination1"
          }
        },
        "description": "GetTxsEventResponse is the response type for the Service.TxsByEvents\nRPC method."
      },
      "cosmos.tx.v1beta1.ModeInfo": {
        "title": "cosmos.tx.v1beta1.ModeInfo",
        "type": "object",
        "properties": {
          "single": {
            "$ref": "#/components/schemas/Singleisthemodeinfoforasinglesigner.ItisstructuredasamessagetoallowforadditionalfieldssuchaslocaleforSIGN_MODE_TEXTUALinthefuture"
          },
          "multi": {
            "$ref": "#/components/schemas/Multiisthemodeinfoforamultisigpublickey"
          }
        },
        "description": "ModeInfo describes the signing mode of a single or nested multisig signer."
      },
      "Multiisthemodeinfoforamultisigpublickey": {
        "title": "Multiisthemodeinfoforamultisigpublickey",
        "type": "object",
        "properties": {
          "bitarray": {
            "$ref": "#/components/schemas/cosmos.crypto.multisig.v1beta1.CompactBitArray"
          },
          "mode_infos": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/cosmos.tx.v1beta1.ModeInfo"
            },
            "description": ""
          }
        }
      },
      "Singleisthemodeinfoforasinglesigner.ItisstructuredasamessagetoallowforadditionalfieldssuchaslocaleforSIGN_MODE_TEXTUALinthefuture": {
        "title": "Singleisthemodeinfoforasinglesigner.ItisstructuredasamessagetoallowforadditionalfieldssuchaslocaleforSIGN_MODE_TEXTUALinthefuture",
        "type": "object",
        "properties": {
          "mode": {
            "$ref": "#/components/schemas/cosmos.tx.signing.v1beta1.SignMode"
          }
        }
      },
      "OrderBydefinesthesortingorder": {
        "title": "OrderBydefinesthesortingorder",
        "enum": [
          "ORDER_BY_UNSPECIFIED",
          "ORDER_BY_ASC",
          "ORDER_BY_DESC"
        ],
        "type": "string",
        "description": "- ORDER_BY_UNSPECIFIED: ORDER_BY_UNSPECIFIED specifies an unknown sorting order. OrderBy defaults to ASC in this case.\n - ORDER_BY_ASC: ORDER_BY_ASC defines ascending order\n - ORDER_BY_DESC: ORDER_BY_DESC defines descending order"
      },
      "cosmos.tx.v1beta1.SignerInfo": {
        "title": "cosmos.tx.v1beta1.SignerInfo",
        "type": "object",
        "properties": {
          "public_key": {
            "$ref": "#/components/schemas/google.protobuf.Any"
          },
          "mode_info": {
            "$ref": "#/components/schemas/cosmos.tx.v1beta1.ModeInfo"
          },
          "sequence": {
            "type": "string",
            "description": "sequence is the sequence of the account, which describes the\nnumber of committed transactions signed by a given address. It is used to\nprevent replay attacks."
          }
        },
        "description": "SignerInfo describes the public key and signing mode of a single top-level\nsigner."
      },
      "cosmos.tx.v1beta1.SimulateRequest": {
        "title": "cosmos.tx.v1beta1.SimulateRequest",
        "type": "object",
        "properties": {
          "tx": {
            "$ref": "#/components/schemas/cosmos.tx.v1beta1.Tx"
          },
          "tx_bytes": {
            "type": "string",
            "description": "tx_bytes is the raw transaction.\n\nSince: cosmos-sdk 0.43"
          }
        },
        "description": "SimulateRequest is the request type for the Service.Simulate\nRPC method."
      },
      "cosmos.tx.v1beta1.SimulateResponse": {
        "title": "cosmos.tx.v1beta1.SimulateResponse",
        "type": "object",
        "properties": {
          "gas_info": {
            "$ref": "#/components/schemas/GasInfo"
          },
          "result": {
            "$ref": "#/components/schemas/Result2"
          }
        },
        "description": "SimulateResponse is the response type for the\nService.SimulateRPC method."
      },
      "cosmos.tx.v1beta1.Tx": {
        "title": "cosmos.tx.v1beta1.Tx",
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/components/schemas/cosmos.tx.v1beta1.TxBody"
          },
          "auth_info": {
            "$ref": "#/components/schemas/cosmos.tx.v1beta1.AuthInfo"
          },
          "signatures": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "signatures is a list of signatures that matches the length and order of\nAuthInfo's signer_infos to allow connecting signature meta information like\npublic key and signing mode by position."
          }
        },
        "description": "Tx is the standard type used for broadcasting transactions."
      },
      "cosmos.tx.v1beta1.TxBody": {
        "title": "cosmos.tx.v1beta1.TxBody",
        "type": "object",
        "properties": {
          "messages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/google.protobuf.Any"
            },
            "description": "messages is a list of messages to be executed. The required signers of\nthose messages define the number and order of elements in AuthInfo's\nsigner_infos and Tx's signatures. Each required signer address is added to\nthe list only the first time it occurs.\nBy convention, the first required signer (usually from the first message)\nis referred to as the primary signer and pays the fee for the whole\ntransaction."
          },
          "memo": {
            "type": "string",
            "description": "memo is any arbitrary note/comment to be added to the transaction.\nWARNING: in clients, any publicly exposed text should not be called memo,\nbut should be called `note` instead (see https://github.com/cosmos/cosmos-sdk/issues/9122)."
          },
          "timeout_height": {
            "type": "string"
          },
          "extension_options": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/google.protobuf.Any"
            },
            "description": ""
          },
          "non_critical_extension_options": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/google.protobuf.Any"
            },
            "description": ""
          }
        },
        "description": "TxBody is the body of a transaction that all signers sign over."
      },
      "tendermint.abci.Event": {
        "title": "tendermint.abci.Event",
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "attributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/tendermint.abci.EventAttribute"
            },
            "description": ""
          }
        },
        "description": "Event allows application developers to attach additional information to\nResponseBeginBlock, ResponseEndBlock, ResponseCheckTx and ResponseDeliverTx.\nLater, transactions may be queried using these events."
      },
      "tendermint.abci.EventAttribute": {
        "title": "tendermint.abci.EventAttribute",
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "value": {
            "type": "string"
          },
          "index": {
            "type": "boolean"
          }
        },
        "description": "EventAttribute is a single key-value pair, associated with an event."
      },
      "cosmos.upgrade.v1beta1.ModuleVersion": {
        "title": "cosmos.upgrade.v1beta1.ModuleVersion",
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "version": {
            "type": "string"
          }
        },
        "description": "ModuleVersion specifies a module and its consensus version.\n\nSince: cosmos-sdk 0.43"
      },
      "cosmos.upgrade.v1beta1.Plan": {
        "title": "cosmos.upgrade.v1beta1.Plan",
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Sets the name for the upgrade. This name will be used by the upgraded\nversion of the software to apply any special \"on-upgrade\" commands during\nthe first BeginBlock method after the upgrade is applied. It is also used\nto detect whether a software version can handle a given upgrade. If no\nupgrade handler with this name has been set in the software, it will be\nassumed that the software is out-of-date when the upgrade Time or Height is\nreached and the software will exit."
          },
          "time": {
            "type": "string",
            "description": "Deprecated: Time based upgrades have been deprecated. Time based upgrade logic\nhas been removed from the SDK.\nIf this field is not empty, an error will be thrown.",
            "format": "date-time"
          },
          "height": {
            "type": "string",
            "description": "The height at which the upgrade must be performed.\nOnly used if Time is not set."
          },
          "info": {
            "type": "string"
          },
          "upgraded_client_state": {
            "$ref": "#/components/schemas/google.protobuf.Any"
          }
        },
        "description": "Plan specifies information about a planned upgrade and when it should occur."
      },
      "cosmos.upgrade.v1beta1.QueryAppliedPlanResponse": {
        "title": "cosmos.upgrade.v1beta1.QueryAppliedPlanResponse",
        "type": "object",
        "properties": {
          "height": {
            "type": "string",
            "description": "height is the block height at which the plan was applied."
          }
        },
        "description": "QueryAppliedPlanResponse is the response type for the Query/AppliedPlan RPC\nmethod."
      },
      "cosmos.upgrade.v1beta1.QueryCurrentPlanResponse": {
        "title": "cosmos.upgrade.v1beta1.QueryCurrentPlanResponse",
        "type": "object",
        "properties": {
          "plan": {
            "$ref": "#/components/schemas/Plan"
          }
        },
        "description": "QueryCurrentPlanResponse is the response type for the Query/CurrentPlan RPC\nmethod."
      },
      "cosmos.upgrade.v1beta1.QueryModuleVersionsResponse": {
        "title": "cosmos.upgrade.v1beta1.QueryModuleVersionsResponse",
        "type": "object",
        "properties": {
          "module_versions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/cosmos.upgrade.v1beta1.ModuleVersion"
            },
            "description": "module_versions is a list of module names with their consensus versions."
          }
        },
        "description": "QueryModuleVersionsResponse is the response type for the Query/ModuleVersions\nRPC method.\n\nSince: cosmos-sdk 0.43"
      },
      "cosmos.upgrade.v1beta1.QueryUpgradedConsensusStateResponse": {
        "title": "cosmos.upgrade.v1beta1.QueryUpgradedConsensusStateResponse",
        "type": "object",
        "properties": {
          "upgraded_consensus_state": {
            "type": "string"
          }
        },
        "description": "QueryUpgradedConsensusStateResponse is the response type for the Query/UpgradedConsensusState\nRPC method."
      },
      "terra.tx.v1beta1.ComputeTaxRequest": {
        "title": "terra.tx.v1beta1.ComputeTaxRequest",
        "type": "object",
        "properties": {
          "tx": {
            "$ref": "#/components/schemas/cosmos.tx.v1beta1.Tx"
          },
          "tx_bytes": {
            "type": "string",
            "description": "tx_bytes is the raw transaction."
          }
        },
        "description": "ComputeTaxRequest is the request type for the Service.ComputeTax\nRPC method."
      },
      "terra.tx.v1beta1.ComputeTaxResponse": {
        "title": "terra.tx.v1beta1.ComputeTaxResponse",
        "type": "object",
        "properties": {
          "tax_amount": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/cosmos.base.v1beta1.Coin"
            },
            "description": ""
          }
        },
        "description": "ComputeTaxResponse is the response type for the Service.ComputeTax\nRPC method."
      },
      "terra.market.v1beta1.Params": {
        "title": "terra.market.v1beta1.Params",
        "type": "object",
        "properties": {
          "base_pool": {
            "type": "string"
          },
          "pool_recovery_period": {
            "type": "string"
          },
          "min_stability_spread": {
            "type": "string"
          }
        },
        "description": "Params defines the parameters for the market module."
      },
      "terra.market.v1beta1.QueryParamsResponse": {
        "title": "terra.market.v1beta1.QueryParamsResponse",
        "type": "object",
        "properties": {
          "params": {
            "$ref": "#/components/schemas/Params6"
          }
        },
        "description": "QueryParamsResponse is the response type for the Query/Params RPC method."
      },
      "terra.market.v1beta1.QuerySwapResponse": {
        "title": "terra.market.v1beta1.QuerySwapResponse",
        "type": "object",
        "properties": {
          "return_coin": {
            "$ref": "#/components/schemas/ReturnCoin"
          }
        },
        "description": "QuerySwapResponse is the response type for the Query/Swap RPC method."
      },
      "terra.market.v1beta1.QueryTerraPoolDeltaResponse": {
        "title": "terra.market.v1beta1.QueryTerraPoolDeltaResponse",
        "type": "object",
        "properties": {
          "terra_pool_delta": {
            "type": "string"
          }
        },
        "description": "QueryTerraPoolDeltaResponse is the response type for the Query/TerraPoolDelta RPC method."
      },
      "structforaggregateprevotingontheExchangeRateVote.ThepurposeofaggregateprevoteistohidevoteexchangerateswithhashwhichisformattedashexstringinSHA256saltexchangeratedenom...exchangeratedenomvoter": {
        "title": "structforaggregateprevotingontheExchangeRateVote.ThepurposeofaggregateprevoteistohidevoteexchangerateswithhashwhichisformattedashexstringinSHA256saltexchangeratedenom...exchangeratedenomvoter",
        "type": "object",
        "properties": {
          "hash": {
            "type": "string"
          },
          "voter": {
            "type": "string"
          },
          "submit_block": {
            "type": "string"
          }
        }
      },
      "terra.oracle.v1beta1.AggregateExchangeRateVote": {
        "title": "terra.oracle.v1beta1.AggregateExchangeRateVote",
        "type": "object",
        "properties": {
          "exchange_rate_tuples": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExchangeRateTuple-structtostoreinterpretedexchangeratesdatatostore"
            },
            "description": ""
          },
          "voter": {
            "type": "string"
          }
        },
        "description": "MsgAggregateExchangeRateVote - struct for voting on\nthe exchange rates of Luna denominated in various Terra assets."
      },
      "Denom-theobjecttoholdconfigurationsofeachdenom": {
        "title": "Denom-theobjecttoholdconfigurationsofeachdenom",
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "tobin_tax": {
            "type": "string"
          }
        }
      },
      "ExchangeRateTuple-structtostoreinterpretedexchangeratesdatatostore": {
        "title": "ExchangeRateTuple-structtostoreinterpretedexchangeratesdatatostore",
        "type": "object",
        "properties": {
          "denom": {
            "type": "string"
          },
          "exchange_rate": {
            "type": "string"
          }
        }
      },
      "terra.oracle.v1beta1.Params": {
        "title": "terra.oracle.v1beta1.Params",
        "type": "object",
        "properties": {
          "vote_period": {
            "type": "string"
          },
          "vote_threshold": {
            "type": "string"
          },
          "reward_band": {
            "type": "string"
          },
          "reward_distribution_window": {
            "type": "string"
          },
          "whitelist": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Denom-theobjecttoholdconfigurationsofeachdenom"
            },
            "description": ""
          },
          "slash_fraction": {
            "type": "string"
          },
          "slash_window": {
            "type": "string"
          },
          "min_valid_per_window": {
            "type": "string"
          }
        },
        "description": "Params defines the parameters for the oracle module."
      },
      "terra.oracle.v1beta1.QueryActivesResponse": {
        "title": "terra.oracle.v1beta1.QueryActivesResponse",
        "type": "object",
        "properties": {
          "actives": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "actives defines a list of the denomination which oracle prices aggreed upon."
          }
        },
        "description": "QueryActivesResponse is response type for the\nQuery/Actives RPC method."
      },
      "terra.oracle.v1beta1.QueryAggregatePrevoteResponse": {
        "title": "terra.oracle.v1beta1.QueryAggregatePrevoteResponse",
        "type": "object",
        "properties": {
          "aggregate_prevote": {
            "$ref": "#/components/schemas/structforaggregateprevotingontheExchangeRateVote.ThepurposeofaggregateprevoteistohidevoteexchangerateswithhashwhichisformattedashexstringinSHA256saltexchangeratedenom...exchangeratedenomvoter"
          }
        },
        "description": "QueryAggregatePrevoteResponse is response type for the\nQuery/AggregatePrevote RPC method."
      },
      "terra.oracle.v1beta1.QueryAggregatePrevotesResponse": {
        "title": "terra.oracle.v1beta1.QueryAggregatePrevotesResponse",
        "type": "object",
        "properties": {
          "aggregate_prevotes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/structforaggregateprevotingontheExchangeRateVote.ThepurposeofaggregateprevoteistohidevoteexchangerateswithhashwhichisformattedashexstringinSHA256saltexchangeratedenom...exchangeratedenomvoter"
            },
            "description": ""
          }
        },
        "description": "QueryAggregatePrevotesResponse is response type for the\nQuery/AggregatePrevotes RPC method."
      },
      "terra.oracle.v1beta1.QueryAggregateVoteResponse": {
        "title": "terra.oracle.v1beta1.QueryAggregateVoteResponse",
        "type": "object",
        "properties": {
          "aggregate_vote": {
            "$ref": "#/components/schemas/terra.oracle.v1beta1.AggregateExchangeRateVote"
          }
        },
        "description": "QueryAggregateVoteResponse is response type for the\nQuery/AggregateVote RPC method."
      },
      "terra.oracle.v1beta1.QueryAggregateVotesResponse": {
        "title": "terra.oracle.v1beta1.QueryAggregateVotesResponse",
        "type": "object",
        "properties": {
          "aggregate_votes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/terra.oracle.v1beta1.AggregateExchangeRateVote"
            },
            "description": ""
          }
        },
        "description": "QueryAggregateVotesResponse is response type for the\nQuery/AggregateVotes RPC method."
      },
      "terra.oracle.v1beta1.QueryExchangeRateResponse": {
        "title": "terra.oracle.v1beta1.QueryExchangeRateResponse",
        "type": "object",
        "properties": {
          "exchange_rate": {
            "type": "string"
          }
        },
        "description": "QueryExchangeRateResponse is response type for the\nQuery/ExchangeRate RPC method."
      },
      "terra.oracle.v1beta1.QueryExchangeRatesResponse": {
        "title": "terra.oracle.v1beta1.QueryExchangeRatesResponse",
        "type": "object",
        "properties": {
          "exchange_rates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/cosmos.base.v1beta1.DecCoin"
            },
            "description": "exchange_rates defines a list of the exchange rate for all whitelisted denoms."
          }
        },
        "description": "QueryExchangeRatesResponse is response type for the\nQuery/ExchangeRates RPC method."
      },
      "terra.oracle.v1beta1.QueryFeederDelegationResponse": {
        "title": "terra.oracle.v1beta1.QueryFeederDelegationResponse",
        "type": "object",
        "properties": {
          "feeder_addr": {
            "type": "string"
          }
        },
        "description": "QueryFeederDelegationResponse is response type for the\nQuery/FeederDelegation RPC method."
      },
      "terra.oracle.v1beta1.QueryMissCounterResponse": {
        "title": "terra.oracle.v1beta1.QueryMissCounterResponse",
        "type": "object",
        "properties": {
          "miss_counter": {
            "type": "string"
          }
        },
        "description": "QueryMissCounterResponse is response type for the\nQuery/MissCounter RPC method."
      },
      "terra.oracle.v1beta1.QueryParamsResponse": {
        "title": "terra.oracle.v1beta1.QueryParamsResponse",
        "type": "object",
        "properties": {
          "params": {
            "$ref": "#/components/schemas/Params7"
          }
        },
        "description": "QueryParamsResponse is the response type for the Query/Params RPC method."
      },
      "terra.oracle.v1beta1.QueryTobinTaxResponse": {
        "title": "terra.oracle.v1beta1.QueryTobinTaxResponse",
        "type": "object",
        "properties": {
          "tobin_tax": {
            "type": "string"
          }
        },
        "description": "QueryTobinTaxResponse is response type for the\nQuery/TobinTax RPC method."
      },
      "terra.oracle.v1beta1.QueryTobinTaxesResponse": {
        "title": "terra.oracle.v1beta1.QueryTobinTaxesResponse",
        "type": "object",
        "properties": {
          "tobin_taxes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Denom-theobjecttoholdconfigurationsofeachdenom"
            },
            "description": ""
          }
        },
        "description": "QueryTobinTaxesResponse is response type for the\nQuery/TobinTaxes RPC method."
      },
      "terra.oracle.v1beta1.QueryVoteTargetsResponse": {
        "title": "terra.oracle.v1beta1.QueryVoteTargetsResponse",
        "type": "object",
        "properties": {
          "vote_targets": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "vote_targets defines a list of the denomination in which everyone\nshould vote in the current vote period."
          }
        },
        "description": "QueryVoteTargetsResponse is response type for the\nQuery/VoteTargets RPC method."
      },
      "terra.treasury.v1beta1.Params": {
        "title": "terra.treasury.v1beta1.Params",
        "type": "object",
        "properties": {
          "tax_policy": {
            "$ref": "#/components/schemas/PolicyConstraints-definespolicyconstraintscanbeappliedintaxrewardpolicies"
          },
          "reward_policy": {
            "$ref": "#/components/schemas/PolicyConstraints-definespolicyconstraintscanbeappliedintaxrewardpolicies"
          },
          "seigniorage_burden_target": {
            "type": "string"
          },
          "mining_increment": {
            "type": "string"
          },
          "window_short": {
            "type": "string"
          },
          "window_long": {
            "type": "string"
          },
          "window_probation": {
            "type": "string"
          }
        },
        "description": "Params defines the parameters for the oracle module."
      },
      "PolicyConstraints-definespolicyconstraintscanbeappliedintaxrewardpolicies": {
        "title": "PolicyConstraints-definespolicyconstraintscanbeappliedintaxrewardpolicies",
        "type": "object",
        "properties": {
          "rate_min": {
            "type": "string"
          },
          "rate_max": {
            "type": "string"
          },
          "cap": {
            "$ref": "#/components/schemas/cosmos.base.v1beta1.Coin"
          },
          "change_rate_max": {
            "type": "string"
          }
        }
      },
      "terra.treasury.v1beta1.QueryIndicatorsResponse": {
        "title": "terra.treasury.v1beta1.QueryIndicatorsResponse",
        "type": "object",
        "properties": {
          "trl_year": {
            "type": "string"
          },
          "trl_month": {
            "type": "string"
          }
        },
        "description": "QueryIndicatorsResponse is response type for the\nQuery/Indicators RPC method."
      },
      "terra.treasury.v1beta1.QueryParamsResponse": {
        "title": "terra.treasury.v1beta1.QueryParamsResponse",
        "type": "object",
        "properties": {
          "params": {
            "$ref": "#/components/schemas/Params8"
          }
        },
        "description": "QueryParamsResponse is the response type for the Query/Params RPC method."
      },
      "terra.treasury.v1beta1.QueryRewardWeightResponse": {
        "title": "terra.treasury.v1beta1.QueryRewardWeightResponse",
        "type": "object",
        "properties": {
          "reward_weight": {
            "type": "string"
          }
        },
        "description": "QueryRewardWeightResponse is response type for the\nQuery/RewardWeight RPC method."
      },
      "terra.treasury.v1beta1.QuerySeigniorageProceedsResponse": {
        "title": "terra.treasury.v1beta1.QuerySeigniorageProceedsResponse",
        "type": "object",
        "properties": {
          "seigniorage_proceeds": {
            "type": "string"
          }
        },
        "description": "QuerySeigniorageProceedsResponse is response type for the\nQuery/SeigniorageProceeds RPC method."
      },
      "terra.treasury.v1beta1.QueryTaxCapResponse": {
        "title": "terra.treasury.v1beta1.QueryTaxCapResponse",
        "type": "object",
        "properties": {
          "tax_cap": {
            "type": "string"
          }
        },
        "description": "QueryTaxCapResponse is response type for the\nQuery/TaxCap RPC method."
      },
      "terra.treasury.v1beta1.QueryTaxCapsResponse": {
        "title": "terra.treasury.v1beta1.QueryTaxCapsResponse",
        "type": "object",
        "properties": {
          "tax_caps": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/terra.treasury.v1beta1.QueryTaxCapsResponseItem"
            },
            "description": ""
          }
        },
        "description": "QueryTaxCapsResponse is response type for the\nQuery/TaxCaps RPC method."
      },
      "terra.treasury.v1beta1.QueryTaxCapsResponseItem": {
        "title": "terra.treasury.v1beta1.QueryTaxCapsResponseItem",
        "type": "object",
        "properties": {
          "denom": {
            "type": "string"
          },
          "tax_cap": {
            "type": "string"
          }
        },
        "description": "QueryTaxCapsResponseItem is response item type for the\nQuery/TaxCaps RPC method."
      },
      "terra.treasury.v1beta1.QueryTaxProceedsResponse": {
        "title": "terra.treasury.v1beta1.QueryTaxProceedsResponse",
        "type": "object",
        "properties": {
          "tax_proceeds": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/cosmos.base.v1beta1.Coin"
            },
            "description": ""
          }
        },
        "description": "QueryTaxProceedsResponse is response type for the\nQuery/TaxProceeds RPC method."
      },
      "terra.treasury.v1beta1.QueryTaxRateResponse": {
        "title": "terra.treasury.v1beta1.QueryTaxRateResponse",
        "type": "object",
        "properties": {
          "tax_rate": {
            "type": "string"
          }
        },
        "description": "QueryTaxRateResponse is response type for the\nQuery/TaxRate RPC method."
      },
      "CodeInfoisdatafortheuploadedcontractWASMcode": {
        "title": "CodeInfoisdatafortheuploadedcontractWASMcode",
        "type": "object",
        "properties": {
          "code_id": {
            "type": "string"
          },
          "code_hash": {
            "type": "string"
          },
          "creator": {
            "type": "string"
          }
        }
      },
      "ContractInfostoresaWASMcontractinstance": {
        "title": "ContractInfostoresaWASMcontractinstance",
        "type": "object",
        "properties": {
          "address": {
            "type": "string"
          },
          "creator": {
            "type": "string"
          },
          "admin": {
            "type": "string"
          },
          "code_id": {
            "type": "string"
          },
          "init_msg": {
            "type": "string"
          }
        }
      },
      "terra.wasm.v1beta1.Params": {
        "title": "terra.wasm.v1beta1.Params",
        "type": "object",
        "properties": {
          "max_contract_size": {
            "type": "string"
          },
          "max_contract_gas": {
            "type": "string"
          },
          "max_contract_msg_size": {
            "type": "string"
          }
        },
        "description": "Params defines the parameters for the wasm module."
      },
      "terra.wasm.v1beta1.QueryByteCodeResponse": {
        "title": "terra.wasm.v1beta1.QueryByteCodeResponse",
        "type": "object",
        "properties": {
          "byte_code": {
            "type": "string"
          }
        },
        "description": "QueryByteCodeResponse is response type for the\nQueryyByteCode RPC method."
      },
      "terra.wasm.v1beta1.QueryCodeInfoResponse": {
        "title": "terra.wasm.v1beta1.QueryCodeInfoResponse",
        "type": "object",
        "properties": {
          "code_info": {
            "$ref": "#/components/schemas/CodeInfoisdatafortheuploadedcontractWASMcode"
          }
        },
        "description": "QueryCodeInfoResponse is response type for the\nQueryyCodeInfo RPC method."
      },
      "terra.wasm.v1beta1.QueryContractInfoResponse": {
        "title": "terra.wasm.v1beta1.QueryContractInfoResponse",
        "type": "object",
        "properties": {
          "contract_info": {
            "$ref": "#/components/schemas/ContractInfostoresaWASMcontractinstance"
          }
        },
        "description": "QueryContractInfoResponse is response type for the\nQuery/ContractInfo RPC method."
      },
      "terra.wasm.v1beta1.QueryContractStoreResponse": {
        "title": "terra.wasm.v1beta1.QueryContractStoreResponse",
        "type": "object",
        "properties": {
          "query_result": {
            "type": "string"
          }
        },
        "description": "QueryContractStoreResponse is response type for the\nQuery/ContractStore RPC method."
      },
      "terra.wasm.v1beta1.QueryParamsResponse": {
        "title": "terra.wasm.v1beta1.QueryParamsResponse",
        "type": "object",
        "properties": {
          "params": {
            "$ref": "#/components/schemas/Params9"
          }
        },
        "description": "QueryParamsResponse is the response type for the Query/Params RPC method."
      },
      "terra.wasm.v1beta1.QueryRawStoreResponse": {
        "title": "terra.wasm.v1beta1.QueryRawStoreResponse",
        "type": "object",
        "properties": {
          "data": {
            "type": "string"
          }
        },
        "description": "QueryRawStoreResponse is response type for the\nQuery/RawStore RPC method."
      },
      "ibc.core.channel.v1.Channel": {
        "title": "ibc.core.channel.v1.Channel",
        "type": "object",
        "properties": {
          "state": {
            "$ref": "#/components/schemas/ibc.core.channel.v1.State"
          },
          "ordering": {
            "$ref": "#/components/schemas/OrderdefinesifachannelisORDEREDorUNORDERED"
          },
          "counterparty": {
            "$ref": "#/components/schemas/Counterpartydefinesachannelendcounterparty"
          },
          "connection_hops": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": ""
          },
          "version": {
            "type": "string"
          }
        },
        "description": "Channel defines pipeline for exactly-once packet delivery between specific\nmodules on separate blockchains, which has at least one end capable of\nsending packets and one end capable of receiving packets."
      },
      "Counterpartydefinesachannelendcounterparty": {
        "title": "Counterpartydefinesachannelendcounterparty",
        "type": "object",
        "properties": {
          "port_id": {
            "type": "string",
            "description": "port on the counterparty chain which owns the other end of the channel."
          },
          "channel_id": {
            "type": "string"
          }
        }
      },
      "ibc.core.channel.v1.IdentifiedChannel": {
        "title": "ibc.core.channel.v1.IdentifiedChannel",
        "type": "object",
        "properties": {
          "state": {
            "$ref": "#/components/schemas/ibc.core.channel.v1.State"
          },
          "ordering": {
            "$ref": "#/components/schemas/OrderdefinesifachannelisORDEREDorUNORDERED"
          },
          "counterparty": {
            "$ref": "#/components/schemas/Counterpartydefinesachannelendcounterparty"
          },
          "connection_hops": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": ""
          },
          "version": {
            "type": "string"
          },
          "port_id": {
            "type": "string"
          },
          "channel_id": {
            "type": "string"
          }
        },
        "description": "IdentifiedChannel defines a channel with additional port and channel\nidentifier fields."
      },
      "OrderdefinesifachannelisORDEREDorUNORDERED": {
        "title": "OrderdefinesifachannelisORDEREDorUNORDERED",
        "enum": [
          "ORDER_NONE_UNSPECIFIED",
          "ORDER_UNORDERED",
          "ORDER_ORDERED"
        ],
        "type": "string",
        "description": "- ORDER_NONE_UNSPECIFIED: zero-value for channel ordering\n - ORDER_UNORDERED: packets can be delivered in any order, which may differ from the order in\nwhich they were sent.\n - ORDER_ORDERED: packets are delivered exactly in the order which they were sent"
      },
      "ibc.core.channel.v1.PacketState": {
        "title": "ibc.core.channel.v1.PacketState",
        "type": "object",
        "properties": {
          "port_id": {
            "type": "string",
            "description": "channel port identifier."
          },
          "channel_id": {
            "type": "string",
            "description": "channel unique identifier."
          },
          "sequence": {
            "type": "string",
            "description": "packet sequence."
          },
          "data": {
            "type": "string",
            "description": "embedded data that represents packet state."
          }
        },
        "description": "PacketState defines the generic type necessary to retrieve and store\npacket commitments, acknowledgements, and receipts.\nCaller is responsible for knowing the context necessary to interpret this\nstate as a commitment, acknowledgement, or a receipt."
      },
      "QueryChannelClientStateResponseistheResponsetypefortheQueryQueryChannelClientStateRPCmethod": {
        "title": "QueryChannelClientStateResponseistheResponsetypefortheQueryQueryChannelClientStateRPCmethod",
        "type": "object",
        "properties": {
          "identified_client_state": {
            "$ref": "#/components/schemas/ibc.core.client.v1.IdentifiedClientState"
          },
          "proof": {
            "type": "string"
          },
          "proof_height": {
            "$ref": "#/components/schemas/HeightisamonotonicallyincreasingdatatypethatcanbecomparedagainstanotherHeightforthepurposesofupdatingandfreezingclients"
          }
        }
      },
      "QueryChannelClientStateResponseistheResponsetypefortheQueryQueryChannelClientStateRPCmethod1": {
        "title": "QueryChannelClientStateResponseistheResponsetypefortheQueryQueryChannelClientStateRPCmethod1",
        "type": "object",
        "properties": {
          "consensus_state": {
            "$ref": "#/components/schemas/google.protobuf.Any"
          },
          "client_id": {
            "type": "string"
          },
          "proof": {
            "type": "string"
          },
          "proof_height": {
            "$ref": "#/components/schemas/HeightisamonotonicallyincreasingdatatypethatcanbecomparedagainstanotherHeightforthepurposesofupdatingandfreezingclients"
          }
        }
      },
      "ibc.core.channel.v1.QueryChannelResponse": {
        "title": "ibc.core.channel.v1.QueryChannelResponse",
        "type": "object",
        "properties": {
          "channel": {
            "$ref": "#/components/schemas/ibc.core.channel.v1.Channel"
          },
          "proof": {
            "type": "string"
          },
          "proof_height": {
            "$ref": "#/components/schemas/HeightisamonotonicallyincreasingdatatypethatcanbecomparedagainstanotherHeightforthepurposesofupdatingandfreezingclients"
          }
        },
        "description": "QueryChannelResponse is the response type for the Query/Channel RPC method.\nBesides the Channel end, it includes a proof and the height from which the\nproof was retrieved."
      },
      "ibc.core.channel.v1.QueryChannelsResponse": {
        "title": "ibc.core.channel.v1.QueryChannelsResponse",
        "type": "object",
        "properties": {
          "channels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ibc.core.channel.v1.IdentifiedChannel"
            },
            "description": "list of stored channels of the chain."
          },
          "pagination": {
            "$ref": "#/components/schemas/cosmos.base.query.v1beta1.PageResponse"
          },
          "height": {
            "$ref": "#/components/schemas/HeightisamonotonicallyincreasingdatatypethatcanbecomparedagainstanotherHeightforthepurposesofupdatingandfreezingclients"
          }
        },
        "description": "QueryChannelsResponse is the response type for the Query/Channels RPC method."
      },
      "QueryConnectionChannelsResponseistheResponsetypefortheQueryQueryConnectionChannelsRPCmethod": {
        "title": "QueryConnectionChannelsResponseistheResponsetypefortheQueryQueryConnectionChannelsRPCmethod",
        "type": "object",
        "properties": {
          "channels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ibc.core.channel.v1.IdentifiedChannel"
            },
            "description": "list of channels associated with a connection."
          },
          "pagination": {
            "$ref": "#/components/schemas/cosmos.base.query.v1beta1.PageResponse"
          },
          "height": {
            "$ref": "#/components/schemas/HeightisamonotonicallyincreasingdatatypethatcanbecomparedagainstanotherHeightforthepurposesofupdatingandfreezingclients"
          }
        }
      },
      "QuerySequenceResponseistherequesttypefortheQueryQueryNextSequenceReceiveResponseRPCmethod": {
        "title": "QuerySequenceResponseistherequesttypefortheQueryQueryNextSequenceReceiveResponseRPCmethod",
        "type": "object",
        "properties": {
          "next_sequence_receive": {
            "type": "string"
          },
          "proof": {
            "type": "string"
          },
          "proof_height": {
            "$ref": "#/components/schemas/HeightisamonotonicallyincreasingdatatypethatcanbecomparedagainstanotherHeightforthepurposesofupdatingandfreezingclients"
          }
        }
      },
      "QueryPacketAcknowledgementResponsedefinestheclientqueryresponseforapacketwhichalsoincludesaproofandtheheightfromwhichtheproofwasretrieved": {
        "title": "QueryPacketAcknowledgementResponsedefinestheclientqueryresponseforapacketwhichalsoincludesaproofandtheheightfromwhichtheproofwasretrieved",
        "type": "object",
        "properties": {
          "acknowledgement": {
            "type": "string"
          },
          "proof": {
            "type": "string"
          },
          "proof_height": {
            "$ref": "#/components/schemas/HeightisamonotonicallyincreasingdatatypethatcanbecomparedagainstanotherHeightforthepurposesofupdatingandfreezingclients"
          }
        }
      },
      "QueryPacketAcknowledgemetsResponseistherequesttypefortheQueryQueryPacketAcknowledgementsRPCmethod": {
        "title": "QueryPacketAcknowledgemetsResponseistherequesttypefortheQueryQueryPacketAcknowledgementsRPCmethod",
        "type": "object",
        "properties": {
          "acknowledgements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ibc.core.channel.v1.PacketState"
            },
            "description": ""
          },
          "pagination": {
            "$ref": "#/components/schemas/cosmos.base.query.v1beta1.PageResponse"
          },
          "height": {
            "$ref": "#/components/schemas/HeightisamonotonicallyincreasingdatatypethatcanbecomparedagainstanotherHeightforthepurposesofupdatingandfreezingclients"
          }
        }
      },
      "QueryPacketCommitmentResponsedefinestheclientqueryresponseforapacketwhichalsoincludesaproofandtheheightfromwhichtheproofwasretrieved": {
        "title": "QueryPacketCommitmentResponsedefinestheclientqueryresponseforapacketwhichalsoincludesaproofandtheheightfromwhichtheproofwasretrieved",
        "type": "object",
        "properties": {
          "commitment": {
            "type": "string"
          },
          "proof": {
            "type": "string"
          },
          "proof_height": {
            "$ref": "#/components/schemas/HeightisamonotonicallyincreasingdatatypethatcanbecomparedagainstanotherHeightforthepurposesofupdatingandfreezingclients"
          }
        }
      },
      "QueryPacketCommitmentsResponseistherequesttypefortheQueryQueryPacketCommitmentsRPCmethod": {
        "title": "QueryPacketCommitmentsResponseistherequesttypefortheQueryQueryPacketCommitmentsRPCmethod",
        "type": "object",
        "properties": {
          "commitments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ibc.core.channel.v1.PacketState"
            },
            "description": ""
          },
          "pagination": {
            "$ref": "#/components/schemas/cosmos.base.query.v1beta1.PageResponse"
          },
          "height": {
            "$ref": "#/components/schemas/HeightisamonotonicallyincreasingdatatypethatcanbecomparedagainstanotherHeightforthepurposesofupdatingandfreezingclients"
          }
        }
      },
      "QueryPacketReceiptResponsedefinestheclientqueryresponseforapacketreceiptwhichalsoincludesaproofandtheheightfromwhichtheproofwasretrieved": {
        "title": "QueryPacketReceiptResponsedefinestheclientqueryresponseforapacketreceiptwhichalsoincludesaproofandtheheightfromwhichtheproofwasretrieved",
        "type": "object",
        "properties": {
          "received": {
            "type": "boolean"
          },
          "proof": {
            "type": "string"
          },
          "proof_height": {
            "$ref": "#/components/schemas/HeightisamonotonicallyincreasingdatatypethatcanbecomparedagainstanotherHeightforthepurposesofupdatingandfreezingclients"
          }
        }
      },
      "QueryUnreceivedAcksResponseistheresponsetypefortheQueryUnreceivedAcksRPCmethod": {
        "title": "QueryUnreceivedAcksResponseistheresponsetypefortheQueryUnreceivedAcksRPCmethod",
        "type": "object",
        "properties": {
          "sequences": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": ""
          },
          "height": {
            "$ref": "#/components/schemas/HeightisamonotonicallyincreasingdatatypethatcanbecomparedagainstanotherHeightforthepurposesofupdatingandfreezingclients"
          }
        }
      },
      "QueryUnreceivedPacketsResponseistheresponsetypefortheQueryUnreceivedPacketCommitmentsRPCmethod": {
        "title": "QueryUnreceivedPacketsResponseistheresponsetypefortheQueryUnreceivedPacketCommitmentsRPCmethod",
        "type": "object",
        "properties": {
          "sequences": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": ""
          },
          "height": {
            "$ref": "#/components/schemas/HeightisamonotonicallyincreasingdatatypethatcanbecomparedagainstanotherHeightforthepurposesofupdatingandfreezingclients"
          }
        }
      },
      "ibc.core.channel.v1.State": {
        "title": "ibc.core.channel.v1.State",
        "enum": [
          "STATE_UNINITIALIZED_UNSPECIFIED",
          "STATE_INIT",
          "STATE_TRYOPEN",
          "STATE_OPEN",
          "STATE_CLOSED"
        ],
        "type": "string",
        "description": "State defines if a channel is in one of the following states:\nCLOSED, INIT, TRYOPEN, OPEN or UNINITIALIZED.\n\n - STATE_UNINITIALIZED_UNSPECIFIED: Default State\n - STATE_INIT: A channel has just started the opening handshake.\n - STATE_TRYOPEN: A channel has acknowledged the handshake step on the counterparty chain.\n - STATE_OPEN: A channel has completed the handshake. Open channels are\nready to send and receive packets.\n - STATE_CLOSED: A channel has been closed and can no longer be used to send or receive\npackets."
      },
      "HeightisamonotonicallyincreasingdatatypethatcanbecomparedagainstanotherHeightforthepurposesofupdatingandfreezingclients": {
        "title": "HeightisamonotonicallyincreasingdatatypethatcanbecomparedagainstanotherHeightforthepurposesofupdatingandfreezingclients",
        "type": "object",
        "properties": {
          "revision_number": {
            "type": "string"
          },
          "revision_height": {
            "type": "string"
          }
        },
        "description": "Normally the RevisionHeight is incremented at each height while keeping\nRevisionNumber the same. However some consensus algorithms may choose to\nreset the height in certain conditions e.g. hard forks, state-machine\nbreaking changes In these cases, the RevisionNumber is incremented so that\nheight continues to be monitonically increasing even as the RevisionHeight\ngets reset"
      },
      "ibc.core.client.v1.IdentifiedClientState": {
        "title": "ibc.core.client.v1.IdentifiedClientState",
        "type": "object",
        "properties": {
          "client_id": {
            "type": "string"
          },
          "client_state": {
            "$ref": "#/components/schemas/google.protobuf.Any"
          }
        },
        "description": "IdentifiedClientState defines a client state with an additional client\nidentifier field."
      },
      "ibc.core.client.v1.ConsensusStateWithHeight": {
        "title": "ibc.core.client.v1.ConsensusStateWithHeight",
        "type": "object",
        "properties": {
          "height": {
            "$ref": "#/components/schemas/HeightisamonotonicallyincreasingdatatypethatcanbecomparedagainstanotherHeightforthepurposesofupdatingandfreezingclients"
          },
          "consensus_state": {
            "$ref": "#/components/schemas/google.protobuf.Any"
          }
        },
        "description": "ConsensusStateWithHeight defines a consensus state with an additional height\nfield."
      },
      "ibc.core.client.v1.Params": {
        "title": "ibc.core.client.v1.Params",
        "type": "object",
        "properties": {
          "allowed_clients": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "allowed_clients defines the list of allowed client state types."
          }
        },
        "description": "Params defines the set of IBC light client parameters."
      },
      "ibc.core.client.v1.QueryClientParamsResponse": {
        "title": "ibc.core.client.v1.QueryClientParamsResponse",
        "type": "object",
        "properties": {
          "params": {
            "$ref": "#/components/schemas/Params10"
          }
        },
        "description": "QueryClientParamsResponse is the response type for the Query/ClientParams RPC\nmethod."
      },
      "ibc.core.client.v1.QueryClientStateResponse": {
        "title": "ibc.core.client.v1.QueryClientStateResponse",
        "type": "object",
        "properties": {
          "client_state": {
            "$ref": "#/components/schemas/google.protobuf.Any"
          },
          "proof": {
            "type": "string"
          },
          "proof_height": {
            "$ref": "#/components/schemas/HeightisamonotonicallyincreasingdatatypethatcanbecomparedagainstanotherHeightforthepurposesofupdatingandfreezingclients"
          }
        },
        "description": "QueryClientStateResponse is the response type for the Query/ClientState RPC\nmethod. Besides the client state, it includes a proof and the height from\nwhich the proof was retrieved."
      },
      "ibc.core.client.v1.QueryClientStatesResponse": {
        "title": "ibc.core.client.v1.QueryClientStatesResponse",
        "type": "object",
        "properties": {
          "client_states": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ibc.core.client.v1.IdentifiedClientState"
            },
            "description": "list of stored ClientStates of the chain."
          },
          "pagination": {
            "$ref": "#/components/schemas/cosmos.base.query.v1beta1.PageResponse"
          }
        },
        "description": "QueryClientStatesResponse is the response type for the Query/ClientStates RPC\nmethod."
      },
      "ibc.core.client.v1.QueryClientStatusResponse": {
        "title": "ibc.core.client.v1.QueryClientStatusResponse",
        "type": "object",
        "properties": {
          "status": {
            "type": "string"
          }
        },
        "description": "QueryClientStatusResponse is the response type for the Query/ClientStatus RPC\nmethod. It returns the current status of the IBC client."
      },
      "QueryConsensusStateResponseistheresponsetypefortheQueryConsensusStateRPCmethod": {
        "title": "QueryConsensusStateResponseistheresponsetypefortheQueryConsensusStateRPCmethod",
        "type": "object",
        "properties": {
          "consensus_state": {
            "$ref": "#/components/schemas/google.protobuf.Any"
          },
          "proof": {
            "type": "string"
          },
          "proof_height": {
            "$ref": "#/components/schemas/HeightisamonotonicallyincreasingdatatypethatcanbecomparedagainstanotherHeightforthepurposesofupdatingandfreezingclients"
          }
        }
      },
      "QueryConsensusStatesResponseistheresponsetypefortheQueryConsensusStatesRPCmethod": {
        "title": "QueryConsensusStatesResponseistheresponsetypefortheQueryConsensusStatesRPCmethod",
        "type": "object",
        "properties": {
          "consensus_states": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ibc.core.client.v1.ConsensusStateWithHeight"
            },
            "description": ""
          },
          "pagination": {
            "$ref": "#/components/schemas/cosmos.base.query.v1beta1.PageResponse"
          }
        }
      },
      "ibc.core.client.v1.QueryUpgradedClientStateResponse": {
        "title": "ibc.core.client.v1.QueryUpgradedClientStateResponse",
        "type": "object",
        "properties": {
          "upgraded_client_state": {
            "$ref": "#/components/schemas/google.protobuf.Any"
          }
        },
        "description": "QueryUpgradedClientStateResponse is the response type for the\nQuery/UpgradedClientState RPC method."
      },
      "ibc.core.client.v1.QueryUpgradedConsensusStateResponse": {
        "title": "ibc.core.client.v1.QueryUpgradedConsensusStateResponse",
        "type": "object",
        "properties": {
          "upgraded_consensus_state": {
            "$ref": "#/components/schemas/google.protobuf.Any"
          }
        },
        "description": "QueryUpgradedConsensusStateResponse is the response type for the\nQuery/UpgradedConsensusState RPC method."
      },
      "MerklePrefixismerklepathprefixedtothekey.TheconstructedkeyfromthePathandthekeywillbeappendPath.KeyPathappendPath.KeyPrefixkey...": {
        "title": "MerklePrefixismerklepathprefixedtothekey.TheconstructedkeyfromthePathandthekeywillbeappendPath.KeyPathappendPath.KeyPrefixkey...",
        "type": "object",
        "properties": {
          "key_prefix": {
            "type": "string"
          }
        }
      },
      "ibc.core.connection.v1.ConnectionEnd": {
        "title": "ibc.core.connection.v1.ConnectionEnd",
        "type": "object",
        "properties": {
          "client_id": {
            "type": "string",
            "description": "client associated with this connection."
          },
          "versions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ibc.core.connection.v1.Version"
            },
            "description": "IBC version which can be utilised to determine encodings or protocols for\nchannels or packets utilising this connection."
          },
          "state": {
            "$ref": "#/components/schemas/State"
          },
          "counterparty": {
            "$ref": "#/components/schemas/Counterparty"
          },
          "delay_period": {
            "type": "string",
            "description": "delay period that must pass before a consensus state can be used for\npacket-verification NOTE: delay period logic is only implemented by some\nclients."
          }
        },
        "description": "ConnectionEnd defines a stateful object on a chain connected to another\nseparate one.\nNOTE: there must only be 2 defined ConnectionEnds to establish\na connection between two chains."
      },
      "ibc.core.connection.v1.Counterparty": {
        "title": "ibc.core.connection.v1.Counterparty",
        "type": "object",
        "properties": {
          "client_id": {
            "type": "string",
            "description": "identifies the client on the counterparty chain associated with a given\nconnection."
          },
          "connection_id": {
            "type": "string",
            "description": "identifies the connection end on the counterparty chain associated with a\ngiven connection."
          },
          "prefix": {
            "$ref": "#/components/schemas/MerklePrefixismerklepathprefixedtothekey.TheconstructedkeyfromthePathandthekeywillbeappendPath.KeyPathappendPath.KeyPrefixkey...1"
          }
        },
        "description": "Counterparty defines the counterparty chain associated with a connection end."
      },
      "ibc.core.connection.v1.IdentifiedConnection": {
        "title": "ibc.core.connection.v1.IdentifiedConnection",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "connection identifier."
          },
          "client_id": {
            "type": "string",
            "description": "client associated with this connection."
          },
          "versions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ibc.core.connection.v1.Version"
            },
            "description": ""
          },
          "state": {
            "$ref": "#/components/schemas/State"
          },
          "counterparty": {
            "$ref": "#/components/schemas/Counterparty"
          },
          "delay_period": {
            "type": "string",
            "description": "delay period associated with this connection."
          }
        },
        "description": "IdentifiedConnection defines a connection with additional connection\nidentifier field."
      },
      "QueryClientConnectionsResponseistheresponsetypefortheQueryClientConnectionsRPCmethod": {
        "title": "QueryClientConnectionsResponseistheresponsetypefortheQueryClientConnectionsRPCmethod",
        "type": "object",
        "properties": {
          "connection_paths": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "slice of all the connection paths associated with a client."
          },
          "proof": {
            "type": "string"
          },
          "proof_height": {
            "$ref": "#/components/schemas/HeightisamonotonicallyincreasingdatatypethatcanbecomparedagainstanotherHeightforthepurposesofupdatingandfreezingclients"
          }
        }
      },
      "QueryConnectionClientStateResponseistheresponsetypefortheQueryConnectionClientStateRPCmethod": {
        "title": "QueryConnectionClientStateResponseistheresponsetypefortheQueryConnectionClientStateRPCmethod",
        "type": "object",
        "properties": {
          "identified_client_state": {
            "$ref": "#/components/schemas/ibc.core.client.v1.IdentifiedClientState"
          },
          "proof": {
            "type": "string"
          },
          "proof_height": {
            "$ref": "#/components/schemas/HeightisamonotonicallyincreasingdatatypethatcanbecomparedagainstanotherHeightforthepurposesofupdatingandfreezingclients"
          }
        }
      },
      "QueryConnectionConsensusStateResponseistheresponsetypefortheQueryConnectionConsensusStateRPCmethod": {
        "title": "QueryConnectionConsensusStateResponseistheresponsetypefortheQueryConnectionConsensusStateRPCmethod",
        "type": "object",
        "properties": {
          "consensus_state": {
            "$ref": "#/components/schemas/google.protobuf.Any"
          },
          "client_id": {
            "type": "string"
          },
          "proof": {
            "type": "string"
          },
          "proof_height": {
            "$ref": "#/components/schemas/HeightisamonotonicallyincreasingdatatypethatcanbecomparedagainstanotherHeightforthepurposesofupdatingandfreezingclients"
          }
        }
      },
      "ibc.core.connection.v1.QueryConnectionResponse": {
        "title": "ibc.core.connection.v1.QueryConnectionResponse",
        "type": "object",
        "properties": {
          "connection": {
            "$ref": "#/components/schemas/ibc.core.connection.v1.ConnectionEnd"
          },
          "proof": {
            "type": "string"
          },
          "proof_height": {
            "$ref": "#/components/schemas/HeightisamonotonicallyincreasingdatatypethatcanbecomparedagainstanotherHeightforthepurposesofupdatingandfreezingclients"
          }
        },
        "description": "QueryConnectionResponse is the response type for the Query/Connection RPC\nmethod. Besides the connection end, it includes a proof and the height from\nwhich the proof was retrieved."
      },
      "ibc.core.connection.v1.QueryConnectionsResponse": {
        "title": "ibc.core.connection.v1.QueryConnectionsResponse",
        "type": "object",
        "properties": {
          "connections": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ibc.core.connection.v1.IdentifiedConnection"
            },
            "description": "list of stored connections of the chain."
          },
          "pagination": {
            "$ref": "#/components/schemas/cosmos.base.query.v1beta1.PageResponse"
          },
          "height": {
            "$ref": "#/components/schemas/HeightisamonotonicallyincreasingdatatypethatcanbecomparedagainstanotherHeightforthepurposesofupdatingandfreezingclients"
          }
        },
        "description": "QueryConnectionsResponse is the response type for the Query/Connections RPC\nmethod."
      },
      "ibc.core.connection.v1.State": {
        "title": "ibc.core.connection.v1.State",
        "enum": [
          "STATE_UNINITIALIZED_UNSPECIFIED",
          "STATE_INIT",
          "STATE_TRYOPEN",
          "STATE_OPEN"
        ],
        "type": "string",
        "description": "State defines if a connection is in one of the following states:\nINIT, TRYOPEN, OPEN or UNINITIALIZED.\n\n - STATE_UNINITIALIZED_UNSPECIFIED: Default State\n - STATE_INIT: A connection end has just started the opening handshake.\n - STATE_TRYOPEN: A connection end has acknowledged the handshake step on the counterparty\nchain.\n - STATE_OPEN: A connection end has completed the handshake."
      },
      "ibc.core.connection.v1.Version": {
        "title": "ibc.core.connection.v1.Version",
        "type": "object",
        "properties": {
          "identifier": {
            "type": "string"
          },
          "features": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": ""
          }
        },
        "description": "Version defines the versioning scheme used to negotiate the IBC verison in\nthe connection handshake."
      },
      "ibc.applications.transfer.v1.DenomTrace": {
        "title": "ibc.applications.transfer.v1.DenomTrace",
        "type": "object",
        "properties": {
          "path": {
            "type": "string",
            "description": "path defines the chain of port/channel identifiers used for tracing the\nsource of the fungible token."
          },
          "base_denom": {
            "type": "string",
            "description": "base denomination of the relayed fungible token."
          }
        },
        "description": "DenomTrace contains the base denomination for ICS20 fungible tokens and the\nsource tracing information path."
      },
      "ibc.applications.transfer.v1.Params": {
        "title": "ibc.applications.transfer.v1.Params",
        "type": "object",
        "properties": {
          "send_enabled": {
            "type": "boolean",
            "description": "send_enabled enables or disables all cross-chain token transfers from this\nchain."
          },
          "receive_enabled": {
            "type": "boolean",
            "description": "receive_enabled enables or disables all cross-chain token transfers to this\nchain."
          }
        },
        "description": "Params defines the set of IBC transfer parameters.\nNOTE: To prevent a single token from being transferred, set the\nTransfersEnabled parameter to true and then set the bank module's SendEnabled\nparameter for the denomination to false."
      },
      "ibc.applications.transfer.v1.QueryDenomTraceResponse": {
        "title": "ibc.applications.transfer.v1.QueryDenomTraceResponse",
        "type": "object",
        "properties": {
          "denom_trace": {
            "$ref": "#/components/schemas/ibc.applications.transfer.v1.DenomTrace"
          }
        },
        "description": "QueryDenomTraceResponse is the response type for the Query/DenomTrace RPC\nmethod."
      },
      "ibc.applications.transfer.v1.QueryDenomTracesResponse": {
        "title": "ibc.applications.transfer.v1.QueryDenomTracesResponse",
        "type": "object",
        "properties": {
          "denom_traces": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ibc.applications.transfer.v1.DenomTrace"
            },
            "description": "denom_traces returns all denominations trace information."
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        },
        "description": "QueryConnectionsResponse is the response type for the Query/DenomTraces RPC\nmethod."
      },
      "ibc.applications.transfer.v1.QueryParamsResponse": {
        "title": "ibc.applications.transfer.v1.QueryParamsResponse",
        "type": "object",
        "properties": {
          "params": {
            "$ref": "#/components/schemas/Params11"
          }
        },
        "description": "QueryParamsResponse is the response type for the Query/Params RPC method."
      },
      "getBankResult": {
        "title": "getBankResult",
        "required": [
          "balance",
          "vesting",
          "delegations",
          "unbondings"
        ],
        "type": "object",
        "properties": {
          "balance": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/getBankResult.balance"
            },
            "description": "Available balance of the User"
          },
          "vesting": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/getBankResult.vesting"
            },
            "description": "Vesting schedule of the User"
          },
          "delegations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/getBankResult.delegations"
            },
            "description": "Delegation informations of the User"
          },
          "unbondings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/getBankResult.unbondings"
            },
            "description": "User unbonding details"
          }
        }
      },
      "getBankResult.balance": {
        "title": "getBankResult.balance",
        "required": [
          "denom",
          "amount",
          "delegatedVesting",
          "delegatable",
          "freedVesting",
          "unbonding",
          "remainingVesting"
        ],
        "type": "object",
        "properties": {
          "denom": {
            "type": "string",
            "description": "Coin denomination"
          },
          "amount": {
            "type": "string",
            "description": "Available amount"
          },
          "delegatedVesting": {
            "type": "string",
            "description": "Delegated amount of the vesting amount"
          },
          "delegatable": {
            "type": "string",
            "description": "Delegatable amount"
          },
          "freedVesting": {
            "type": "string",
            "description": "Freed amount of the vesting amount"
          },
          "unbonding": {
            "type": "string",
            "description": "Amount in unbonding state"
          },
          "remainingVesting": {
            "type": "string",
            "description": "Amount not yet freed"
          }
        }
      },
      "getBankResult.vesting": {
        "title": "getBankResult.vesting",
        "required": [
          "denom",
          "total",
          "schedules"
        ],
        "type": "object",
        "properties": {
          "denom": {
            "type": "string",
            "description": "denom name"
          },
          "total": {
            "type": "string",
            "description": "vesting amount"
          },
          "schedules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/getBankResult.vesting.schedules"
            },
            "description": "vesting schedules of user"
          }
        }
      },
      "getBankResult.vesting.schedules": {
        "title": "getBankResult.vesting.schedules",
        "required": [
          "amount",
          "startTime",
          "endTime",
          "ratio"
        ],
        "type": "object",
        "properties": {
          "amount": {
            "type": "string",
            "description": "vesting amount"
          },
          "startTime": {
            "type": "string",
            "description": "vestring start time"
          },
          "endTime": {
            "type": "string",
            "description": "vesting end time"
          },
          "ratio": {
            "type": "string",
            "description": "vesting ratio"
          }
        }
      },
      "getBankResult.delegations": {
        "title": "getBankResult.delegations",
        "required": [
          "delegator_address",
          "validator_address",
          "shares",
          "amount"
        ],
        "type": "object",
        "properties": {
          "delegator_address": {
            "type": "string",
            "description": "delegator address"
          },
          "validator_address": {
            "type": "string",
            "description": "validator address"
          },
          "shares": {
            "type": "string",
            "description": "delegation share"
          },
          "amount": {
            "type": "string",
            "description": "delegation amount"
          }
        }
      },
      "getBankResult.unbondings": {
        "title": "getBankResult.unbondings",
        "required": [
          "delegator_address",
          "validator_address",
          "entries"
        ],
        "type": "object",
        "properties": {
          "delegator_address": {
            "type": "string",
            "description": "delegator address"
          },
          "validator_address": {
            "type": "string",
            "description": "validator address"
          },
          "entries": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/getBankResult.unbondings.entries"
            },
            "description": "details of unbondings"
          }
        }
      },
      "getBankResult.unbondings.entries": {
        "title": "getBankResult.unbondings.entries",
        "required": [
          "creating_height",
          "completion_time",
          "initial_balance",
          "balance"
        ],
        "type": "object",
        "properties": {
          "creating_height": {
            "type": "string",
            "description": "block height"
          },
          "completion_time": {
            "type": "string",
            "description": "unbonding completion time"
          },
          "initial_balance": {
            "type": "string",
            "description": "initial balancd"
          },
          "balance": {
            "type": "string",
            "description": "current balance"
          }
        }
      },
      "getAccountGrowthResult": {
        "title": "getAccountGrowthResult",
        "required": [
          "cumulative",
          "periodic"
        ],
        "type": "object",
        "properties": {
          "cumulative": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/getAccountGrowthResult.cumulative"
            },
            "description": "cumulative history data"
          },
          "periodic": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/getAccountGrowthResult.periodic"
            },
            "description": "periodic history"
          }
        }
      },
      "getAccountGrowthResult.cumulative": {
        "title": "getAccountGrowthResult.cumulative",
        "required": [
          "datetime",
          "totalAccount",
          "activeAccount"
        ],
        "type": "object",
        "properties": {
          "datetime": {
            "type": "number",
            "description": "unix timestamp"
          },
          "totalAccount": {
            "type": "number",
            "description": "total account"
          },
          "activeAccount": {
            "type": "number",
            "description": "active account count"
          }
        }
      },
      "getAccountGrowthResult.periodic": {
        "title": "getAccountGrowthResult.periodic",
        "required": [
          "datetime",
          "totalAccount",
          "activeAccount"
        ],
        "type": "object",
        "properties": {
          "datetime": {
            "type": "number",
            "description": "unix timestamp"
          },
          "totalAccount": {
            "type": "number",
            "description": "total account on datetime"
          },
          "activeAccount": {
            "type": "number",
            "description": "active account on datetime"
          }
        }
      },
      "getActiveAccountsResult": {
        "title": "getActiveAccountsResult",
        "required": [
          "total",
          "periodic"
        ],
        "type": "object",
        "properties": {
          "total": {
            "type": "number",
            "description": "total active accounts in the time period"
          },
          "periodic": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/getActiveAccountsResult.periodic"
            },
            "description": "daily active account info's"
          }
        }
      },
      "getActiveAccountsResult.periodic": {
        "title": "getActiveAccountsResult.periodic",
        "required": [
          "datetime",
          "value"
        ],
        "type": "object",
        "properties": {
          "datetime": {
            "type": "number",
            "description": "unix timestamp"
          },
          "value": {
            "type": "number",
            "description": "active account count"
          }
        }
      },
      "getBlockRewardResult": {
        "title": "getBlockRewardResult",
        "required": [
          "cumulative",
          "periodic"
        ],
        "type": "object",
        "properties": {
          "cumulative": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/getBlockRewardResult.cumulative"
            },
            "description": "cumulative history"
          },
          "periodic": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/getBlockRewardResult.periodic"
            },
            "description": "periodic history"
          }
        }
      },
      "getBlockRewardResult.cumulative": {
        "title": "getBlockRewardResult.cumulative",
        "required": [
          "datetime",
          "blockReward"
        ],
        "type": "object",
        "properties": {
          "datetime": {
            "type": "number",
            "description": "unix timestamp"
          },
          "blockReward": {
            "type": "number",
            "description": "cumulative reward"
          }
        }
      },
      "getBlockRewardResult.periodic": {
        "title": "getBlockRewardResult.periodic",
        "required": [
          "datetime",
          "blockReward"
        ],
        "type": "object",
        "properties": {
          "datetime": {
            "type": "number",
            "description": "unix timestamp"
          },
          "blockReward": {
            "type": "number",
            "description": "periodic reward on that timestamp"
          }
        }
      },
      "getDashboardResult": {
        "title": "getDashboardResult",
        "required": [
          "prices",
          "taxRate",
          "taxCaps",
          "issuances",
          "stakingPool",
          "communityPool"
        ],
        "type": "object",
        "properties": {
          "prices": {
            "$ref": "#/components/schemas/getDashboardResult.prices"
          },
          "taxRate": {
            "type": "string",
            "description": "Current tax rate"
          },
          "taxCaps": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/getDashboardResult.taxCaps"
            },
            "description": "Current tax cap"
          },
          "issuances": {
            "$ref": "#/components/schemas/getDashboardResult.issuances"
          },
          "stakingPool": {
            "$ref": "#/components/schemas/getDashboardResult.stakingPool"
          },
          "communityPool": {
            "$ref": "#/components/schemas/getDashboardResult.communityPool"
          }
        }
      },
      "getDashboardResult.prices": {
        "title": "getDashboardResult.prices",
        "required": [
          "ukrw",
          "uluna",
          "umnt",
          "usdr",
          "uusd"
        ],
        "type": "object",
        "properties": {
          "ukrw": {
            "type": "string",
            "description": "ukrw amount"
          },
          "uluna": {
            "type": "string",
            "description": "uluna amount"
          },
          "umnt": {
            "type": "string",
            "description": "umnt amount"
          },
          "usdr": {
            "type": "string",
            "description": "usdr amount"
          },
          "uusd": {
            "type": "string",
            "description": "uusd amount"
          }
        }
      },
      "getDashboardResult.taxCaps": {
        "title": "getDashboardResult.taxCaps",
        "required": [
          "denom",
          "taxCap"
        ],
        "type": "object",
        "properties": {
          "denom": {
            "type": "string",
            "description": "denom name"
          },
          "taxCap": {
            "type": "string",
            "description": "tax cap amount"
          }
        }
      },
      "getDashboardResult.issuances": {
        "title": "getDashboardResult.issuances",
        "required": [
          "ukrw",
          "uluna",
          "umnt",
          "usdr",
          "uusd"
        ],
        "type": "object",
        "properties": {
          "ukrw": {
            "type": "string",
            "description": "ukrw amount"
          },
          "uluna": {
            "type": "string",
            "description": "uluna amount"
          },
          "umnt": {
            "type": "string",
            "description": "umnt amount"
          },
          "usdr": {
            "type": "string",
            "description": "usdr amount"
          },
          "uusd": {
            "type": "string",
            "description": "uusd amount"
          }
        }
      },
      "getDashboardResult.stakingPool": {
        "title": "getDashboardResult.stakingPool",
        "required": [
          "bondedTokens",
          "notBondedTokens",
          "stakingRatio"
        ],
        "type": "object",
        "properties": {
          "bondedTokens": {
            "type": "string",
            "description": "bonded token amount"
          },
          "notBondedTokens": {
            "type": "string",
            "description": "not bonded token amount"
          },
          "stakingRatio": {
            "type": "string",
            "description": "staking ratio"
          }
        }
      },
      "getDashboardResult.communityPool": {
        "title": "getDashboardResult.communityPool",
        "required": [
          "ukrw",
          "uluna",
          "umnt",
          "usdr",
          "uusd"
        ],
        "type": "object",
        "properties": {
          "ukrw": {
            "type": "string",
            "description": "ukrw amount"
          },
          "uluna": {
            "type": "string",
            "description": "uluna amount"
          },
          "umnt": {
            "type": "string",
            "description": "umnt amount"
          },
          "usdr": {
            "type": "string",
            "description": "usdr amount"
          },
          "uusd": {
            "type": "string",
            "description": "uusd amount"
          }
        }
      },
      "getLastHourTxAndOpsCountResult": {
        "title": "getLastHourTxAndOpsCountResult",
        "required": [
          "last_1h_op",
          "last_1h_tx"
        ],
        "type": "object",
        "properties": {
          "last_1h_op": {
            "type": "number",
            "description": "total ops count in last hour"
          },
          "last_1h_tx": {
            "type": "number",
            "description": "total txs count in last hour"
          }
        }
      },
      "getRegisteredAccountsResult": {
        "title": "getRegisteredAccountsResult",
        "required": [
          "total",
          "periodic",
          "cumulative"
        ],
        "type": "object",
        "properties": {
          "total": {
            "type": "number",
            "description": "total registered accounts in the time period"
          },
          "periodic": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/getRegisteredAccountsResult.periodic"
            },
            "description": "daily periodic account info's"
          },
          "cumulative": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/getRegisteredAccountsResult.cumulative"
            },
            "description": "cumulative registered account count info's"
          }
        }
      },
      "getRegisteredAccountsResult.periodic": {
        "title": "getRegisteredAccountsResult.periodic",
        "required": [
          "datetime",
          "value"
        ],
        "type": "object",
        "properties": {
          "datetime": {
            "type": "number",
            "description": "unix timestamp"
          },
          "value": {
            "type": "number",
            "description": "daily registered account count"
          }
        }
      },
      "getRegisteredAccountsResult.cumulative": {
        "title": "getRegisteredAccountsResult.cumulative",
        "required": [
          "datetime",
          "value"
        ],
        "type": "object",
        "properties": {
          "datetime": {
            "type": "number",
            "description": "unix timestamp"
          },
          "value": {
            "type": "number",
            "description": "daily cumulative account count from genesis"
          }
        }
      },
      "seigniorage": {
        "title": "seigniorage",
        "required": [
          "datetime",
          "seigniorageProceeds",
          "dailyReturn",
          "annualizedReturn"
        ],
        "type": "object",
        "properties": {
          "datetime": {
            "type": "number",
            "description": "unix timestamp"
          },
          "seigniorageProceeds": {
            "type": "string",
            "description": "amount of seigniorage on datetime"
          },
          "dailyReturn": {
            "type": "number",
            "description": "daily return"
          },
          "annualizedReturn": {
            "type": "number",
            "description": "annualized return"
          }
        }
      },
      "stakingHistory": {
        "title": "stakingHistory",
        "required": [
          "datetime",
          "stakingRatio"
        ],
        "type": "object",
        "properties": {
          "datetime": {
            "type": "number",
            "description": "unix timestamp"
          },
          "stakingRatio": {
            "type": "string",
            "description": "staking ratio"
          }
        }
      },
      "getTxVolumeResult": {
        "title": "getTxVolumeResult",
        "required": [
          "cumulative",
          "periodic"
        ],
        "type": "object",
        "properties": {
          "cumulative": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/getTxVolumeResult.cumulative"
            },
            "description": ""
          },
          "periodic": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/getTxVolumeResult.periodic"
            },
            "description": ""
          }
        }
      },
      "getTxVolumeResult.cumulative": {
        "title": "getTxVolumeResult.cumulative",
        "required": [
          "denom",
          "data"
        ],
        "type": "object",
        "properties": {
          "denom": {
            "type": "string",
            "description": "denom name"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/getTxVolumeResult.cumulative.data"
            },
            "description": "history data"
          }
        }
      },
      "getTxVolumeResult.cumulative.data": {
        "title": "getTxVolumeResult.cumulative.data",
        "required": [
          "datetime",
          "txVolume"
        ],
        "type": "object",
        "properties": {
          "datetime": {
            "type": "number",
            "description": "unix time"
          },
          "txVolume": {
            "type": "string",
            "description": "time wise cumulative tx volume"
          }
        }
      },
      "getTxVolumeResult.periodic": {
        "title": "getTxVolumeResult.periodic",
        "required": [
          "denom",
          "data"
        ],
        "type": "object",
        "properties": {
          "denom": {
            "type": "string",
            "description": "denom name"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/getTxVolumeResult.periodic.data"
            },
            "description": ""
          }
        }
      },
      "getTxVolumeResult.periodic.data": {
        "title": "getTxVolumeResult.periodic.data",
        "required": [
          "datetime",
          "txVolume"
        ],
        "type": "object",
        "properties": {
          "datetime": {
            "type": "number",
            "description": "unix time"
          },
          "txVolume": {
            "type": "string",
            "description": "periodic tx volume"
          }
        }
      },
      "getProposalResult": {
        "title": "getProposalResult",
        "required": [
          "id",
          "proposer",
          "type",
          "status",
          "submitTime",
          "title",
          "description",
          "deposit",
          "vote",
          "validatorsNotVoted"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "proposer": {
            "$ref": "#/components/schemas/getProposalResult.proposer"
          },
          "type": {
            "type": "string",
            "description": "Proposal type"
          },
          "status": {
            "type": "string",
            "description": "Proposal status"
          },
          "submitTime": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "deposit": {
            "$ref": "#/components/schemas/getProposalResult.deposit"
          },
          "vote": {
            "$ref": "#/components/schemas/getProposalResult.vote"
          },
          "validatorsNotVoted": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/getProposalResult.validatorsNotVoted"
            },
            "description": ""
          }
        }
      },
      "getProposalResult.proposer": {
        "title": "getProposalResult.proposer",
        "required": [
          "accountAddress"
        ],
        "type": "object",
        "properties": {
          "accountAddress": {
            "type": "string",
            "description": "Proposer information"
          },
          "moniker": {
            "type": "string",
            "description": "Proposer information"
          },
          "operatorAddress": {
            "type": "string",
            "description": "Proposer information"
          }
        }
      },
      "getProposalResult.deposit": {
        "title": "getProposalResult.deposit",
        "required": [
          "depositEndTime",
          "totalDeposit",
          "minDeposit"
        ],
        "type": "object",
        "properties": {
          "depositEndTime": {
            "type": "string"
          },
          "totalDeposit": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/getProposalResult.deposit.totalDeposit"
            },
            "description": "total deposit info"
          },
          "minDeposit": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/getProposalResult.deposit.minDeposit"
            },
            "description": "Minimum deposit"
          }
        }
      },
      "getProposalResult.deposit.totalDeposit": {
        "title": "getProposalResult.deposit.totalDeposit",
        "required": [
          "denom",
          "amount"
        ],
        "type": "object",
        "properties": {
          "denom": {
            "type": "string",
            "description": "denom name"
          },
          "amount": {
            "type": "string",
            "description": "denom amount"
          }
        }
      },
      "getProposalResult.deposit.minDeposit": {
        "title": "getProposalResult.deposit.minDeposit",
        "required": [
          "denom",
          "amount"
        ],
        "type": "object",
        "properties": {
          "denom": {
            "type": "string",
            "description": "Minimum deposit demon"
          },
          "amount": {
            "type": "string",
            "description": "Minimum deposit amount"
          }
        }
      },
      "getProposalResult.vote": {
        "title": "getProposalResult.vote",
        "required": [
          "id",
          "distribution",
          "count",
          "total",
          "votingEndTime",
          "stakedLuna"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "distribution": {
            "$ref": "#/components/schemas/getProposalResult.vote.distribution"
          },
          "count": {
            "$ref": "#/components/schemas/getProposalResult.vote.count"
          },
          "total": {
            "type": "string",
            "description": "Total voted luna"
          },
          "votingEndTime": {
            "type": "string"
          },
          "stakedLuna": {
            "type": "string",
            "description": "Total staked luna"
          }
        }
      },
      "getProposalResult.vote.distribution": {
        "title": "getProposalResult.vote.distribution",
        "required": [
          "Yes",
          "No",
          "NoWithVeto",
          "Abstain"
        ],
        "type": "object",
        "properties": {
          "Yes": {
            "type": "string",
            "description": "vote amount"
          },
          "No": {
            "type": "string",
            "description": "vote amount"
          },
          "NoWithVeto": {
            "type": "string",
            "description": "vote amount"
          },
          "Abstain": {
            "type": "string",
            "description": "vote amount"
          }
        }
      },
      "getProposalResult.vote.count": {
        "title": "getProposalResult.vote.count",
        "required": [
          "Yes",
          "No",
          "NoWithVeto",
          "Abstain"
        ],
        "type": "object",
        "properties": {
          "Yes": {
            "type": "string",
            "description": "vote count"
          },
          "No": {
            "type": "string",
            "description": "vote count"
          },
          "NoWithVeto": {
            "type": "string",
            "description": "vote count"
          },
          "Abstain": {
            "type": "string",
            "description": "vote count"
          }
        }
      },
      "getProposalResult.validatorsNotVoted": {
        "title": "getProposalResult.validatorsNotVoted",
        "required": [
          "operatorAddress",
          "consensusPubKey",
          "description"
        ],
        "type": "object",
        "properties": {
          "operatorAddress": {
            "type": "string"
          },
          "consensusPubKey": {
            "type": "string"
          },
          "description": {
            "$ref": "#/components/schemas/getProposalResult.validatorsNotVoted.description"
          }
        }
      },
      "getProposalResult.validatorsNotVoted.description": {
        "title": "getProposalResult.validatorsNotVoted.description",
        "required": [
          "moniker",
          "identity",
          "website",
          "details",
          "profileIcon"
        ],
        "type": "object",
        "properties": {
          "moniker": {
            "type": "string"
          },
          "identity": {
            "type": "string"
          },
          "website": {
            "type": "string"
          },
          "details": {
            "type": "string"
          },
          "profileIcon": {
            "type": "string"
          }
        }
      },
      "getProposalDepositsResult": {
        "title": "getProposalDepositsResult",
        "required": [
          "limit",
          "deposits"
        ],
        "type": "object",
        "properties": {
          "limit": {
            "type": "number"
          },
          "deposits": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/getProposalDepositsResult.deposits"
            },
            "description": "Deposit list"
          }
        }
      },
      "getProposalDepositsResult.deposits": {
        "title": "getProposalDepositsResult.deposits",
        "required": [
          "txhash",
          "deposit",
          "depositor"
        ],
        "type": "object",
        "properties": {
          "txhash": {
            "type": "string",
            "description": "Txhash of the deposit transaction"
          },
          "deposit": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/getProposalDepositsResult.deposits.deposit"
            },
            "description": ""
          },
          "depositor": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/getProposalDepositsResult.deposits.depositor"
            },
            "description": "Depositor information"
          }
        }
      },
      "getProposalDepositsResult.deposits.deposit": {
        "title": "getProposalDepositsResult.deposits.deposit",
        "required": [
          "amount",
          "denom"
        ],
        "type": "object",
        "properties": {
          "amount": {
            "type": "string",
            "description": "Deposit amount"
          },
          "denom": {
            "type": "string",
            "description": "Deposit denomination"
          }
        }
      },
      "getProposalDepositsResult.deposits.depositor": {
        "title": "getProposalDepositsResult.deposits.depositor",
        "required": [
          "accountAddress",
          "operatorAddress",
          "moniker"
        ],
        "type": "object",
        "properties": {
          "accountAddress": {
            "type": "string"
          },
          "operatorAddress": {
            "type": "string"
          },
          "moniker": {
            "type": "string"
          }
        }
      },
      "getProposalListResult": {
        "title": "getProposalListResult",
        "required": [
          "minDeposit",
          "maxDepositPeriod",
          "votingPeriod",
          "proposals"
        ],
        "type": "object",
        "properties": {
          "minDeposit": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/getProposalListResult.minDeposit"
            },
            "description": "Minimum deposit minimum proposal deposit"
          },
          "maxDepositPeriod": {
            "type": "string",
            "description": "Deposit period"
          },
          "votingPeriod": {
            "type": "string"
          },
          "proposals": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/getProposalListResult.proposals"
            },
            "description": ""
          }
        }
      },
      "getProposalListResult.minDeposit": {
        "title": "getProposalListResult.minDeposit",
        "required": [
          "denom",
          "amount"
        ],
        "type": "object",
        "properties": {
          "denom": {
            "type": "string",
            "description": "denom name"
          },
          "amount": {
            "type": "string",
            "description": "amount"
          }
        }
      },
      "getProposalListResult.proposals": {
        "title": "getProposalListResult.proposals",
        "required": [
          "id",
          "proposer",
          "type",
          "status",
          "submitTime",
          "title",
          "description",
          "deposit",
          "vote"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "proposer": {
            "$ref": "#/components/schemas/getProposalListResult.proposals.proposer"
          },
          "type": {
            "type": "string",
            "description": "Proposal type"
          },
          "status": {
            "type": "string",
            "description": "Proposal status"
          },
          "submitTime": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "deposit": {
            "$ref": "#/components/schemas/getProposalListResult.proposals.deposit"
          },
          "vote": {
            "$ref": "#/components/schemas/getProposalListResult.proposals.vote"
          }
        }
      },
      "getProposalListResult.proposals.proposer": {
        "title": "getProposalListResult.proposals.proposer",
        "required": [
          "accountAddress",
          "moniker"
        ],
        "type": "object",
        "properties": {
          "accountAddress": {
            "type": "string",
            "description": "Proposer address"
          },
          "moniker": {
            "type": "string",
            "description": "Proposer moniker"
          }
        }
      },
      "getProposalListResult.proposals.deposit": {
        "title": "getProposalListResult.proposals.deposit",
        "required": [
          "depositEndTime",
          "totalDeposit"
        ],
        "type": "object",
        "properties": {
          "depositEndTime": {
            "type": "string"
          },
          "totalDeposit": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/getProposalListResult.proposals.deposit.totalDeposit"
            },
            "description": ""
          }
        }
      },
      "getProposalListResult.proposals.deposit.totalDeposit": {
        "title": "getProposalListResult.proposals.deposit.totalDeposit",
        "required": [
          "depositEndTime"
        ],
        "type": "object",
        "properties": {
          "depositEndTime": {
            "type": "string"
          }
        }
      },
      "getProposalListResult.proposals.vote": {
        "title": "getProposalListResult.proposals.vote",
        "required": [
          "id",
          "distribution",
          "count",
          "total",
          "votingEndTime",
          "stakedLuna"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "distribution": {
            "$ref": "#/components/schemas/getProposalListResult.proposals.vote.distribution"
          },
          "count": {
            "$ref": "#/components/schemas/getProposalListResult.proposals.vote.count"
          },
          "total": {
            "type": "string",
            "description": "Total voted luna"
          },
          "votingEndTime": {
            "type": "string"
          },
          "stakedLuna": {
            "type": "string",
            "description": "Total staked luna"
          }
        }
      },
      "getProposalListResult.proposals.vote.distribution": {
        "title": "getProposalListResult.proposals.vote.distribution",
        "required": [
          "Yes",
          "No",
          "NoWithVeto",
          "Abstain"
        ],
        "type": "object",
        "properties": {
          "Yes": {
            "type": "string",
            "description": "vote amount"
          },
          "No": {
            "type": "string",
            "description": "vote amount"
          },
          "NoWithVeto": {
            "type": "string",
            "description": "vote amount"
          },
          "Abstain": {
            "type": "string",
            "description": "vote amount"
          }
        }
      },
      "getProposalListResult.proposals.vote.count": {
        "title": "getProposalListResult.proposals.vote.count",
        "required": [
          "Yes",
          "No",
          "NoWithVeto",
          "Abstain"
        ],
        "type": "object",
        "properties": {
          "Yes": {
            "type": "string",
            "description": "vote count"
          },
          "No": {
            "type": "string",
            "description": "vote count"
          },
          "NoWithVeto": {
            "type": "string",
            "description": "vote count"
          },
          "Abstain": {
            "type": "string",
            "description": "vote count"
          }
        }
      },
      "getProposalVotesResult": {
        "title": "getProposalVotesResult",
        "required": [
          "limit",
          "votes"
        ],
        "type": "object",
        "properties": {
          "limit": {
            "type": "number"
          },
          "votes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/getProposalVotesResult.votes"
            },
            "description": "Vote list"
          }
        }
      },
      "getProposalVotesResult.votes": {
        "title": "getProposalVotesResult.votes",
        "required": [
          "txhash",
          "answer",
          "voter"
        ],
        "type": "object",
        "properties": {
          "txhash": {
            "type": "string",
            "description": "Txhash of the vote transaction"
          },
          "answer": {
            "type": "string",
            "description": "'Yes', 'No', 'NoWithVeto', 'Abstain'"
          },
          "voter": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/getProposalVotesResult.votes.voter"
            },
            "description": "Voter information"
          }
        }
      },
      "getProposalVotesResult.votes.voter": {
        "title": "getProposalVotesResult.votes.voter",
        "required": [
          "accountAddress",
          "operatorAddress",
          "moniker"
        ],
        "type": "object",
        "properties": {
          "accountAddress": {
            "type": "string"
          },
          "operatorAddress": {
            "type": "string"
          },
          "moniker": {
            "type": "string"
          }
        }
      },
      "getMarketPriceResult": {
        "title": "getMarketPriceResult",
        "required": [
          "lastPrice",
          "oneDayVariation",
          "oneDayVariationRate",
          "prices"
        ],
        "type": "object",
        "properties": {
          "lastPrice": {
            "type": "number"
          },
          "oneDayVariation": {
            "type": "string"
          },
          "oneDayVariationRate": {
            "type": "string"
          },
          "prices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/getMarketPriceResult.prices"
            },
            "description": "Price history"
          }
        }
      },
      "getMarketPriceResult.prices": {
        "title": "getMarketPriceResult.prices",
        "required": [
          "denom",
          "datetime",
          "price"
        ],
        "type": "object",
        "properties": {
          "denom": {
            "type": "string",
            "description": "Coin denomination"
          },
          "datetime": {
            "type": "number"
          },
          "price": {
            "type": "number"
          }
        }
      },
      "rates": {
        "title": "rates",
        "required": [
          "denom",
          "swaprate",
          "oneDayVariation",
          "oneDayVariationRate"
        ],
        "type": "object",
        "properties": {
          "denom": {
            "type": "string",
            "description": "Coin denomination"
          },
          "swaprate": {
            "type": "string",
            "description": "Current swap rate"
          },
          "oneDayVariation": {
            "type": "string"
          },
          "oneDayVariationRate": {
            "type": "string"
          }
        }
      },
      "validators": {
        "title": "validators",
        "required": [
          "operatorAddress",
          "consensusPubkey",
          "description",
          "tokens",
          "delegatorShares",
          "votingPower",
          "commissionInfo",
          "upTime",
          "status",
          "rewardsPool",
          "stakingReturn",
          "myDelegation",
          "myUndelegation"
        ],
        "type": "object",
        "properties": {
          "operatorAddress": {
            "type": "string"
          },
          "consensusPubkey": {
            "type": "string"
          },
          "description": {
            "$ref": "#/components/schemas/validators.description"
          },
          "tokens": {
            "type": "string"
          },
          "delegatorShares": {
            "type": "string"
          },
          "votingPower": {
            "$ref": "#/components/schemas/validators.votingPower"
          },
          "commissionInfo": {
            "$ref": "#/components/schemas/validators.commissionInfo"
          },
          "upTime": {
            "type": "number"
          },
          "status": {
            "type": "string"
          },
          "rewardsPool": {
            "$ref": "#/components/schemas/validators.rewardsPool"
          },
          "stakingReturn": {
            "type": "string"
          },
          "myDelegation": {
            "type": "string",
            "description": "The amount of user delegation to this validator"
          },
          "myUndelegation": {
            "type": "string",
            "description": "Undelegation information of user in progress in this validator"
          }
        }
      },
      "validators.description": {
        "title": "validators.description",
        "required": [
          "moniker",
          "identity",
          "website",
          "details",
          "profileIcon"
        ],
        "type": "object",
        "properties": {
          "moniker": {
            "type": "string"
          },
          "identity": {
            "type": "string"
          },
          "website": {
            "type": "string"
          },
          "details": {
            "type": "string"
          },
          "profileIcon": {
            "type": "string"
          }
        }
      },
      "validators.votingPower": {
        "title": "validators.votingPower",
        "required": [
          "amount",
          "weight"
        ],
        "type": "object",
        "properties": {
          "amount": {
            "type": "string"
          },
          "weight": {
            "type": "string"
          }
        }
      },
      "validators.commissionInfo": {
        "title": "validators.commissionInfo",
        "required": [
          "rate",
          "maxRate",
          "maxChangeRate",
          "updateTime"
        ],
        "type": "object",
        "properties": {
          "rate": {
            "type": "string"
          },
          "maxRate": {
            "type": "string"
          },
          "maxChangeRate": {
            "type": "string"
          },
          "updateTime": {
            "type": "string"
          }
        }
      },
      "validators.rewardsPool": {
        "title": "validators.rewardsPool",
        "required": [
          "total",
          "denoms"
        ],
        "type": "object",
        "properties": {
          "total": {
            "type": "string"
          },
          "denoms": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/validators.rewardsPool.denoms"
            },
            "description": ""
          }
        }
      },
      "validators.rewardsPool.denoms": {
        "title": "validators.rewardsPool.denoms",
        "required": [
          "denom",
          "amount"
        ],
        "type": "object",
        "properties": {
          "denom": {
            "type": "string"
          },
          "amount": {
            "type": "string"
          }
        }
      },
      "getStakingForAccountResult": {
        "title": "getStakingForAccountResult",
        "required": [
          "delegationTotal",
          "availableLuna",
          "undelegations",
          "myDelegations",
          "rewards",
          "validators"
        ],
        "type": "object",
        "properties": {
          "delegationTotal": {
            "type": "string",
            "description": "Amount staked by user"
          },
          "availableLuna": {
            "type": "string",
            "description": "Users total luna amount"
          },
          "undelegations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/getStakingForAccountResult.undelegations"
            },
            "description": "Undelegation information in progress by user"
          },
          "myDelegations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/getStakingForAccountResult.myDelegations"
            },
            "description": "Users delegations list"
          },
          "rewards": {
            "$ref": "#/components/schemas/getStakingForAccountResult.rewards"
          },
          "validators": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/getStakingForAccountResult.validators"
            },
            "description": ""
          }
        }
      },
      "getStakingForAccountResult.undelegations": {
        "title": "getStakingForAccountResult.undelegations",
        "required": [
          "amount",
          "creationHeight",
          "releaseTime",
          "validatorAddress",
          "validatorName",
          "validatorStatus"
        ],
        "type": "object",
        "properties": {
          "amount": {
            "type": "string",
            "description": "Undelegation amount"
          },
          "creationHeight": {
            "type": "string",
            "description": "Undelegation creation block height"
          },
          "releaseTime": {
            "type": "string",
            "description": "Amount release time"
          },
          "validatorAddress": {
            "type": "string",
            "description": "Validator address"
          },
          "validatorName": {
            "type": "string",
            "description": "Validators name"
          },
          "validatorStatus": {
            "type": "string",
            "description": "Validator status"
          }
        }
      },
      "getStakingForAccountResult.myDelegations": {
        "title": "getStakingForAccountResult.myDelegations",
        "required": [
          "amountDelegated",
          "totalReward",
          "validatorAddress",
          "validatorName"
        ],
        "type": "object",
        "properties": {
          "amountDelegated": {
            "type": "string",
            "description": "Users delegations list"
          },
          "totalReward": {
            "type": "string",
            "description": "Users delegations list"
          },
          "validatorAddress": {
            "type": "string",
            "description": "Users delegations list"
          },
          "validatorName": {
            "type": "string",
            "description": "Users delegations list"
          }
        }
      },
      "getStakingForAccountResult.rewards": {
        "title": "getStakingForAccountResult.rewards",
        "required": [
          "total",
          "denoms"
        ],
        "type": "object",
        "properties": {
          "total": {
            "type": "string",
            "description": "User's total reward"
          },
          "denoms": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/getStakingForAccountResult.rewards.denoms"
            },
            "description": "User's reward by denoms"
          }
        }
      },
      "getStakingForAccountResult.rewards.denoms": {
        "title": "getStakingForAccountResult.rewards.denoms",
        "required": [
          "denom",
          "amount"
        ],
        "type": "object",
        "properties": {
          "denom": {
            "type": "string",
            "description": "reward denom"
          },
          "amount": {
            "type": "string",
            "description": "reward amount"
          }
        }
      },
      "getStakingForAccountResult.validators": {
        "title": "getStakingForAccountResult.validators",
        "required": [
          "operatorAddress",
          "consensusPubkey",
          "description",
          "tokens",
          "delegatorShares",
          "votingPower",
          "commissionInfo",
          "upTime",
          "status",
          "rewardsPool",
          "stakingReturn",
          "myDelegation",
          "myUndelegation"
        ],
        "type": "object",
        "properties": {
          "operatorAddress": {
            "type": "string"
          },
          "consensusPubkey": {
            "type": "string"
          },
          "description": {
            "$ref": "#/components/schemas/getStakingForAccountResult.validators.description"
          },
          "tokens": {
            "type": "string"
          },
          "delegatorShares": {
            "type": "string"
          },
          "votingPower": {
            "$ref": "#/components/schemas/getStakingForAccountResult.validators.votingPower"
          },
          "commissionInfo": {
            "$ref": "#/components/schemas/getStakingForAccountResult.validators.commissionInfo"
          },
          "upTime": {
            "type": "number"
          },
          "status": {
            "type": "string"
          },
          "rewardsPool": {
            "$ref": "#/components/schemas/getStakingForAccountResult.validators.rewardsPool"
          },
          "stakingReturn": {
            "type": "string"
          },
          "myDelegation": {
            "type": "string",
            "description": "The amount of user delegation to this validator"
          },
          "myUndelegation": {
            "type": "string",
            "description": "Undelegation information of user in progress in this validator"
          }
        }
      },
      "getStakingForAccountResult.validators.description": {
        "title": "getStakingForAccountResult.validators.description",
        "required": [
          "moniker",
          "identity",
          "website",
          "details",
          "profileIcon"
        ],
        "type": "object",
        "properties": {
          "moniker": {
            "type": "string"
          },
          "identity": {
            "type": "string"
          },
          "website": {
            "type": "string"
          },
          "details": {
            "type": "string"
          },
          "profileIcon": {
            "type": "string"
          }
        }
      },
      "getStakingForAccountResult.validators.votingPower": {
        "title": "getStakingForAccountResult.validators.votingPower",
        "required": [
          "amount",
          "weight"
        ],
        "type": "object",
        "properties": {
          "amount": {
            "type": "string"
          },
          "weight": {
            "type": "string"
          }
        }
      },
      "getStakingForAccountResult.validators.commissionInfo": {
        "title": "getStakingForAccountResult.validators.commissionInfo",
        "required": [
          "rate",
          "maxRate",
          "maxChangeRate",
          "updateTime"
        ],
        "type": "object",
        "properties": {
          "rate": {
            "type": "string"
          },
          "maxRate": {
            "type": "string"
          },
          "maxChangeRate": {
            "type": "string"
          },
          "updateTime": {
            "type": "string"
          }
        }
      },
      "getStakingForAccountResult.validators.rewardsPool": {
        "title": "getStakingForAccountResult.validators.rewardsPool",
        "required": [
          "total",
          "denoms"
        ],
        "type": "object",
        "properties": {
          "total": {
            "type": "string"
          },
          "denoms": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/getStakingForAccountResult.validators.rewardsPool.denoms"
            },
            "description": ""
          }
        }
      },
      "getStakingForAccountResult.validators.rewardsPool.denoms": {
        "title": "getStakingForAccountResult.validators.rewardsPool.denoms",
        "required": [
          "denom",
          "amount"
        ],
        "type": "object",
        "properties": {
          "denom": {
            "type": "string"
          },
          "amount": {
            "type": "string"
          }
        }
      },
      "getValidatorClaimsResult": {
        "title": "getValidatorClaimsResult",
        "required": [
          "page",
          "limit",
          "claims"
        ],
        "type": "object",
        "properties": {
          "page": {
            "type": "number"
          },
          "limit": {
            "type": "number"
          },
          "claims": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/getValidatorClaimsResult.claims"
            },
            "description": "Claim list"
          }
        }
      },
      "getValidatorClaimsResult.claims": {
        "title": "getValidatorClaimsResult.claims",
        "required": [
          "chainId",
          "txhash",
          "type",
          "amount",
          "timestamp"
        ],
        "type": "object",
        "properties": {
          "chainId": {
            "type": "string"
          },
          "txhash": {
            "type": "string",
            "description": "Tx hash"
          },
          "type": {
            "type": "string",
            "description": "Claim type"
          },
          "amount": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/getValidatorClaimsResult.claims.amount"
            },
            "description": ""
          },
          "timestamp": {
            "type": "string",
            "description": "Tx timestamp"
          }
        }
      },
      "getValidatorClaimsResult.claims.amount": {
        "title": "getValidatorClaimsResult.claims.amount",
        "required": [
          "denom",
          "amount"
        ],
        "type": "object",
        "properties": {
          "denom": {
            "type": "string"
          },
          "amount": {
            "type": "string"
          }
        }
      },
      "getValidatorDelegationsResult": {
        "title": "getValidatorDelegationsResult",
        "required": [
          "page",
          "limit",
          "events"
        ],
        "type": "object",
        "properties": {
          "page": {
            "type": "number"
          },
          "limit": {
            "type": "number"
          },
          "events": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/getValidatorDelegationsResult.events"
            },
            "description": "Delegation event list"
          }
        }
      },
      "getValidatorDelegationsResult.events": {
        "title": "getValidatorDelegationsResult.events",
        "required": [
          "chainId",
          "txhash",
          "type",
          "amount",
          "timestamp"
        ],
        "type": "object",
        "properties": {
          "chainId": {
            "type": "string"
          },
          "txhash": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "description": "Event type"
          },
          "amount": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/getValidatorDelegationsResult.events.amount"
            },
            "description": ""
          },
          "timestamp": {
            "type": "string"
          }
        }
      },
      "getValidatorDelegationsResult.events.amount": {
        "title": "getValidatorDelegationsResult.events.amount",
        "required": [
          "denom",
          "amount"
        ],
        "type": "object",
        "properties": {
          "denom": {
            "type": "string"
          },
          "amount": {
            "type": "string"
          }
        }
      },
      "getValidatorDelegatorsResult": {
        "title": "getValidatorDelegatorsResult",
        "required": [
          "page",
          "limit",
          "delegator"
        ],
        "type": "object",
        "properties": {
          "page": {
            "type": "number"
          },
          "limit": {
            "type": "number"
          },
          "delegator": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/getValidatorDelegatorsResult.delegator"
            },
            "description": "Delegator list"
          }
        }
      },
      "getValidatorDelegatorsResult.delegator": {
        "title": "getValidatorDelegatorsResult.delegator",
        "required": [
          "address",
          "amount",
          "weight"
        ],
        "type": "object",
        "properties": {
          "address": {
            "type": "string",
            "description": "Delegator address"
          },
          "amount": {
            "type": "string",
            "description": "Amount of luna delegated"
          },
          "weight": {
            "type": "string"
          }
        }
      },
      "getValidatorDetailResult": {
        "title": "getValidatorDetailResult",
        "required": [
          "operatorAddress",
          "consensusPubkey",
          "description",
          "tokens",
          "delegatorShares",
          "votingPower",
          "commissionInfo",
          "upTime",
          "status",
          "rewardsPool",
          "stakingReturn",
          "accountAddress",
          "selfDelegation",
          "myDelegation",
          "myUndelegation",
          "myDelegatable",
          "myRewards"
        ],
        "type": "object",
        "properties": {
          "operatorAddress": {
            "type": "string"
          },
          "consensusPubkey": {
            "type": "string"
          },
          "description": {
            "$ref": "#/components/schemas/getValidatorDetailResult.description"
          },
          "tokens": {
            "type": "string"
          },
          "delegatorShares": {
            "type": "string"
          },
          "votingPower": {
            "$ref": "#/components/schemas/getValidatorDetailResult.votingPower"
          },
          "commissionInfo": {
            "$ref": "#/components/schemas/getValidatorDetailResult.commissionInfo"
          },
          "upTime": {
            "type": "number"
          },
          "status": {
            "type": "string"
          },
          "rewardsPool": {
            "$ref": "#/components/schemas/getValidatorDetailResult.rewardsPool"
          },
          "stakingReturn": {
            "type": "string"
          },
          "accountAddress": {
            "type": "string"
          },
          "selfDelegation": {
            "$ref": "#/components/schemas/getValidatorDetailResult.selfDelegation"
          },
          "myDelegation": {
            "type": "string",
            "description": "total delegation amount"
          },
          "myUndelegation": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/getValidatorDetailResult.myUndelegation"
            },
            "description": "user undelegations"
          },
          "myDelegatable": {
            "type": "string",
            "description": "delegateable amount"
          },
          "myRewards": {
            "$ref": "#/components/schemas/getValidatorDetailResult.myRewards"
          }
        }
      },
      "getValidatorDetailResult.description": {
        "title": "getValidatorDetailResult.description",
        "required": [
          "moniker",
          "identity",
          "website",
          "details",
          "profileIcon"
        ],
        "type": "object",
        "properties": {
          "moniker": {
            "type": "string"
          },
          "identity": {
            "type": "string"
          },
          "website": {
            "type": "string"
          },
          "details": {
            "type": "string"
          },
          "profileIcon": {
            "type": "string"
          }
        }
      },
      "getValidatorDetailResult.votingPower": {
        "title": "getValidatorDetailResult.votingPower",
        "required": [
          "amount",
          "weight"
        ],
        "type": "object",
        "properties": {
          "amount": {
            "type": "string",
            "description": "string int format"
          },
          "weight": {
            "type": "string",
            "description": "bit int"
          }
        }
      },
      "getValidatorDetailResult.commissionInfo": {
        "title": "getValidatorDetailResult.commissionInfo",
        "required": [
          "rate",
          "maxRate",
          "maxChangeRate",
          "updateTime"
        ],
        "type": "object",
        "properties": {
          "rate": {
            "type": "string"
          },
          "maxRate": {
            "type": "string"
          },
          "maxChangeRate": {
            "type": "string"
          },
          "updateTime": {
            "type": "string"
          }
        }
      },
      "getValidatorDetailResult.rewardsPool": {
        "title": "getValidatorDetailResult.rewardsPool",
        "required": [
          "total",
          "denoms"
        ],
        "type": "object",
        "properties": {
          "total": {
            "type": "string"
          },
          "denoms": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/getValidatorDetailResult.rewardsPool.denoms"
            },
            "description": "{denom: string, amount: string} format"
          }
        }
      },
      "getValidatorDetailResult.rewardsPool.denoms": {
        "title": "getValidatorDetailResult.rewardsPool.denoms",
        "required": [
          "denom",
          "amount"
        ],
        "type": "object",
        "properties": {
          "denom": {
            "type": "string"
          },
          "amount": {
            "type": "string"
          }
        }
      },
      "getValidatorDetailResult.selfDelegation": {
        "title": "getValidatorDetailResult.selfDelegation",
        "required": [
          "amount",
          "weight"
        ],
        "type": "object",
        "properties": {
          "amount": {
            "type": "string"
          },
          "weight": {
            "type": "string"
          }
        }
      },
      "getValidatorDetailResult.myUndelegation": {
        "title": "getValidatorDetailResult.myUndelegation",
        "required": [
          "releaseTime",
          "amount",
          "validatorName",
          "validatorAddress",
          "creationHeight"
        ],
        "type": "object",
        "properties": {
          "releaseTime": {
            "type": "string",
            "description": "undelegation release date time"
          },
          "amount": {
            "type": "string",
            "description": "undelegation amount"
          },
          "validatorName": {
            "type": "string",
            "description": "validator name"
          },
          "validatorAddress": {
            "type": "string",
            "description": "validator address"
          },
          "creationHeight": {
            "type": "string",
            "description": "block height"
          }
        }
      },
      "getValidatorDetailResult.myRewards": {
        "title": "getValidatorDetailResult.myRewards",
        "required": [
          "total",
          "denoms"
        ],
        "type": "object",
        "properties": {
          "total": {
            "type": "string",
            "description": "total reward"
          },
          "denoms": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/getValidatorDetailResult.myRewards.denoms"
            },
            "description": "reward by denoms list"
          }
        }
      },
      "getValidatorDetailResult.myRewards.denoms": {
        "title": "getValidatorDetailResult.myRewards.denoms",
        "required": [
          "denom",
          "amount",
          "adjustedAmount"
        ],
        "type": "object",
        "properties": {
          "denom": {
            "type": "string",
            "description": "denom name"
          },
          "amount": {
            "type": "string",
            "description": "reward amount"
          },
          "adjustedAmount": {
            "type": "string",
            "description": "reward amount adjusted by luna price"
          }
        }
      },
      "validator15": {
        "title": "validator15",
        "required": [
          "operatorAddress",
          "consensusPubkey",
          "description",
          "tokens",
          "delegatorShares",
          "votingPower",
          "commissionInfo",
          "upTime",
          "status",
          "rewardsPool",
          "stakingReturn",
          "accountAddress",
          "selfDelegation"
        ],
        "type": "object",
        "properties": {
          "operatorAddress": {
            "type": "string"
          },
          "consensusPubkey": {
            "type": "string"
          },
          "description": {
            "$ref": "#/components/schemas/validator.description"
          },
          "tokens": {
            "type": "string"
          },
          "delegatorShares": {
            "type": "string"
          },
          "votingPower": {
            "$ref": "#/components/schemas/validator.votingPower"
          },
          "commissionInfo": {
            "$ref": "#/components/schemas/validator.commissionInfo"
          },
          "upTime": {
            "type": "number"
          },
          "status": {
            "type": "string"
          },
          "rewardsPool": {
            "$ref": "#/components/schemas/validator.rewardsPool"
          },
          "stakingReturn": {
            "type": "string"
          },
          "accountAddress": {
            "type": "string"
          },
          "selfDelegation": {
            "$ref": "#/components/schemas/validator.selfDelegation"
          }
        }
      },
      "validator.description": {
        "title": "validator.description",
        "required": [
          "moniker",
          "identity",
          "website",
          "details",
          "profileIcon"
        ],
        "type": "object",
        "properties": {
          "moniker": {
            "type": "string"
          },
          "identity": {
            "type": "string"
          },
          "website": {
            "type": "string"
          },
          "details": {
            "type": "string"
          },
          "profileIcon": {
            "type": "string"
          }
        }
      },
      "validator.votingPower": {
        "title": "validator.votingPower",
        "required": [
          "amount",
          "weight"
        ],
        "type": "object",
        "properties": {
          "amount": {
            "type": "string"
          },
          "weight": {
            "type": "string"
          }
        }
      },
      "validator.commissionInfo": {
        "title": "validator.commissionInfo",
        "required": [
          "rate",
          "maxRate",
          "maxChangeRate",
          "updateTime"
        ],
        "type": "object",
        "properties": {
          "rate": {
            "type": "string"
          },
          "maxRate": {
            "type": "string"
          },
          "maxChangeRate": {
            "type": "string"
          },
          "updateTime": {
            "type": "string"
          }
        }
      },
      "validator.rewardsPool": {
        "title": "validator.rewardsPool",
        "required": [
          "total",
          "denoms"
        ],
        "type": "object",
        "properties": {
          "total": {
            "type": "string"
          },
          "denoms": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/validator.rewardsPool.denoms"
            },
            "description": "{denom: string, amount: string} format"
          }
        }
      },
      "validator.rewardsPool.denoms": {
        "title": "validator.rewardsPool.denoms",
        "required": [
          "denom",
          "amount"
        ],
        "type": "object",
        "properties": {
          "denom": {
            "type": "string"
          },
          "amount": {
            "type": "string"
          }
        }
      },
      "validator.selfDelegation": {
        "title": "validator.selfDelegation",
        "required": [
          "amount",
          "weight"
        ],
        "type": "object",
        "properties": {
          "amount": {
            "type": "string"
          },
          "weight": {
            "type": "string"
          }
        }
      },
      "getGasPricesResult": {
        "title": "getGasPricesResult",
        "required": [
          "uluna",
          "usdr",
          "uusd",
          "ukrw",
          "umnt"
        ],
        "type": "object",
        "properties": {
          "uluna": {
            "type": "string",
            "description": "gas price in uluna"
          },
          "usdr": {
            "type": "string",
            "description": "gas price in usdr"
          },
          "uusd": {
            "type": "string",
            "description": "gas price in uusd"
          },
          "ukrw": {
            "type": "string",
            "description": "gas price in ukrw"
          },
          "umnt": {
            "type": "string",
            "description": "gas price in umnt"
          }
        }
      },
      "txs": {
        "title": "txs",
        "required": [
          "timestamp",
          "txhash",
          "tx"
        ],
        "type": "object",
        "properties": {
          "timestamp": {
            "type": "string",
            "description": "Last seen"
          },
          "txhash": {
            "type": "string"
          },
          "tx": {
            "$ref": "#/components/schemas/txs.tx"
          }
        }
      },
      "txs.tx": {
        "title": "txs.tx",
        "required": [
          "type",
          "value"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "value": {
            "$ref": "#/components/schemas/txs.tx.value"
          }
        }
      },
      "txs.tx.value": {
        "title": "txs.tx.value",
        "required": [
          "fee",
          "memo",
          "msg",
          "signatures"
        ],
        "type": "object",
        "properties": {
          "fee": {
            "$ref": "#/components/schemas/txs.tx.value.fee"
          },
          "memo": {
            "type": "string"
          },
          "msg": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/txs.tx.value.msg"
            },
            "description": ""
          },
          "signatures": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/txs.tx.value.signatures"
            },
            "description": ""
          }
        }
      },
      "txs.tx.value.fee": {
        "title": "txs.tx.value.fee",
        "required": [
          "gas",
          "amount"
        ],
        "type": "object",
        "properties": {
          "gas": {
            "type": "string"
          },
          "amount": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/txs.tx.value.fee.amount"
            },
            "description": ""
          }
        }
      },
      "txs.tx.value.fee.amount": {
        "title": "txs.tx.value.fee.amount",
        "required": [
          "denom",
          "amount"
        ],
        "type": "object",
        "properties": {
          "denom": {
            "type": "string"
          },
          "amount": {
            "type": "string"
          }
        }
      },
      "txs.tx.value.msg": {
        "title": "txs.tx.value.msg",
        "required": [
          "type",
          "value"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "value": {
            "$ref": "#/components/schemas/txs.tx.value.msg.value"
          }
        }
      },
      "txs.tx.value.msg.value": {
        "title": "txs.tx.value.msg.value",
        "required": [
          "inputs",
          "outputs"
        ],
        "type": "object",
        "properties": {
          "inputs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/txs.tx.value.msg.value.inputs"
            },
            "description": ""
          },
          "outputs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/txs.tx.value.msg.value.outputs"
            },
            "description": ""
          }
        }
      },
      "txs.tx.value.msg.value.inputs": {
        "title": "txs.tx.value.msg.value.inputs",
        "required": [
          "address",
          "coins"
        ],
        "type": "object",
        "properties": {
          "address": {
            "type": "string"
          },
          "coins": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/txs.tx.value.msg.value.inputs.coins"
            },
            "description": ""
          }
        }
      },
      "txs.tx.value.msg.value.inputs.coins": {
        "title": "txs.tx.value.msg.value.inputs.coins",
        "required": [
          "deonm",
          "amount"
        ],
        "type": "object",
        "properties": {
          "deonm": {
            "type": "string"
          },
          "amount": {
            "type": "string"
          }
        }
      },
      "txs.tx.value.msg.value.outputs": {
        "title": "txs.tx.value.msg.value.outputs",
        "required": [
          "address",
          "coins"
        ],
        "type": "object",
        "properties": {
          "address": {
            "type": "string"
          },
          "coins": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/txs.tx.value.msg.value.outputs.coins"
            },
            "description": ""
          }
        }
      },
      "txs.tx.value.msg.value.outputs.coins": {
        "title": "txs.tx.value.msg.value.outputs.coins",
        "required": [
          "deonm",
          "amount"
        ],
        "type": "object",
        "properties": {
          "deonm": {
            "type": "string"
          },
          "amount": {
            "type": "string"
          }
        }
      },
      "txs.tx.value.signatures": {
        "title": "txs.tx.value.signatures",
        "required": [
          "signature",
          "pub_key"
        ],
        "type": "object",
        "properties": {
          "signature": {
            "type": "string"
          },
          "pub_key": {
            "$ref": "#/components/schemas/txs.tx.value.signatures.pub_key"
          }
        }
      },
      "txs.tx.value.signatures.pub_key": {
        "title": "txs.tx.value.signatures.pub_key",
        "required": [
          "type",
          "value"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "getMempoolByHashResult": {
        "title": "getMempoolByHashResult",
        "required": [
          "timestamp",
          "txhash",
          "tx"
        ],
        "type": "object",
        "properties": {
          "timestamp": {
            "type": "string",
            "description": "Last seen"
          },
          "txhash": {
            "type": "string"
          },
          "tx": {
            "$ref": "#/components/schemas/getMempoolByHashResult.tx"
          }
        }
      },
      "getMempoolByHashResult.tx": {
        "title": "getMempoolByHashResult.tx",
        "required": [
          "type",
          "value"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "value": {
            "$ref": "#/components/schemas/getMempoolByHashResult.tx.value"
          }
        }
      },
      "getMempoolByHashResult.tx.value": {
        "title": "getMempoolByHashResult.tx.value",
        "required": [
          "fee",
          "memo",
          "msg",
          "signatures"
        ],
        "type": "object",
        "properties": {
          "fee": {
            "$ref": "#/components/schemas/getMempoolByHashResult.tx.value.fee"
          },
          "memo": {
            "type": "string"
          },
          "msg": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/getMempoolByHashResult.tx.value.msg"
            },
            "description": ""
          },
          "signatures": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/getMempoolByHashResult.tx.value.signatures"
            },
            "description": ""
          }
        }
      },
      "getMempoolByHashResult.tx.value.fee": {
        "title": "getMempoolByHashResult.tx.value.fee",
        "required": [
          "amount",
          "gas"
        ],
        "type": "object",
        "properties": {
          "amount": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/getMempoolByHashResult.tx.value.fee.amount"
            },
            "description": ""
          },
          "gas": {
            "type": "string"
          }
        }
      },
      "getMempoolByHashResult.tx.value.fee.amount": {
        "title": "getMempoolByHashResult.tx.value.fee.amount",
        "required": [
          "denom",
          "amount"
        ],
        "type": "object",
        "properties": {
          "denom": {
            "type": "string"
          },
          "amount": {
            "type": "string"
          }
        }
      },
      "getMempoolByHashResult.tx.value.msg": {
        "title": "getMempoolByHashResult.tx.value.msg",
        "required": [
          "type",
          "value"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "value": {
            "$ref": "#/components/schemas/getMempoolByHashResult.tx.value.msg.value"
          }
        }
      },
      "getMempoolByHashResult.tx.value.msg.value": {
        "title": "getMempoolByHashResult.tx.value.msg.value",
        "required": [
          "amount"
        ],
        "type": "object",
        "properties": {
          "amount": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/getMempoolByHashResult.tx.value.msg.value.amount"
            },
            "description": ""
          }
        }
      },
      "getMempoolByHashResult.tx.value.msg.value.amount": {
        "title": "getMempoolByHashResult.tx.value.msg.value.amount",
        "required": [
          "denom",
          "amount"
        ],
        "type": "object",
        "properties": {
          "denom": {
            "type": "string"
          },
          "amount": {
            "type": "string"
          }
        }
      },
      "getMempoolByHashResult.tx.value.signatures": {
        "title": "getMempoolByHashResult.tx.value.signatures",
        "required": [
          "pubKey",
          "signature"
        ],
        "type": "object",
        "properties": {
          "pubKey": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/getMempoolByHashResult.tx.value.signatures.pubKey"
            },
            "description": ""
          },
          "signature": {
            "type": "string"
          }
        }
      },
      "getMempoolByHashResult.tx.value.signatures.pubKey": {
        "title": "getMempoolByHashResult.tx.value.signatures.pubKey",
        "required": [
          "type",
          "value"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "getTxResult": {
        "title": "getTxResult",
        "required": [
          "tx",
          "events",
          "logs",
          "height",
          "txhash",
          "raw_log",
          "gas_used",
          "timestamp",
          "gas_wanted",
          "chainId"
        ],
        "type": "object",
        "properties": {
          "tx": {
            "$ref": "#/components/schemas/getTxResult.tx"
          },
          "events": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/getTxResult.events"
            },
            "description": ""
          },
          "logs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/getTxResult.logs"
            },
            "description": "tx logs"
          },
          "height": {
            "type": "string"
          },
          "txhash": {
            "type": "string"
          },
          "raw_log": {
            "type": "string"
          },
          "gas_used": {
            "type": "string"
          },
          "timestamp": {
            "type": "string"
          },
          "gas_wanted": {
            "type": "string"
          },
          "chainId": {
            "type": "string"
          }
        }
      },
      "getTxResult.tx": {
        "title": "getTxResult.tx",
        "required": [
          "type",
          "value"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "value": {
            "$ref": "#/components/schemas/getTxResult.tx.value"
          }
        }
      },
      "getTxResult.tx.value": {
        "title": "getTxResult.tx.value",
        "required": [
          "fee",
          "memo",
          "msg",
          "signatures"
        ],
        "type": "object",
        "properties": {
          "fee": {
            "$ref": "#/components/schemas/getTxResult.tx.value.fee"
          },
          "memo": {
            "type": "string"
          },
          "msg": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/getTxResult.tx.value.msg"
            },
            "description": ""
          },
          "signatures": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/getTxResult.tx.value.signatures"
            },
            "description": ""
          }
        }
      },
      "getTxResult.tx.value.fee": {
        "title": "getTxResult.tx.value.fee",
        "required": [
          "amount",
          "gas"
        ],
        "type": "object",
        "properties": {
          "amount": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/getTxResult.tx.value.fee.amount"
            },
            "description": ""
          },
          "gas": {
            "type": "string"
          }
        }
      },
      "getTxResult.tx.value.fee.amount": {
        "title": "getTxResult.tx.value.fee.amount",
        "required": [
          "denom",
          "amount"
        ],
        "type": "object",
        "properties": {
          "denom": {
            "type": "string"
          },
          "amount": {
            "type": "string"
          }
        }
      },
      "getTxResult.tx.value.msg": {
        "title": "getTxResult.tx.value.msg",
        "required": [
          "type",
          "value"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "value": {
            "$ref": "#/components/schemas/getTxResult.tx.value.msg.value"
          }
        }
      },
      "getTxResult.tx.value.msg.value": {
        "title": "getTxResult.tx.value.msg.value",
        "required": [
          "amount"
        ],
        "type": "object",
        "properties": {
          "amount": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/getTxResult.tx.value.msg.value.amount"
            },
            "description": ""
          }
        }
      },
      "getTxResult.tx.value.msg.value.amount": {
        "title": "getTxResult.tx.value.msg.value.amount",
        "required": [
          "denom",
          "amount"
        ],
        "type": "object",
        "properties": {
          "denom": {
            "type": "string"
          },
          "amount": {
            "type": "string"
          }
        }
      },
      "getTxResult.tx.value.signatures": {
        "title": "getTxResult.tx.value.signatures",
        "required": [
          "pubKey",
          "signature"
        ],
        "type": "object",
        "properties": {
          "pubKey": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/getTxResult.tx.value.signatures.pubKey"
            },
            "description": ""
          },
          "signature": {
            "type": "string"
          }
        }
      },
      "getTxResult.tx.value.signatures.pubKey": {
        "title": "getTxResult.tx.value.signatures.pubKey",
        "required": [
          "type",
          "value"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "getTxResult.events": {
        "title": "getTxResult.events",
        "required": [
          "type",
          "attributes"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "attributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/getTxResult.events.attributes"
            },
            "description": ""
          }
        }
      },
      "getTxResult.events.attributes": {
        "title": "getTxResult.events.attributes",
        "required": [
          "key",
          "value"
        ],
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "getTxResult.logs": {
        "title": "getTxResult.logs",
        "required": [
          "events",
          "log",
          "msg_index",
          "success"
        ],
        "type": "object",
        "properties": {
          "events": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/getTxResult.logs.events"
            },
            "description": ""
          },
          "log": {
            "$ref": "#/components/schemas/getTxResult.logs.log"
          },
          "msg_index": {
            "type": "number"
          },
          "success": {
            "type": "boolean"
          }
        }
      },
      "getTxResult.logs.events": {
        "title": "getTxResult.logs.events",
        "required": [
          "attributes",
          "types"
        ],
        "type": "object",
        "properties": {
          "attributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/getTxResult.logs.events.attributes"
            },
            "description": ""
          },
          "types": {
            "type": "string"
          }
        }
      },
      "getTxResult.logs.events.attributes": {
        "title": "getTxResult.logs.events.attributes",
        "required": [
          "key",
          "value"
        ],
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "getTxResult.logs.log": {
        "title": "getTxResult.logs.log",
        "required": [
          "tax"
        ],
        "type": "object",
        "properties": {
          "tax": {
            "type": "string"
          }
        }
      },
      "getTxListResult": {
        "title": "getTxListResult",
        "required": [
          "limit",
          "next",
          "txs"
        ],
        "type": "object",
        "properties": {
          "limit": {
            "type": "number",
            "description": "Size of page"
          },
          "next": {
            "type": "number",
            "description": "Offset of next page"
          },
          "txs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/getTxListResult.txs"
            },
            "description": "tx list"
          }
        }
      },
      "getTxListResult.txs": {
        "title": "getTxListResult.txs",
        "required": [
          "tx",
          "events",
          "logs",
          "height",
          "txhash",
          "raw_log",
          "gas_used",
          "timestamp",
          "gas_wanted"
        ],
        "type": "object",
        "properties": {
          "tx": {
            "$ref": "#/components/schemas/getTxListResult.txs.tx"
          },
          "events": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/getTxListResult.txs.events"
            },
            "description": "events of tx"
          },
          "logs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/getTxListResult.txs.logs"
            },
            "description": "tx logs"
          },
          "height": {
            "type": "string",
            "description": "block height"
          },
          "txhash": {
            "type": "string",
            "description": "tx hash"
          },
          "raw_log": {
            "type": "string",
            "description": "tx raw log"
          },
          "gas_used": {
            "type": "string",
            "description": "total gas used in tx"
          },
          "timestamp": {
            "type": "string",
            "description": "timestamp tx in utc 0"
          },
          "gas_wanted": {
            "type": "string",
            "description": "gas wanted"
          }
        }
      },
      "getTxListResult.txs.tx": {
        "title": "getTxListResult.txs.tx",
        "required": [
          "type",
          "value"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "value": {
            "$ref": "#/components/schemas/getTxListResult.txs.tx.value"
          }
        }
      },
      "getTxListResult.txs.tx.value": {
        "title": "getTxListResult.txs.tx.value",
        "required": [
          "fee",
          "memo",
          "msg",
          "signatures"
        ],
        "type": "object",
        "properties": {
          "fee": {
            "$ref": "#/components/schemas/getTxListResult.txs.tx.value.fee"
          },
          "memo": {
            "type": "string"
          },
          "msg": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/getTxListResult.txs.tx.value.msg"
            },
            "description": ""
          },
          "signatures": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/getTxListResult.txs.tx.value.signatures"
            },
            "description": ""
          }
        }
      },
      "getTxListResult.txs.tx.value.fee": {
        "title": "getTxListResult.txs.tx.value.fee",
        "required": [
          "gas",
          "amount"
        ],
        "type": "object",
        "properties": {
          "gas": {
            "type": "string"
          },
          "amount": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/getTxListResult.txs.tx.value.fee.amount"
            },
            "description": ""
          }
        }
      },
      "getTxListResult.txs.tx.value.fee.amount": {
        "title": "getTxListResult.txs.tx.value.fee.amount",
        "required": [
          "denom",
          "amount"
        ],
        "type": "object",
        "properties": {
          "denom": {
            "type": "string"
          },
          "amount": {
            "type": "string"
          }
        }
      },
      "getTxListResult.txs.tx.value.msg": {
        "title": "getTxListResult.txs.tx.value.msg",
        "required": [
          "type",
          "value"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "value": {
            "$ref": "#/components/schemas/getTxListResult.txs.tx.value.msg.value"
          }
        }
      },
      "getTxListResult.txs.tx.value.msg.value": {
        "title": "getTxListResult.txs.tx.value.msg.value",
        "required": [
          "inputs",
          "outputs"
        ],
        "type": "object",
        "properties": {
          "inputs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/getTxListResult.txs.tx.value.msg.value.inputs"
            },
            "description": ""
          },
          "outputs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/getTxListResult.txs.tx.value.msg.value.outputs"
            },
            "description": ""
          }
        }
      },
      "getTxListResult.txs.tx.value.msg.value.inputs": {
        "title": "getTxListResult.txs.tx.value.msg.value.inputs",
        "required": [
          "address",
          "coins"
        ],
        "type": "object",
        "properties": {
          "address": {
            "type": "string"
          },
          "coins": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/getTxListResult.txs.tx.value.msg.value.inputs.coins"
            },
            "description": ""
          }
        }
      },
      "getTxListResult.txs.tx.value.msg.value.inputs.coins": {
        "title": "getTxListResult.txs.tx.value.msg.value.inputs.coins",
        "required": [
          "deonm",
          "amount"
        ],
        "type": "object",
        "properties": {
          "deonm": {
            "type": "string"
          },
          "amount": {
            "type": "string"
          }
        }
      },
      "getTxListResult.txs.tx.value.msg.value.outputs": {
        "title": "getTxListResult.txs.tx.value.msg.value.outputs",
        "required": [
          "address",
          "coins"
        ],
        "type": "object",
        "properties": {
          "address": {
            "type": "string"
          },
          "coins": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/getTxListResult.txs.tx.value.msg.value.outputs.coins"
            },
            "description": ""
          }
        }
      },
      "getTxListResult.txs.tx.value.msg.value.outputs.coins": {
        "title": "getTxListResult.txs.tx.value.msg.value.outputs.coins",
        "required": [
          "deonm",
          "amount"
        ],
        "type": "object",
        "properties": {
          "deonm": {
            "type": "string"
          },
          "amount": {
            "type": "string"
          }
        }
      },
      "getTxListResult.txs.tx.value.signatures": {
        "title": "getTxListResult.txs.tx.value.signatures",
        "required": [
          "signature",
          "pub_key"
        ],
        "type": "object",
        "properties": {
          "signature": {
            "type": "string"
          },
          "pub_key": {
            "$ref": "#/components/schemas/getTxListResult.txs.tx.value.signatures.pub_key"
          }
        }
      },
      "getTxListResult.txs.tx.value.signatures.pub_key": {
        "title": "getTxListResult.txs.tx.value.signatures.pub_key",
        "required": [
          "type",
          "value"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "getTxListResult.txs.events": {
        "title": "getTxListResult.txs.events",
        "required": [
          "type",
          "attributes"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "attributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/getTxListResult.txs.events.attributes"
            },
            "description": ""
          }
        }
      },
      "getTxListResult.txs.events.attributes": {
        "title": "getTxListResult.txs.events.attributes",
        "required": [
          "key",
          "value"
        ],
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "getTxListResult.txs.logs": {
        "title": "getTxListResult.txs.logs",
        "required": [
          "msg_index",
          "success",
          "log",
          "events"
        ],
        "type": "object",
        "properties": {
          "msg_index": {
            "type": "number"
          },
          "success": {
            "type": "boolean"
          },
          "log": {
            "$ref": "#/components/schemas/getTxListResult.txs.logs.log"
          },
          "events": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/getTxListResult.txs.logs.events"
            },
            "description": ""
          }
        }
      },
      "getTxListResult.txs.logs.log": {
        "title": "getTxListResult.txs.logs.log",
        "required": [
          "tax"
        ],
        "type": "object",
        "properties": {
          "tax": {
            "type": "string"
          }
        }
      },
      "getTxListResult.txs.logs.events": {
        "title": "getTxListResult.txs.logs.events",
        "required": [
          "type",
          "attributes"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "attributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/getTxListResult.txs.logs.events.attributes"
            },
            "description": ""
          }
        }
      },
      "getTxListResult.txs.logs.events.attributes": {
        "title": "getTxListResult.txs.logs.events.attributes",
        "required": [
          "key",
          "value"
        ],
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "postTxsBody": {
        "title": "postTxsBody",
        "required": [
          "tx",
          "mode"
        ],
        "type": "object",
        "properties": {
          "tx": {
            "$ref": "#/components/schemas/postTxsBody.tx"
          },
          "mode": {
            "type": "string",
            "description": "broadcast mode"
          }
        }
      },
      "postTxsBody.tx": {
        "title": "postTxsBody.tx",
        "required": [
          "msg",
          "fee",
          "signature",
          "memo"
        ],
        "type": "object",
        "properties": {
          "msg": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "tx message"
          },
          "fee": {
            "$ref": "#/components/schemas/postTxsBody.tx.fee"
          },
          "signature": {
            "$ref": "#/components/schemas/postTxsBody.tx.signature"
          },
          "memo": {
            "type": "string",
            "description": "Information related to tx"
          }
        }
      },
      "postTxsBody.tx.fee": {
        "title": "postTxsBody.tx.fee",
        "required": [
          "gas",
          "amount"
        ],
        "type": "object",
        "properties": {
          "gas": {
            "type": "string",
            "description": "tx gas"
          },
          "amount": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/postTxsBody.tx.fee.amount"
            },
            "description": "tx gas amount"
          }
        }
      },
      "postTxsBody.tx.fee.amount": {
        "title": "postTxsBody.tx.fee.amount",
        "required": [
          "denom",
          "amount"
        ],
        "type": "object",
        "properties": {
          "denom": {
            "type": "string",
            "description": "tx gas amount"
          },
          "amount": {
            "type": "string",
            "description": "tx gas amount"
          }
        }
      },
      "postTxsBody.tx.signature": {
        "title": "postTxsBody.tx.signature",
        "required": [
          "signature",
          "pub_key",
          "account_number",
          "sequence"
        ],
        "type": "object",
        "properties": {
          "signature": {
            "type": "string",
            "description": "tx signature"
          },
          "pub_key": {
            "$ref": "#/components/schemas/postTxsBody.tx.signature.pub_key"
          },
          "account_number": {
            "type": "string",
            "description": "tx signature"
          },
          "sequence": {
            "type": "string",
            "description": "tx sequence of the account"
          }
        }
      },
      "postTxsBody.tx.signature.pub_key": {
        "title": "postTxsBody.tx.signature.pub_key",
        "required": [
          "type",
          "value"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Key type"
          },
          "value": {
            "type": "string",
            "description": "Key value"
          }
        }
      },
      "postTxsResult": {
        "title": "postTxsResult",
        "required": [
          "hash",
          "height",
          "check_tx",
          "deliver_tx"
        ],
        "type": "object",
        "properties": {
          "hash": {
            "type": "string",
            "description": "Tx hash"
          },
          "height": {
            "type": "number",
            "description": "Block height"
          },
          "check_tx": {
            "$ref": "#/components/schemas/postTxsResult.check_tx"
          },
          "deliver_tx": {
            "$ref": "#/components/schemas/postTxsResult.deliver_tx"
          }
        }
      },
      "postTxsResult.check_tx": {
        "title": "postTxsResult.check_tx",
        "required": [
          "code",
          "data",
          "log",
          "gas_used",
          "gas_wanted",
          "info",
          "tags"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "number"
          },
          "data": {
            "type": "string"
          },
          "log": {
            "type": "string"
          },
          "gas_used": {
            "type": "number"
          },
          "gas_wanted": {
            "type": "number"
          },
          "info": {
            "type": "string"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": ""
          }
        }
      },
      "postTxsResult.deliver_tx": {
        "title": "postTxsResult.deliver_tx",
        "required": [
          "code",
          "data",
          "log",
          "gas_used",
          "gas_wanted",
          "info",
          "tags"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "number"
          },
          "data": {
            "type": "string"
          },
          "log": {
            "type": "string"
          },
          "gas_used": {
            "type": "number"
          },
          "gas_wanted": {
            "type": "number"
          },
          "info": {
            "type": "string"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": ""
          }
        }
      },
      "accounts": {
        "title": "accounts",
        "required": [
          "account",
          "amount",
          "percentage"
        ],
        "type": "object",
        "properties": {
          "account": {
            "type": "number"
          },
          "amount": {
            "type": "string"
          },
          "percentage": {
            "type": "string"
          }
        }
      },
      "getTaxProceedsResult": {
        "title": "getTaxProceedsResult",
        "required": [
          "total",
          "taxProceeds"
        ],
        "type": "object",
        "properties": {
          "total": {
            "type": "number",
            "description": "Current tax proceeds"
          },
          "taxProceeds": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/getTaxProceedsResult.taxProceeds"
            },
            "description": "tax by denoms"
          }
        }
      },
      "getTaxProceedsResult.taxProceeds": {
        "title": "getTaxProceedsResult.taxProceeds",
        "required": [
          "denom",
          "amount",
          "adjustedAmount"
        ],
        "type": "object",
        "properties": {
          "denom": {
            "type": "string",
            "description": "denom name"
          },
          "amount": {
            "type": "string",
            "description": "amount by denom"
          },
          "adjustedAmount": {
            "type": "string",
            "description": "amount by adjusted with luna"
          }
        }
      },
      "account2": {
        "title": "account2",
        "type": "object",
        "properties": {
          "base_req": {
            "$ref": "#/components/schemas/BaseReq"
          },
          "coins": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Coin"
            },
            "description": ""
          }
        }
      },
      "AccountResponse": {
        "title": "AccountResponse",
        "type": "object",
        "properties": {
          "account": {
            "$ref": "#/components/schemas/google.protobuf.Any"
          }
        },
        "description": "QueryAccountResponse is the response type for the Query/Account RPC method."
      },
      "AccountsResponse": {
        "title": "AccountsResponse",
        "type": "object",
        "properties": {
          "accounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/google.protobuf.Any"
            },
            "description": ""
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        },
        "description": "QueryAccountsResponse is the response type for the Query/Accounts RPC method.\n\nSince: cosmos-sdk 0.43"
      },
      "ActivesException1": {
        "title": "ActivesException1",
        "type": "object",
        "properties": {
          "error": {
            "type": "string"
          },
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          },
          "details": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Detail5"
            },
            "description": ""
          }
        }
      },
      "aggregate_votedefinesoracleaggregatevotesubmittedbyavalidatorinthecurrentvoteperiod": {
        "title": "aggregate_votedefinesoracleaggregatevotesubmittedbyavalidatorinthecurrentvoteperiod",
        "type": "object",
        "properties": {
          "exchange_rate_tuples": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExchangeRateTuple-structtostoreinterpretedexchangeratesdatatostore"
            },
            "description": ""
          },
          "voter": {
            "type": "string"
          }
        },
        "description": "MsgAggregateExchangeRateVote - struct for voting on\nthe exchange rates of Luna denominated in various Terra assets."
      },
      "aggregate_votesdefinesalloracleaggregatevotessubmittedinthecurrentvoteperiod": {
        "title": "aggregate_votesdefinesalloracleaggregatevotessubmittedinthecurrentvoteperiod",
        "type": "object",
        "properties": {
          "exchange_rate_tuples": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExchangeRateTuple-structtostoreinterpretedexchangeratesdatatostore"
            },
            "description": ""
          },
          "voter": {
            "type": "string"
          }
        },
        "description": "MsgAggregateExchangeRateVote - struct for voting on\nthe exchange rates of Luna denominated in various Terra assets."
      },
      "AggregatePrevoteException1": {
        "title": "AggregatePrevoteException1",
        "type": "object",
        "properties": {
          "error": {
            "type": "string"
          },
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          },
          "details": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Detail5"
            },
            "description": ""
          }
        }
      },
      "AggregatePrevotesException1": {
        "title": "AggregatePrevotesException1",
        "type": "object",
        "properties": {
          "error": {
            "type": "string"
          },
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          },
          "details": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Detail5"
            },
            "description": ""
          }
        }
      },
      "AggregateVoteException1": {
        "title": "AggregateVoteException1",
        "type": "object",
        "properties": {
          "error": {
            "type": "string"
          },
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          },
          "details": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Detail5"
            },
            "description": ""
          }
        }
      },
      "AggregateVoteResponse": {
        "title": "AggregateVoteResponse",
        "type": "object",
        "properties": {
          "aggregate_vote": {
            "$ref": "#/components/schemas/terra.oracle.v1beta1.AggregateExchangeRateVote"
          }
        },
        "description": "QueryAggregateVoteResponse is response type for the\nQuery/AggregateVote RPC method."
      },
      "AggregateVotesException1": {
        "title": "AggregateVotesException1",
        "type": "object",
        "properties": {
          "error": {
            "type": "string"
          },
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          },
          "details": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Detail5"
            },
            "description": ""
          }
        }
      },
      "AggregateVotesResponse": {
        "title": "AggregateVotesResponse",
        "type": "object",
        "properties": {
          "aggregate_votes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/terra.oracle.v1beta1.AggregateExchangeRateVote"
            },
            "description": ""
          }
        },
        "description": "QueryAggregateVotesResponse is response type for the\nQuery/AggregateVotes RPC method."
      },
      "AllBalancesException1": {
        "title": "AllBalancesException1",
        "type": "object",
        "properties": {
          "error": {
            "type": "string"
          },
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          },
          "details": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Detail5"
            },
            "description": ""
          }
        }
      },
      "AllBalancesResponse": {
        "title": "AllBalancesResponse",
        "type": "object",
        "properties": {
          "balances": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/cosmos.base.v1beta1.Coin"
            },
            "description": "balances is the balances of all the coins."
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        },
        "description": "QueryAllBalancesResponse is the response type for the Query/AllBalances RPC\nmethod."
      },
      "AllEvidenceResponse": {
        "title": "AllEvidenceResponse",
        "type": "object",
        "properties": {
          "evidence": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/google.protobuf.Any"
            },
            "description": "evidence returns all evidences."
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        },
        "description": "QueryAllEvidenceResponse is the response type for the Query/AllEvidence RPC\nmethod."
      },
      "Allowance": {
        "title": "Allowance",
        "type": "object",
        "properties": {
          "type_url": {
            "type": "string",
            "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
          },
          "value": {
            "type": "string",
            "description": "Must be a valid serialized protocol buffer of the above specified type."
          }
        },
        "description": "allowance can be any of basic and filtered fee allowance."
      },
      "AllowanceResponse": {
        "title": "AllowanceResponse",
        "type": "object",
        "properties": {
          "allowance": {
            "$ref": "#/components/schemas/GrantisstoredintheKVStoretorecordagrantwithfullcontext1"
          }
        },
        "description": "QueryAllowanceResponse is the response type for the Query/Allowance RPC method."
      },
      "AllowancesResponse": {
        "title": "AllowancesResponse",
        "type": "object",
        "properties": {
          "allowances": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GrantisstoredintheKVStoretorecordagrantwithfullcontext"
            },
            "description": "allowances are allowance's granted for grantee by granter."
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination1"
          }
        },
        "description": "QueryAllowancesResponse is the response type for the Query/Allowances RPC method."
      },
      "AnnualProvisionsException1": {
        "title": "AnnualProvisionsException1",
        "type": "object",
        "properties": {
          "error": {
            "type": "string"
          },
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          },
          "details": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Detail5"
            },
            "description": ""
          }
        }
      },
      "ApplicationVersion1": {
        "title": "ApplicationVersion1",
        "type": "object",
        "properties": {
          "build_tags": {
            "type": "string"
          },
          "client_name": {
            "type": "string"
          },
          "commit": {
            "type": "string"
          },
          "go": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "server_name": {
            "type": "string"
          },
          "version": {
            "type": "string"
          }
        }
      },
      "Authorization": {
        "title": "Authorization",
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "example": "msgauth/GenericAuthorization"
          },
          "value": {
            "$ref": "#/components/schemas/Value3"
          }
        }
      },
      "Authorization1": {
        "title": "Authorization1",
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "example": "msgauth/SendAuthorization"
          },
          "value": {
            "$ref": "#/components/schemas/Value4"
          }
        }
      },
      "AuthParamsResponse": {
        "title": "AuthParamsResponse",
        "type": "object",
        "properties": {
          "params": {
            "$ref": "#/components/schemas/Params"
          }
        },
        "description": "QueryParamsResponse is the response type for the Query/Params RPC method."
      },
      "BalanceException1": {
        "title": "BalanceException1",
        "type": "object",
        "properties": {
          "error": {
            "type": "string"
          },
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          },
          "details": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Detail5"
            },
            "description": ""
          }
        }
      },
      "BalanceResponse": {
        "title": "BalanceResponse",
        "type": "object",
        "properties": {
          "balance": {
            "$ref": "#/components/schemas/cosmos.base.v1beta1.Coin"
          }
        },
        "description": "QueryBalanceResponse is the response type for the Query/Balance RPC method."
      },
      "BankParamsException1": {
        "title": "BankParamsException1",
        "type": "object",
        "properties": {
          "error": {
            "type": "string"
          },
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          },
          "details": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Detail5"
            },
            "description": ""
          }
        }
      },
      "BankParamsResponse": {
        "title": "BankParamsResponse",
        "type": "object",
        "properties": {
          "params": {
            "$ref": "#/components/schemas/cosmos.bank.v1beta1.Params"
          }
        },
        "description": "QueryParamsResponse defines the response type for querying x/bank parameters."
      },
      "BaseReq22": {
        "title": "BaseReq22",
        "type": "object",
        "properties": {
          "msg": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": ""
          },
          "fee": {
            "$ref": "#/components/schemas/Fee"
          },
          "memo": {
            "type": "string"
          },
          "signature": {
            "$ref": "#/components/schemas/Signature"
          }
        }
      },
      "Block2": {
        "title": "Block2",
        "type": "object",
        "properties": {
          "header": {
            "$ref": "#/components/schemas/Header3"
          },
          "data": {
            "$ref": "#/components/schemas/Datacontainsthesetoftransactionsincludedintheblock"
          },
          "evidence": {
            "$ref": "#/components/schemas/Evidence"
          },
          "last_commit": {
            "$ref": "#/components/schemas/LastCommit2"
          }
        }
      },
      "BlockMeta": {
        "title": "BlockMeta",
        "type": "object",
        "properties": {
          "header": {
            "$ref": "#/components/schemas/BlockHeader"
          },
          "block_id": {
            "$ref": "#/components/schemas/BlockID"
          }
        }
      },
      "BroadcastasignedtxResponse": {
        "title": "BroadcastasignedtxResponse",
        "type": "object",
        "properties": {
          "check_tx": {
            "$ref": "#/components/schemas/CheckTxResult"
          },
          "deliver_tx": {
            "$ref": "#/components/schemas/CheckTxResult"
          },
          "hash": {
            "type": "string",
            "example": "EE5F3404034C524501629B56E0DDC38FAD651F04"
          },
          "height": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "BroadcastTxResponse": {
        "title": "BroadcastTxResponse",
        "type": "object",
        "properties": {
          "tx_response": {
            "$ref": "#/components/schemas/cosmos.base.abci.v1beta1.TxResponse"
          }
        },
        "description": "BroadcastTxResponse is the response type for the\nService.BroadcastTx method."
      },
      "ByteCodeException1": {
        "title": "ByteCodeException1",
        "type": "object",
        "properties": {
          "error": {
            "type": "string"
          },
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          },
          "details": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Detail5"
            },
            "description": ""
          }
        }
      },
      "Channel": {
        "title": "Channel",
        "type": "object",
        "properties": {
          "state": {
            "$ref": "#/components/schemas/ibc.core.channel.v1.State"
          },
          "ordering": {
            "$ref": "#/components/schemas/OrderdefinesifachannelisORDEREDorUNORDERED"
          },
          "counterparty": {
            "$ref": "#/components/schemas/Counterpartydefinesachannelendcounterparty"
          },
          "connection_hops": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": ""
          },
          "version": {
            "type": "string"
          },
          "port_id": {
            "type": "string"
          },
          "channel_id": {
            "type": "string"
          }
        },
        "description": "IdentifiedChannel defines a channel with additional port and channel\nidentifier fields."
      },
      "channelassociatedwiththerequestidentifiers": {
        "title": "channelassociatedwiththerequestidentifiers",
        "type": "object",
        "properties": {
          "state": {
            "$ref": "#/components/schemas/ibc.core.channel.v1.State"
          },
          "ordering": {
            "$ref": "#/components/schemas/OrderdefinesifachannelisORDEREDorUNORDERED"
          },
          "counterparty": {
            "$ref": "#/components/schemas/Counterpartydefinesachannelendcounterparty"
          },
          "connection_hops": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": ""
          },
          "version": {
            "type": "string"
          }
        },
        "description": "Channel defines pipeline for exactly-once packet delivery between specific\nmodules on separate blockchains, which has at least one end capable of\nsending packets and one end capable of receiving packets."
      },
      "ChannelResponse": {
        "title": "ChannelResponse",
        "type": "object",
        "properties": {
          "channel": {
            "$ref": "#/components/schemas/ibc.core.channel.v1.Channel"
          },
          "proof": {
            "type": "string"
          },
          "proof_height": {
            "$ref": "#/components/schemas/HeightisamonotonicallyincreasingdatatypethatcanbecomparedagainstanotherHeightforthepurposesofupdatingandfreezingclients"
          }
        },
        "description": "QueryChannelResponse is the response type for the Query/Channel RPC method.\nBesides the Channel end, it includes a proof and the height from which the\nproof was retrieved."
      },
      "ChannelsResponse": {
        "title": "ChannelsResponse",
        "type": "object",
        "properties": {
          "channels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ibc.core.channel.v1.IdentifiedChannel"
            },
            "description": "list of stored channels of the chain."
          },
          "pagination": {
            "$ref": "#/components/schemas/cosmos.base.query.v1beta1.PageResponse"
          },
          "height": {
            "$ref": "#/components/schemas/HeightisamonotonicallyincreasingdatatypethatcanbecomparedagainstanotherHeightforthepurposesofupdatingandfreezingclients"
          }
        },
        "description": "QueryChannelsResponse is the response type for the Query/Channels RPC method."
      },
      "CheckTx": {
        "title": "CheckTx",
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "data": {
            "type": "string"
          },
          "gas_used": {
            "type": "integer",
            "format": "int32"
          },
          "gas_wanted": {
            "type": "integer",
            "format": "int32"
          },
          "info": {
            "type": "string"
          },
          "log": {
            "type": "string"
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/KVPair"
            },
            "description": ""
          }
        }
      },
      "Clearwasmcontractadmintomakethecontractun-migratableResponse": {
        "title": "Clearwasmcontractadmintomakethecontractun-migratableResponse",
        "type": "object",
        "properties": {
          "msg": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": ""
          },
          "fee": {
            "$ref": "#/components/schemas/Fee"
          },
          "memo": {
            "type": "string"
          },
          "signature": {
            "$ref": "#/components/schemas/Signature"
          }
        }
      },
      "ClientParamsResponse": {
        "title": "ClientParamsResponse",
        "type": "object",
        "properties": {
          "params": {
            "$ref": "#/components/schemas/Params10"
          }
        },
        "description": "QueryClientParamsResponse is the response type for the Query/ClientParams RPC\nmethod."
      },
      "CodeInfoException1": {
        "title": "CodeInfoException1",
        "type": "object",
        "properties": {
          "error": {
            "type": "string"
          },
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          },
          "details": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Detail5"
            },
            "description": ""
          }
        }
      },
      "Commission": {
        "title": "Commission",
        "type": "object",
        "properties": {
          "rate": {
            "type": "string",
            "example": "0"
          },
          "max_rate": {
            "type": "string",
            "example": "0"
          },
          "max_change_rate": {
            "type": "string",
            "example": "0"
          },
          "update_time": {
            "type": "string",
            "example": "1970-01-01T00:00:00Z"
          }
        }
      },
      "Commission2": {
        "title": "Commission2",
        "type": "object",
        "properties": {
          "commission": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/cosmos.base.v1beta1.DecCoin"
            },
            "description": ""
          }
        },
        "description": "commission defines the commision the validator received."
      },
      "Commission5": {
        "title": "Commission5",
        "type": "object",
        "properties": {
          "commission_rates": {
            "$ref": "#/components/schemas/CommissionRates"
          },
          "update_time": {
            "type": "string",
            "description": "update_time is the last time the commission rate was changed.",
            "format": "date-time"
          }
        },
        "description": "commission defines the commission parameters."
      },
      "CommissionRates": {
        "title": "CommissionRates",
        "type": "object",
        "properties": {
          "rate": {
            "type": "string",
            "description": "rate is the commission rate charged to delegators, as a fraction."
          },
          "max_rate": {
            "type": "string",
            "description": "max_rate defines the maximum commission rate which validator can ever charge, as a fraction."
          },
          "max_change_rate": {
            "type": "string",
            "description": "max_change_rate defines the maximum daily increase of the validator commission, as a fraction."
          }
        },
        "description": "commission_rates defines the initial commission rates to be used for creating a validator."
      },
      "Commit": {
        "title": "Commit",
        "type": "object",
        "properties": {
          "height": {
            "type": "string"
          },
          "round": {
            "type": "integer",
            "format": "int32"
          },
          "block_id": {
            "$ref": "#/components/schemas/BlockID26"
          },
          "signatures": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/tendermint.types.CommitSig"
            },
            "description": ""
          }
        },
        "description": "Commit contains the evidence that a block was committed by a set of validators."
      },
      "CommunityPoolException1": {
        "title": "CommunityPoolException1",
        "type": "object",
        "properties": {
          "error": {
            "type": "string"
          },
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          },
          "details": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Detail5"
            },
            "description": ""
          }
        }
      },
      "ConflictingBlock": {
        "title": "ConflictingBlock",
        "type": "object",
        "properties": {
          "signed_header": {
            "$ref": "#/components/schemas/SignedHeader"
          },
          "validator_set": {
            "$ref": "#/components/schemas/tendermint.types.ValidatorSet"
          }
        }
      },
      "Connection": {
        "title": "Connection",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "connection identifier."
          },
          "client_id": {
            "type": "string",
            "description": "client associated with this connection."
          },
          "versions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ibc.core.connection.v1.Version"
            },
            "description": ""
          },
          "state": {
            "$ref": "#/components/schemas/State"
          },
          "counterparty": {
            "$ref": "#/components/schemas/Counterparty"
          },
          "delay_period": {
            "type": "string",
            "description": "delay period associated with this connection."
          }
        },
        "description": "IdentifiedConnection defines a connection with additional connection\nidentifier field."
      },
      "connectionassociatedwiththerequestidentifier": {
        "title": "connectionassociatedwiththerequestidentifier",
        "type": "object",
        "properties": {
          "client_id": {
            "type": "string",
            "description": "client associated with this connection."
          },
          "versions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ibc.core.connection.v1.Version"
            },
            "description": "IBC version which can be utilised to determine encodings or protocols for\nchannels or packets utilising this connection."
          },
          "state": {
            "$ref": "#/components/schemas/State"
          },
          "counterparty": {
            "$ref": "#/components/schemas/Counterparty"
          },
          "delay_period": {
            "type": "string",
            "description": "delay period that must pass before a consensus state can be used for\npacket-verification NOTE: delay period logic is only implemented by some\nclients."
          }
        },
        "description": "ConnectionEnd defines a stateful object on a chain connected to another\nseparate one.\nNOTE: there must only be 2 defined ConnectionEnds to establish\na connection between two chains."
      },
      "ConnectionResponse": {
        "title": "ConnectionResponse",
        "type": "object",
        "properties": {
          "connection": {
            "$ref": "#/components/schemas/ibc.core.connection.v1.ConnectionEnd"
          },
          "proof": {
            "type": "string"
          },
          "proof_height": {
            "$ref": "#/components/schemas/HeightisamonotonicallyincreasingdatatypethatcanbecomparedagainstanotherHeightforthepurposesofupdatingandfreezingclients"
          }
        },
        "description": "QueryConnectionResponse is the response type for the Query/Connection RPC\nmethod. Besides the connection end, it includes a proof and the height from\nwhich the proof was retrieved."
      },
      "ConnectionsResponse": {
        "title": "ConnectionsResponse",
        "type": "object",
        "properties": {
          "connections": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ibc.core.connection.v1.IdentifiedConnection"
            },
            "description": "list of stored connections of the chain."
          },
          "pagination": {
            "$ref": "#/components/schemas/cosmos.base.query.v1beta1.PageResponse"
          },
          "height": {
            "$ref": "#/components/schemas/HeightisamonotonicallyincreasingdatatypethatcanbecomparedagainstanotherHeightforthepurposesofupdatingandfreezingclients"
          }
        },
        "description": "QueryConnectionsResponse is the response type for the Query/Connections RPC\nmethod."
      },
      "Content": {
        "title": "Content",
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "example": "gov/TextProposal"
          },
          "value": {
            "$ref": "#/components/schemas/Value"
          }
        }
      },
      "ContractInfoException1": {
        "title": "ContractInfoException1",
        "type": "object",
        "properties": {
          "error": {
            "type": "string"
          },
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          },
          "details": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Detail5"
            },
            "description": ""
          }
        }
      },
      "ContractStoreException1": {
        "title": "ContractStoreException1",
        "type": "object",
        "properties": {
          "error": {
            "type": "string"
          },
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          },
          "details": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Detail5"
            },
            "description": ""
          }
        }
      },
      "Counterparty": {
        "title": "Counterparty",
        "type": "object",
        "properties": {
          "client_id": {
            "type": "string",
            "description": "identifies the client on the counterparty chain associated with a given\nconnection."
          },
          "connection_id": {
            "type": "string",
            "description": "identifies the connection end on the counterparty chain associated with a\ngiven connection."
          },
          "prefix": {
            "$ref": "#/components/schemas/MerklePrefixismerklepathprefixedtothekey.TheconstructedkeyfromthePathandthekeywillbeappendPath.KeyPathappendPath.KeyPrefixkey...1"
          }
        },
        "description": "counterparty chain associated with this connection."
      },
      "CurrentPlanResponse": {
        "title": "CurrentPlanResponse",
        "type": "object",
        "properties": {
          "plan": {
            "$ref": "#/components/schemas/Plan"
          }
        },
        "description": "QueryCurrentPlanResponse is the response type for the Query/CurrentPlan RPC\nmethod."
      },
      "DecodeatransactionfromtheAminowireformatResponse": {
        "title": "DecodeatransactionfromtheAminowireformatResponse",
        "type": "object",
        "properties": {
          "msg": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": ""
          },
          "fee": {
            "$ref": "#/components/schemas/Fee"
          },
          "memo": {
            "type": "string"
          },
          "signature": {
            "$ref": "#/components/schemas/Signature"
          }
        }
      },
      "DefaultNodeInfo": {
        "title": "DefaultNodeInfo",
        "type": "object",
        "properties": {
          "protocol_version": {
            "$ref": "#/components/schemas/tendermint.p2p.ProtocolVersion"
          },
          "default_node_id": {
            "type": "string"
          },
          "listen_addr": {
            "type": "string"
          },
          "network": {
            "type": "string"
          },
          "version": {
            "type": "string"
          },
          "channels": {
            "type": "string"
          },
          "moniker": {
            "type": "string"
          },
          "other": {
            "$ref": "#/components/schemas/tendermint.p2p.DefaultNodeInfoOther"
          }
        }
      },
      "Delegation1": {
        "title": "Delegation1",
        "type": "object",
        "properties": {
          "delegator_address": {
            "type": "string"
          },
          "validator_address": {
            "type": "string"
          },
          "shares": {
            "type": "string"
          }
        }
      },
      "delegation7": {
        "title": "delegation7",
        "type": "object",
        "properties": {
          "base_req": {
            "$ref": "#/components/schemas/BaseReq"
          },
          "delegator_address": {
            "type": "string",
            "description": "bech32 encoded address",
            "example": "terra1wg2mlrxdmnnkkykgqg4znky86nyrtc45q336yv"
          },
          "validator_address": {
            "type": "string",
            "description": "bech32 encoded address",
            "example": "terravaloper1wg2mlrxdmnnkkykgqg4znky86nyrtc45q7a85l"
          },
          "amount": {
            "$ref": "#/components/schemas/Coin"
          }
        }
      },
      "delegation10": {
        "title": "delegation10",
        "type": "object",
        "properties": {
          "base_req": {
            "$ref": "#/components/schemas/BaseReq"
          },
          "delegator_address": {
            "type": "string",
            "description": "bech32 encoded address",
            "example": "terra1wg2mlrxdmnnkkykgqg4znky86nyrtc45q336yv"
          },
          "validator_src_address": {
            "type": "string",
            "description": "bech32 encoded address",
            "example": "terravaloper1wg2mlrxdmnnkkykgqg4znky86nyrtc45q7a85l"
          },
          "validator_dst_address": {
            "type": "string",
            "description": "bech32 encoded address",
            "example": "terravaloper1wg2mlrxdmnnkkykgqg4znky86nyrtc45q7a85l"
          },
          "amount": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Coin"
            },
            "description": ""
          }
        }
      },
      "DelegationRewardsException1": {
        "title": "DelegationRewardsException1",
        "type": "object",
        "properties": {
          "error": {
            "type": "string"
          },
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          },
          "details": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Detail5"
            },
            "description": ""
          }
        }
      },
      "DelegationTotalRewardsException1": {
        "title": "DelegationTotalRewardsException1",
        "type": "object",
        "properties": {
          "error": {
            "type": "string"
          },
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          },
          "details": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Detail5"
            },
            "description": ""
          }
        }
      },
      "DelegatorDelegationsResponse": {
        "title": "DelegatorDelegationsResponse",
        "type": "object",
        "properties": {
          "delegation_responses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/cosmos.staking.v1beta1.DelegationResponse"
            },
            "description": "delegation_responses defines all the delegations' info of a delegator."
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        },
        "description": "QueryDelegatorDelegationsResponse is response type for the\nQuery/DelegatorDelegations RPC method."
      },
      "DelegatorUnbondingDelegationsResponse": {
        "title": "DelegatorUnbondingDelegationsResponse",
        "type": "object",
        "properties": {
          "unbonding_responses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UnbondingResponse"
            },
            "description": ""
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        },
        "description": "QueryUnbondingDelegatorDelegationsResponse is response type for the\nQuery/UnbondingDelegatorDelegations RPC method."
      },
      "DelegatorValidatorResponse": {
        "title": "DelegatorValidatorResponse",
        "type": "object",
        "properties": {
          "validator": {
            "$ref": "#/components/schemas/Validator11"
          }
        },
        "description": "QueryDelegatorValidatorResponse response type for the\nQuery/DelegatorValidator RPC method."
      },
      "DelegatorValidatorsException1": {
        "title": "DelegatorValidatorsException1",
        "type": "object",
        "properties": {
          "error": {
            "type": "string"
          },
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          },
          "details": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Detail5"
            },
            "description": ""
          }
        }
      },
      "DelegatorWithdrawAddressException1": {
        "title": "DelegatorWithdrawAddressException1",
        "type": "object",
        "properties": {
          "error": {
            "type": "string"
          },
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          },
          "details": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Detail5"
            },
            "description": ""
          }
        }
      },
      "DeliverTx": {
        "title": "DeliverTx",
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "data": {
            "type": "string"
          },
          "gas_used": {
            "type": "integer",
            "format": "int32"
          },
          "gas_wanted": {
            "type": "integer",
            "format": "int32"
          },
          "info": {
            "type": "string"
          },
          "log": {
            "type": "string"
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/KVPair"
            },
            "description": ""
          }
        }
      },
      "DenomMetadataException1": {
        "title": "DenomMetadataException1",
        "type": "object",
        "properties": {
          "error": {
            "type": "string"
          },
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          },
          "details": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Detail5"
            },
            "description": ""
          }
        }
      },
      "DenomsMetadataException1": {
        "title": "DenomsMetadataException1",
        "type": "object",
        "properties": {
          "error": {
            "type": "string"
          },
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          },
          "details": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Detail5"
            },
            "description": ""
          }
        }
      },
      "DenomsMetadataResponse": {
        "title": "DenomsMetadataResponse",
        "type": "object",
        "properties": {
          "metadatas": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/cosmos.bank.v1beta1.Metadata"
            },
            "description": "metadata provides the client information for all the registered tokens."
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        },
        "description": "QueryDenomsMetadataResponse is the response type for the Query/DenomsMetadata RPC\nmethod."
      },
      "DenomTraceException1": {
        "title": "DenomTraceException1",
        "type": "object",
        "properties": {
          "error": {
            "type": "string"
          },
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          },
          "details": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Detail5"
            },
            "description": ""
          }
        }
      },
      "DenomTracesException1": {
        "title": "DenomTracesException1",
        "type": "object",
        "properties": {
          "error": {
            "type": "string"
          },
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          },
          "details": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Detail5"
            },
            "description": ""
          }
        }
      },
      "DenomTracesResponse": {
        "title": "DenomTracesResponse",
        "type": "object",
        "properties": {
          "denom_traces": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ibc.applications.transfer.v1.DenomTrace"
            },
            "description": "denom_traces returns all denominations trace information."
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        },
        "description": "QueryConnectionsResponse is the response type for the Query/DenomTraces RPC\nmethod."
      },
      "DeposittokenstoaproposalResponse": {
        "title": "DeposittokenstoaproposalResponse",
        "type": "object",
        "properties": {
          "msg": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": ""
          },
          "fee": {
            "$ref": "#/components/schemas/Fee"
          },
          "memo": {
            "type": "string"
          },
          "signature": {
            "$ref": "#/components/schemas/Signature"
          }
        }
      },
      "DepositParams": {
        "title": "DepositParams",
        "type": "object",
        "properties": {
          "min_deposit": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/cosmos.base.v1beta1.Coin"
            },
            "description": "Minimum deposit for a proposal to enter voting period."
          },
          "max_deposit_period": {
            "type": "string",
            "description": "Maximum period for Atom holders to deposit on a proposal. Initial value: 2\n months."
          }
        },
        "description": "deposit_params defines the parameters related to deposit."
      },
      "DepositsResponse": {
        "title": "DepositsResponse",
        "type": "object",
        "properties": {
          "deposits": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/cosmos.gov.v1beta1.Deposit"
            },
            "description": ""
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        },
        "description": "QueryDepositsResponse is the response type for the Query/Deposits RPC method."
      },
      "Description": {
        "title": "Description",
        "type": "object",
        "properties": {
          "moniker": {
            "type": "string"
          },
          "identity": {
            "type": "string"
          },
          "website": {
            "type": "string"
          },
          "security_contact": {
            "type": "string"
          },
          "details": {
            "type": "string"
          }
        }
      },
      "Description1": {
        "title": "Description1",
        "type": "object",
        "properties": {
          "moniker": {
            "type": "string",
            "description": "moniker defines a human-readable name for the validator."
          },
          "identity": {
            "type": "string",
            "description": "identity defines an optional identity signature (ex. UPort or Keybase)."
          },
          "website": {
            "type": "string",
            "description": "website defines an optional website link."
          },
          "security_contact": {
            "type": "string",
            "description": "security_contact defines an optional email for security contact."
          },
          "details": {
            "type": "string",
            "description": "details define other optional details."
          }
        },
        "description": "description defines the description terms for the validator."
      },
      "Detail5": {
        "title": "Detail5",
        "type": "object",
        "properties": {
          "type_url": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "DistributionParamsException1": {
        "title": "DistributionParamsException1",
        "type": "object",
        "properties": {
          "error": {
            "type": "string"
          },
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          },
          "details": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Detail5"
            },
            "description": ""
          }
        }
      },
      "DistributionParamsResponse": {
        "title": "DistributionParamsResponse",
        "type": "object",
        "properties": {
          "params": {
            "$ref": "#/components/schemas/Params2"
          }
        },
        "description": "QueryParamsResponse is the response type for the Query/Params RPC method."
      },
      "DuplicateVoteEvidence": {
        "title": "DuplicateVoteEvidence",
        "type": "object",
        "properties": {
          "vote_a": {
            "$ref": "#/components/schemas/VoteA"
          },
          "vote_b": {
            "$ref": "#/components/schemas/VoteB"
          },
          "total_voting_power": {
            "type": "string"
          },
          "validator_power": {
            "type": "string"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          }
        },
        "description": "DuplicateVoteEvidence contains evidence of a validator signed two conflicting votes."
      },
      "EncodealegacytransactiontotheProtowireformatResponse": {
        "title": "EncodealegacytransactiontotheProtowireformatResponse",
        "type": "object",
        "properties": {
          "tx": {
            "type": "string",
            "example": "The base64-encoded Proto-serialized bytes for the tx"
          }
        }
      },
      "EstimatefeeandgasofatransactionResponse": {
        "title": "EstimatefeeandgasofatransactionResponse",
        "type": "object",
        "properties": {
          "gas": {
            "type": "string"
          },
          "amount": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Coin"
            },
            "description": ""
          }
        }
      },
      "Event1": {
        "title": "Event1",
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "attributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/tendermint.abci.EventAttribute"
            },
            "description": ""
          }
        },
        "description": "Event allows application developers to attach additional information to\nResponseBeginBlock, ResponseEndBlock, ResponseCheckTx and ResponseDeliverTx.\nLater, transactions may be queried using these events."
      },
      "EventParams": {
        "title": "EventParams",
        "type": "object",
        "properties": {
          "max_attribute_num": {
            "type": "string",
            "description": "allowed max # of contract attribute num",
            "example": "128"
          },
          "max_attribute_key_length": {
            "type": "string",
            "description": "allowed max length of a contract event attribute key",
            "example": "128"
          },
          "max_attribute_value_length": {
            "type": "string",
            "description": "allowed max length of a contract event attribute value",
            "example": "128"
          }
        }
      },
      "Evidence": {
        "title": "Evidence",
        "type": "object",
        "properties": {
          "evidence": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/tendermint.types.Evidence"
            },
            "description": ""
          }
        }
      },
      "Evidence1": {
        "title": "Evidence1",
        "type": "object",
        "properties": {
          "duplicate_vote_evidence": {
            "$ref": "#/components/schemas/tendermint.types.DuplicateVoteEvidence"
          },
          "light_client_attack_evidence": {
            "$ref": "#/components/schemas/LightClientAttackEvidence"
          }
        }
      },
      "ExchangeRateException1": {
        "title": "ExchangeRateException1",
        "type": "object",
        "properties": {
          "error": {
            "type": "string"
          },
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          },
          "details": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Detail5"
            },
            "description": ""
          }
        }
      },
      "ExchangeRatesException1": {
        "title": "ExchangeRatesException1",
        "type": "object",
        "properties": {
          "error": {
            "type": "string"
          },
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          },
          "details": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Detail5"
            },
            "description": ""
          }
        }
      },
      "ExecutewasmcontractmessageResponse": {
        "title": "ExecutewasmcontractmessageResponse",
        "type": "object",
        "properties": {
          "msg": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": ""
          },
          "fee": {
            "$ref": "#/components/schemas/Fee"
          },
          "memo": {
            "type": "string"
          },
          "signature": {
            "$ref": "#/components/schemas/Signature"
          }
        }
      },
      "Fee": {
        "title": "Fee",
        "type": "object",
        "properties": {
          "gas": {
            "type": "string"
          },
          "amount": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Coin"
            },
            "description": ""
          }
        }
      },
      "FeedistributionoutstandingrewardsofasinglevalidatorResponse": {
        "title": "FeedistributionoutstandingrewardsofasinglevalidatorResponse",
        "type": "object",
        "properties": {
          "rewards": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Coin"
            },
            "description": ""
          }
        }
      },
      "FeedistributionparametersResponse": {
        "title": "FeedistributionparametersResponse",
        "type": "object",
        "properties": {
          "base_proposer_reward": {
            "type": "string"
          },
          "bonus_proposer_reward": {
            "type": "string"
          },
          "community_tax": {
            "type": "string"
          }
        }
      },
      "Fee21": {
        "title": "Fee21",
        "type": "object",
        "properties": {
          "amount": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/cosmos.base.v1beta1.Coin"
            },
            "description": ""
          },
          "gas_limit": {
            "type": "string"
          },
          "payer": {
            "type": "string",
            "description": "if unset, the first signer is responsible for paying the fees. If set, the specified account must pay the fees.\nthe payer must be a tx signer (and thus have signed this field in AuthInfo).\nsetting this field does *not* change the ordering of required signers for the transaction."
          },
          "granter": {
            "type": "string"
          }
        },
        "description": "Fee is the fee and gas limit for the transaction. The first signer is the\nprimary signer and the one which pays the fee. The fee can be calculated\nbased on the cost of evaluating the body and doing signature verification\nof the signers. This can be estimated via simulation."
      },
      "FeederDelegationException1": {
        "title": "FeederDelegationException1",
        "type": "object",
        "properties": {
          "error": {
            "type": "string"
          },
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          },
          "details": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Detail5"
            },
            "description": ""
          }
        }
      },
      "GasInfo": {
        "title": "GasInfo",
        "type": "object",
        "properties": {
          "gas_wanted": {
            "type": "string",
            "description": "GasWanted is the maximum units of work we allow this tx to perform."
          },
          "gas_used": {
            "type": "string",
            "description": "GasUsed is the amount of gas actually consumed."
          }
        },
        "description": "gas_info is the information about gas used in the simulation."
      },
      "GenerateaparameterchangeproposaltransactionResponse": {
        "title": "GenerateaparameterchangeproposaltransactionResponse",
        "type": "object",
        "properties": {
          "msg": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": ""
          },
          "fee": {
            "$ref": "#/components/schemas/Fee"
          },
          "memo": {
            "type": "string"
          },
          "signature": {
            "$ref": "#/components/schemas/Signature"
          }
        }
      },
      "GenerateoracleaggregateexchangerateprevotemessagecontainingahashResponse": {
        "title": "GenerateoracleaggregateexchangerateprevotemessagecontainingahashResponse",
        "type": "object",
        "properties": {
          "msg": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": ""
          },
          "fee": {
            "$ref": "#/components/schemas/Fee"
          },
          "memo": {
            "type": "string"
          },
          "signature": {
            "$ref": "#/components/schemas/Signature"
          }
        }
      },
      "GenerateoracleaggregateexchangeratevotemessagecontainingexchangeratesandsalttoprovetheaggregateprevoteResponse": {
        "title": "GenerateoracleaggregateexchangeratevotemessagecontainingexchangeratesandsalttoprovetheaggregateprevoteResponse",
        "type": "object",
        "properties": {
          "msg": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": ""
          },
          "fee": {
            "$ref": "#/components/schemas/Fee"
          },
          "memo": {
            "type": "string"
          },
          "signature": {
            "$ref": "#/components/schemas/Signature"
          }
        }
      },
      "GenerateoraclefeederrightdelegationmessageResponse": {
        "title": "GenerateoraclefeederrightdelegationmessageResponse",
        "type": "object",
        "properties": {
          "msg": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": ""
          },
          "fee": {
            "$ref": "#/components/schemas/Fee"
          },
          "memo": {
            "type": "string"
          },
          "signature": {
            "$ref": "#/components/schemas/Signature"
          }
        }
      },
      "GeneratewasmstorecodemessageResponse": {
        "title": "GeneratewasmstorecodemessageResponse",
        "type": "object",
        "properties": {
          "msg": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": ""
          },
          "fee": {
            "$ref": "#/components/schemas/Fee"
          },
          "memo": {
            "type": "string"
          },
          "signature": {
            "$ref": "#/components/schemas/Signature"
          }
        }
      },
      "GetablockatacertainheightResponse": {
        "title": "GetablockatacertainheightResponse",
        "type": "object",
        "properties": {
          "block_meta": {
            "$ref": "#/components/schemas/BlockMeta"
          },
          "block": {
            "$ref": "#/components/schemas/Block"
          }
        }
      },
      "GetaTxbyhashResponse": {
        "title": "GetaTxbyhashResponse",
        "type": "object",
        "properties": {
          "hash": {
            "type": "string",
            "example": "D085138D913993919295FF4B0A9107F1F2CDE0D37A87CE0644E217CBF3B49656"
          },
          "height": {
            "type": "number",
            "example": 368
          },
          "tx": {
            "$ref": "#/components/schemas/Tx"
          },
          "result": {
            "$ref": "#/components/schemas/Result"
          }
        }
      },
      "GetavalidatorsetacertainheightResponse": {
        "title": "GetavalidatorsetacertainheightResponse",
        "type": "object",
        "properties": {
          "block_height": {
            "type": "string"
          },
          "validators": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TendermintValidator"
            },
            "description": ""
          }
        }
      },
      "GetalldelegationsfromadelegatorResponse": {
        "title": "GetalldelegationsfromadelegatorResponse",
        "type": "object",
        "properties": {
          "delegation": {
            "$ref": "#/components/schemas/Delegation1"
          },
          "balance": {
            "$ref": "#/components/schemas/Coin"
          }
        }
      },
      "GetalldelegationsfromavalidatorResponse": {
        "title": "GetalldelegationsfromavalidatorResponse",
        "type": "object",
        "properties": {
          "delegation": {
            "$ref": "#/components/schemas/Delegation1"
          },
          "balance": {
            "$ref": "#/components/schemas/Coin"
          }
        }
      },
      "GetallredelegationsfilterbyqueryparamsResponse": {
        "title": "GetallredelegationsfilterbyqueryparamsResponse",
        "type": "object",
        "properties": {
          "delegator_address": {
            "type": "string"
          },
          "validator_src_address": {
            "type": "string"
          },
          "validator_dst_address": {
            "type": "string"
          },
          "entries": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RedelegationEntry"
            },
            "description": ""
          }
        }
      },
      "GetallunbondingdelegationsfromadelegatorResponse": {
        "title": "GetallunbondingdelegationsfromadelegatorResponse",
        "type": "object",
        "properties": {
          "delegator_address": {
            "type": "string"
          },
          "validator_address": {
            "type": "string"
          },
          "entries": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UnbondingEntry"
            },
            "description": ""
          }
        }
      },
      "GetallunbondingdelegationsfromavalidatorResponse": {
        "title": "GetallunbondingdelegationsfromavalidatorResponse",
        "type": "object",
        "properties": {
          "delegator_address": {
            "type": "string"
          },
          "validator_address": {
            "type": "string"
          },
          "entries": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UnbondingEntry"
            },
            "description": ""
          }
        }
      },
      "Getallvalidatorcandidates.Bydefaultitreturnsonlythebondedvalidators.Response": {
        "title": "Getallvalidatorcandidates.Bydefaultitreturnsonlythebondedvalidators.Response",
        "type": "object",
        "properties": {
          "operator_address": {
            "type": "string",
            "description": "bech32 encoded address",
            "example": "terravaloper1wg2mlrxdmnnkkykgqg4znky86nyrtc45q7a85l"
          },
          "consensus_pubkey": {
            "$ref": "#/components/schemas/PublicKey"
          },
          "jailed": {
            "type": "boolean"
          },
          "status": {
            "type": "integer",
            "format": "int32"
          },
          "tokens": {
            "type": "string"
          },
          "delegator_shares": {
            "type": "string"
          },
          "description": {
            "$ref": "#/components/schemas/Description"
          },
          "bond_height": {
            "type": "string",
            "example": "0"
          },
          "bond_intra_tx_counter": {
            "type": "integer",
            "format": "int32",
            "example": 0
          },
          "unbonding_height": {
            "type": "string",
            "example": "0"
          },
          "unbonding_time": {
            "type": "string",
            "example": "1970-01-01T00:00:00Z"
          },
          "commission": {
            "$ref": "#/components/schemas/Commission"
          }
        }
      },
      "GettheaccountinformationonblockchainResponse": {
        "title": "GettheaccountinformationonblockchainResponse",
        "type": "object",
        "properties": {
          "Account": {
            "$ref": "#/components/schemas/Account"
          },
          "LazyGradedVestingAccount": {
            "$ref": "#/components/schemas/LazyGradedVestingAccount"
          }
        }
      },
      "GetthecurrentslashingparametersResponse": {
        "title": "GetthecurrentslashingparametersResponse",
        "type": "object",
        "properties": {
          "signed_blocks_window": {
            "type": "string"
          },
          "min_signed_per_window": {
            "type": "string"
          },
          "downtime_jail_duration": {
            "type": "string"
          },
          "slash_fraction_double_sign": {
            "type": "string"
          },
          "slash_fraction_downtime": {
            "type": "string"
          }
        }
      },
      "GetthecurrentstakingparametervaluesResponse": {
        "title": "GetthecurrentstakingparametervaluesResponse",
        "type": "object",
        "properties": {
          "unbonding_time": {
            "type": "string"
          },
          "max_validators": {
            "type": "integer",
            "format": "int32"
          },
          "max_entries": {
            "type": "integer",
            "format": "int32"
          },
          "historical_entries": {
            "type": "integer",
            "format": "int32"
          },
          "bond_denom": {
            "type": "string"
          }
        }
      },
      "GetthecurrentstateofthestakingpoolResponse": {
        "title": "GetthecurrentstateofthestakingpoolResponse",
        "type": "object",
        "properties": {
          "bonded_tokens": {
            "type": "string"
          },
          "not_bonded_tokens": {
            "type": "string"
          }
        }
      },
      "GetthecurrenttreasuryindicatorsResponse": {
        "title": "GetthecurrenttreasuryindicatorsResponse",
        "type": "object",
        "properties": {
          "trl_year": {
            "type": "string",
            "description": "Tax Rewards per staked Luna over a year of rolling average",
            "example": "0.000407428004800011"
          },
          "trl_month": {
            "type": "string",
            "description": "Tax Rewards per staked Luna over a month of rolling average",
            "example": "0.000366833881714302"
          }
        }
      },
      "GetthelatestblockResponse": {
        "title": "GetthelatestblockResponse",
        "type": "object",
        "properties": {
          "block_meta": {
            "$ref": "#/components/schemas/BlockMeta"
          },
          "block": {
            "$ref": "#/components/schemas/Block"
          }
        }
      },
      "GetthelatestvalidatorsetResponse": {
        "title": "GetthelatestvalidatorsetResponse",
        "type": "object",
        "properties": {
          "block_height": {
            "type": "string"
          },
          "validators": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TendermintValidator"
            },
            "description": ""
          }
        }
      },
      "GetwasmmoduleparamsResponse": {
        "title": "GetwasmmoduleparamsResponse",
        "type": "object",
        "properties": {
          "max_contract_size": {
            "type": "number",
            "description": "allowed max contract bytes size",
            "example": 1000000
          },
          "max_contract_gas": {
            "type": "number",
            "description": "allowed max gas usages per each contract execution",
            "example": 1000000
          },
          "max_contract_msg_size": {
            "type": "number",
            "description": "allowed max contract exe msg bytes size",
            "example": 1000000
          },
          "max_contract_data_size": {
            "type": "number",
            "description": "allowed max contract return data size",
            "example": 100
          },
          "event_params": {
            "$ref": "#/components/schemas/EventParams"
          }
        }
      },
      "GetBlockByHeightResponse": {
        "title": "GetBlockByHeightResponse",
        "type": "object",
        "properties": {
          "block_id": {
            "$ref": "#/components/schemas/BlockID26"
          },
          "block": {
            "$ref": "#/components/schemas/Block2"
          }
        },
        "description": "GetBlockByHeightResponse is the response type for the Query/GetBlockByHeight RPC method."
      },
      "GetLatestBlockResponse": {
        "title": "GetLatestBlockResponse",
        "type": "object",
        "properties": {
          "block_id": {
            "$ref": "#/components/schemas/BlockID26"
          },
          "block": {
            "$ref": "#/components/schemas/Block2"
          }
        },
        "description": "GetLatestBlockResponse is the response type for the Query/GetLatestBlock RPC method."
      },
      "GetLatestValidatorSetResponse": {
        "title": "GetLatestValidatorSetResponse",
        "type": "object",
        "properties": {
          "block_height": {
            "type": "string"
          },
          "validators": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/cosmos.base.tendermint.v1beta1.Validator"
            },
            "description": ""
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination1"
          }
        },
        "description": "GetLatestValidatorSetResponse is the response type for the Query/GetValidatorSetByHeight RPC method."
      },
      "GetNodeInfoResponse": {
        "title": "GetNodeInfoResponse",
        "type": "object",
        "properties": {
          "default_node_info": {
            "$ref": "#/components/schemas/DefaultNodeInfo"
          },
          "application_version": {
            "$ref": "#/components/schemas/cosmos.base.tendermint.v1beta1.VersionInfo"
          }
        },
        "description": "GetNodeInfoResponse is the request type for the Query/GetNodeInfo RPC method."
      },
      "GetValidatorSetByHeightResponse": {
        "title": "GetValidatorSetByHeightResponse",
        "type": "object",
        "properties": {
          "block_height": {
            "type": "string"
          },
          "validators": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/cosmos.base.tendermint.v1beta1.Validator"
            },
            "description": ""
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination1"
          }
        },
        "description": "GetValidatorSetByHeightResponse is the response type for the Query/GetValidatorSetByHeight RPC method."
      },
      "GovParamsResponse": {
        "title": "GovParamsResponse",
        "type": "object",
        "properties": {
          "voting_params": {
            "$ref": "#/components/schemas/VotingParams"
          },
          "deposit_params": {
            "$ref": "#/components/schemas/DepositParams"
          },
          "tally_params": {
            "$ref": "#/components/schemas/TallyParams"
          }
        },
        "description": "QueryParamsResponse is the response type for the Query/Params RPC method."
      },
      "GrantisstoredintheKVStoretorecordagrantwithfullcontext1": {
        "title": "GrantisstoredintheKVStoretorecordagrantwithfullcontext1",
        "type": "object",
        "properties": {
          "granter": {
            "type": "string",
            "description": "granter is the address of the user granting an allowance of their funds."
          },
          "grantee": {
            "type": "string",
            "description": "grantee is the address of the user being granted an allowance of another user's funds."
          },
          "allowance": {
            "$ref": "#/components/schemas/Allowance"
          }
        },
        "description": "allowance is a allowance granted for grantee by granter."
      },
      "GrantsResponse": {
        "title": "GrantsResponse",
        "type": "object",
        "properties": {
          "grants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/cosmos.authz.v1beta1.Grant"
            },
            "description": "authorizations is a list of grants granted for grantee by granter."
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination1"
          }
        },
        "description": "QueryGrantsResponse is the response type for the Query/Authorizations RPC method."
      },
      "Header": {
        "title": "Header",
        "type": "object",
        "properties": {
          "chain_id": {
            "type": "string",
            "example": "columbus-5"
          },
          "height": {
            "type": "number",
            "example": 1
          },
          "time": {
            "type": "string",
            "example": "2017-12-30T05:53:09.287+01:00"
          },
          "num_txs": {
            "type": "number",
            "example": 0
          },
          "last_block_id": {
            "$ref": "#/components/schemas/BlockID"
          },
          "total_txs": {
            "type": "number",
            "example": 35
          },
          "last_commit_hash": {
            "type": "string",
            "example": "EE5F3404034C524501629B56E0DDC38FAD651F04"
          },
          "data_hash": {
            "type": "string",
            "example": "EE5F3404034C524501629B56E0DDC38FAD651F04"
          },
          "validators_hash": {
            "type": "string",
            "example": "EE5F3404034C524501629B56E0DDC38FAD651F04"
          },
          "next_validators_hash": {
            "type": "string",
            "example": "EE5F3404034C524501629B56E0DDC38FAD651F04"
          },
          "consensus_hash": {
            "type": "string",
            "example": "EE5F3404034C524501629B56E0DDC38FAD651F04"
          },
          "app_hash": {
            "type": "string",
            "example": "EE5F3404034C524501629B56E0DDC38FAD651F04"
          },
          "last_results_hash": {
            "type": "string",
            "example": "EE5F3404034C524501629B56E0DDC38FAD651F04"
          },
          "evidence_hash": {
            "type": "string",
            "example": "EE5F3404034C524501629B56E0DDC38FAD651F04"
          },
          "proposer_address": {
            "type": "string",
            "description": "bech32 encoded address",
            "example": "terra1wg2mlrxdmnnkkykgqg4znky86nyrtc45q336yv"
          },
          "version": {
            "$ref": "#/components/schemas/Version"
          }
        }
      },
      "Header3": {
        "title": "Header3",
        "type": "object",
        "properties": {
          "version": {
            "$ref": "#/components/schemas/tendermint.version.Consensus"
          },
          "chain_id": {
            "type": "string"
          },
          "height": {
            "type": "string"
          },
          "time": {
            "type": "string",
            "format": "date-time"
          },
          "last_block_id": {
            "$ref": "#/components/schemas/BlockID26"
          },
          "last_commit_hash": {
            "type": "string"
          },
          "data_hash": {
            "type": "string"
          },
          "validators_hash": {
            "type": "string"
          },
          "next_validators_hash": {
            "type": "string"
          },
          "consensus_hash": {
            "type": "string"
          },
          "app_hash": {
            "type": "string"
          },
          "last_results_hash": {
            "type": "string"
          },
          "evidence_hash": {
            "type": "string"
          },
          "proposer_address": {
            "type": "string"
          }
        },
        "description": "Header defines the structure of a Tendermint block header."
      },
      "Header14": {
        "title": "Header14",
        "type": "object",
        "properties": {
          "version": {
            "$ref": "#/components/schemas/tendermint.version.Consensus"
          },
          "chain_id": {
            "type": "string"
          },
          "height": {
            "type": "string"
          },
          "time": {
            "type": "string",
            "format": "date-time"
          },
          "last_block_id": {
            "$ref": "#/components/schemas/BlockID26"
          },
          "last_commit_hash": {
            "type": "string"
          },
          "data_hash": {
            "type": "string"
          },
          "validators_hash": {
            "type": "string"
          },
          "next_validators_hash": {
            "type": "string"
          },
          "consensus_hash": {
            "type": "string"
          },
          "app_hash": {
            "type": "string"
          },
          "last_results_hash": {
            "type": "string"
          },
          "evidence_hash": {
            "type": "string"
          },
          "proposer_address": {
            "type": "string"
          }
        },
        "description": "Header defines the structure of a Tendermint block header."
      },
      "Hist": {
        "title": "Hist",
        "type": "object",
        "properties": {
          "header": {
            "$ref": "#/components/schemas/tendermint.types.Header"
          },
          "valset": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/cosmos.staking.v1beta1.Validator"
            },
            "description": ""
          }
        },
        "description": "hist defines the historical info at the given height."
      },
      "HistoricalInfoResponse": {
        "title": "HistoricalInfoResponse",
        "type": "object",
        "properties": {
          "hist": {
            "$ref": "#/components/schemas/Hist"
          }
        },
        "description": "QueryHistoricalInfoResponse is response type for the Query/HistoricalInfo RPC\nmethod."
      },
      "IBCTransferParamsException1": {
        "title": "IBCTransferParamsException1",
        "type": "object",
        "properties": {
          "error": {
            "type": "string"
          },
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          },
          "details": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Detail5"
            },
            "description": ""
          }
        }
      },
      "IBCTransferParamsResponse": {
        "title": "IBCTransferParamsResponse",
        "type": "object",
        "properties": {
          "params": {
            "$ref": "#/components/schemas/Params11"
          }
        },
        "description": "QueryParamsResponse is the response type for the Query/Params RPC method."
      },
      "IndicatorsException1": {
        "title": "IndicatorsException1",
        "type": "object",
        "properties": {
          "error": {
            "type": "string"
          },
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          },
          "details": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Detail5"
            },
            "description": ""
          }
        }
      },
      "InflationException1": {
        "title": "InflationException1",
        "type": "object",
        "properties": {
          "error": {
            "type": "string"
          },
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          },
          "details": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Detail5"
            },
            "description": ""
          }
        }
      },
      "InstantiatewasmcontractResponse": {
        "title": "InstantiatewasmcontractResponse",
        "type": "object",
        "properties": {
          "msg": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": ""
          },
          "fee": {
            "$ref": "#/components/schemas/Fee"
          },
          "memo": {
            "type": "string"
          },
          "signature": {
            "$ref": "#/components/schemas/Signature"
          }
        }
      },
      "LastBlockId": {
        "title": "LastBlockId",
        "type": "object",
        "properties": {
          "hash": {
            "type": "string",
            "example": "EE5F3404034C524501629B56E0DDC38FAD651F04"
          },
          "parts": {
            "$ref": "#/components/schemas/Parts"
          }
        }
      },
      "LastCommit": {
        "title": "LastCommit",
        "type": "object",
        "properties": {
          "block_id": {
            "$ref": "#/components/schemas/BlockID"
          },
          "precommits": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Precommit"
            },
            "description": ""
          }
        }
      },
      "LastCommit2": {
        "title": "LastCommit2",
        "type": "object",
        "properties": {
          "height": {
            "type": "string"
          },
          "round": {
            "type": "integer",
            "format": "int32"
          },
          "block_id": {
            "$ref": "#/components/schemas/BlockID26"
          },
          "signatures": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/tendermint.types.CommitSig"
            },
            "description": ""
          }
        },
        "description": "Commit contains the evidence that a block was committed by a set of validators."
      },
      "LightClientAttackEvidence": {
        "title": "LightClientAttackEvidence",
        "type": "object",
        "properties": {
          "conflicting_block": {
            "$ref": "#/components/schemas/tendermint.types.LightBlock"
          },
          "common_height": {
            "type": "string"
          },
          "byzantine_validators": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/tendermint.types.Validator"
            },
            "description": ""
          },
          "total_voting_power": {
            "type": "string"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          }
        },
        "description": "LightClientAttackEvidence contains evidence of a set of validators attempting to mislead a light client."
      },
      "Log": {
        "title": "Log",
        "type": "object",
        "properties": {
          "msg_index": {
            "type": "integer",
            "format": "int64"
          },
          "log": {
            "type": "string"
          },
          "events": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/cosmos.base.abci.v1beta1.StringEvent"
            },
            "description": "Events contains a slice of Event objects that were emitted during some\nexecution."
          }
        },
        "description": "ABCIMessageLog defines a structure containing an indexed tx ABCI message log."
      },
      "MarketParamsException1": {
        "title": "MarketParamsException1",
        "type": "object",
        "properties": {
          "error": {
            "type": "string"
          },
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          },
          "details": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Detail5"
            },
            "description": ""
          }
        }
      },
      "MarketParamsResponse": {
        "title": "MarketParamsResponse",
        "type": "object",
        "properties": {
          "params": {
            "$ref": "#/components/schemas/Params6"
          }
        },
        "description": "QueryParamsResponse is the response type for the Query/Params RPC method."
      },
      "MerklePrefixismerklepathprefixedtothekey.TheconstructedkeyfromthePathandthekeywillbeappendPath.KeyPathappendPath.KeyPrefixkey...1": {
        "title": "MerklePrefixismerklepathprefixedtothekey.TheconstructedkeyfromthePathandthekeywillbeappendPath.KeyPathappendPath.KeyPrefixkey...1",
        "type": "object",
        "properties": {
          "key_prefix": {
            "type": "string"
          }
        },
        "description": "commitment merkle prefix of the counterparty chain."
      },
      "MigrateoldwasmcodetonewwasmcodeResponse": {
        "title": "MigrateoldwasmcodetonewwasmcodeResponse",
        "type": "object",
        "properties": {
          "msg": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": ""
          },
          "fee": {
            "$ref": "#/components/schemas/Fee"
          },
          "memo": {
            "type": "string"
          },
          "signature": {
            "$ref": "#/components/schemas/Signature"
          }
        }
      },
      "MigratewasmcontracttonewcodebaseResponse": {
        "title": "MigratewasmcontracttonewcodebaseResponse",
        "type": "object",
        "properties": {
          "msg": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": ""
          },
          "fee": {
            "$ref": "#/components/schemas/Fee"
          },
          "memo": {
            "type": "string"
          },
          "signature": {
            "$ref": "#/components/schemas/Signature"
          }
        }
      },
      "MintingmoduleparametersResponse": {
        "title": "MintingmoduleparametersResponse",
        "type": "object",
        "properties": {
          "mint_denom": {
            "type": "string"
          },
          "inflation_rate_change": {
            "type": "string"
          },
          "inflation_max": {
            "type": "string"
          },
          "inflation_min": {
            "type": "string"
          },
          "goal_bonded": {
            "type": "string"
          },
          "blocks_per_year": {
            "type": "string"
          }
        }
      },
      "MintParamsException1": {
        "title": "MintParamsException1",
        "type": "object",
        "properties": {
          "error": {
            "type": "string"
          },
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          },
          "details": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Detail5"
            },
            "description": ""
          }
        }
      },
      "MintParamsResponse": {
        "title": "MintParamsResponse",
        "type": "object",
        "properties": {
          "params": {
            "$ref": "#/components/schemas/Params3"
          }
        },
        "description": "QueryParamsResponse is the response type for the Query/Params RPC method."
      },
      "MissCounterException1": {
        "title": "MissCounterException1",
        "type": "object",
        "properties": {
          "error": {
            "type": "string"
          },
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          },
          "details": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Detail5"
            },
            "description": ""
          }
        }
      },
      "NodeInfo": {
        "title": "NodeInfo",
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "moniker": {
            "type": "string",
            "example": "validator-name"
          },
          "protocol_version": {
            "$ref": "#/components/schemas/tendermint.p2p.ProtocolVersion"
          },
          "network": {
            "type": "string",
            "example": "gaia-2"
          },
          "channels": {
            "type": "string"
          },
          "listen_addr": {
            "type": "string",
            "example": "192.168.56.1:26656"
          },
          "version": {
            "type": "string",
            "description": "Tendermint version",
            "example": "0.15.0"
          },
          "other": {
            "$ref": "#/components/schemas/Other2"
          }
        }
      },
      "Option": {
        "title": "Option",
        "type": "object",
        "properties": {
          "option": {
            "$ref": "#/components/schemas/Option1"
          },
          "weight": {
            "type": "string"
          }
        }
      },
      "Option1": {
        "title": "Option1",
        "enum": [
          "VOTE_OPTION_UNSPECIFIED",
          "VOTE_OPTION_YES",
          "VOTE_OPTION_ABSTAIN",
          "VOTE_OPTION_NO",
          "VOTE_OPTION_NO_WITH_VETO"
        ],
        "type": "string",
        "description": "VoteOption enumerates the valid vote options for a given governance proposal.\n- VOTE_OPTION_UNSPECIFIED: VOTE_OPTION_UNSPECIFIED defines a no-op vote option. - VOTE_OPTION_YES: VOTE_OPTION_YES defines a yes vote option. - VOTE_OPTION_ABSTAIN: VOTE_OPTION_ABSTAIN defines an abstain vote option. - VOTE_OPTION_NO: VOTE_OPTION_NO defines a no vote option. - VOTE_OPTION_NO_WITH_VETO: VOTE_OPTION_NO_WITH_VETO defines a no with veto vote option."
      },
      "Option2": {
        "title": "Option2",
        "enum": [
          "VOTE_OPTION_UNSPECIFIED",
          "VOTE_OPTION_YES",
          "VOTE_OPTION_ABSTAIN",
          "VOTE_OPTION_NO",
          "VOTE_OPTION_NO_WITH_VETO"
        ],
        "type": "string",
        "description": "Deprecated: Prefer to use `options` instead. This field is set in queries\nif and only if `len(options) == 1` and that option has weight 1. In all\nother cases, this field will default to VOTE_OPTION_UNSPECIFIED."
      },
      "OracleParamsException1": {
        "title": "OracleParamsException1",
        "type": "object",
        "properties": {
          "error": {
            "type": "string"
          },
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          },
          "details": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Detail5"
            },
            "description": ""
          }
        }
      },
      "OracleParamsResponse": {
        "title": "OracleParamsResponse",
        "type": "object",
        "properties": {
          "params": {
            "$ref": "#/components/schemas/Params7"
          }
        },
        "description": "QueryParamsResponse is the response type for the Query/Params RPC method."
      },
      "order_by": {
        "title": "order_by",
        "enum": [
          "ORDER_BY_UNSPECIFIED",
          "ORDER_BY_ASC",
          "ORDER_BY_DESC"
        ],
        "type": "string"
      },
      "Other2": {
        "title": "Other2",
        "type": "object",
        "properties": {
          "tx_index": {
            "type": "string",
            "example": "on"
          },
          "rpc_address": {
            "type": "string",
            "example": "tcp://0.0.0.0:26657"
          }
        },
        "description": "more information on versions"
      },
      "Pagination": {
        "title": "Pagination",
        "type": "object",
        "properties": {
          "next_key": {
            "type": "string"
          },
          "total": {
            "type": "string"
          }
        },
        "description": "pagination defines the pagination in the response."
      },
      "Pagination1": {
        "title": "Pagination1",
        "type": "object",
        "properties": {
          "next_key": {
            "type": "string"
          },
          "total": {
            "type": "string"
          }
        },
        "description": "pagination defines an pagination for the response."
      },
      "Pagination4": {
        "title": "Pagination4",
        "type": "object",
        "properties": {
          "next_key": {
            "type": "string"
          },
          "total": {
            "type": "string"
          }
        },
        "description": "pagination defines the pagination in the response.\n\nSince: cosmos-sdk 0.43"
      },
      "Param": {
        "title": "Param",
        "type": "object",
        "properties": {
          "subspace": {
            "type": "string"
          },
          "key": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "description": "param defines the queried parameter."
      },
      "Params": {
        "title": "Params",
        "type": "object",
        "properties": {
          "max_memo_characters": {
            "type": "string"
          },
          "tx_sig_limit": {
            "type": "string"
          },
          "tx_size_cost_per_byte": {
            "type": "string"
          },
          "sig_verify_cost_ed25519": {
            "type": "string"
          },
          "sig_verify_cost_secp256k1": {
            "type": "string"
          }
        },
        "description": "params defines the parameters of the module."
      },
      "Params1": {
        "title": "Params1",
        "type": "object",
        "properties": {
          "send_enabled": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/cosmos.bank.v1beta1.SendEnabled"
            },
            "description": ""
          },
          "default_send_enabled": {
            "type": "boolean"
          }
        },
        "description": "Params defines the parameters for the bank module."
      },
      "Params2": {
        "title": "Params2",
        "type": "object",
        "properties": {
          "community_tax": {
            "type": "string"
          },
          "base_proposer_reward": {
            "type": "string"
          },
          "bonus_proposer_reward": {
            "type": "string"
          },
          "withdraw_addr_enabled": {
            "type": "boolean"
          }
        },
        "description": "params defines the parameters of the module."
      },
      "Params3": {
        "title": "Params3",
        "type": "object",
        "properties": {
          "mint_denom": {
            "type": "string"
          },
          "inflation_rate_change": {
            "type": "string"
          },
          "inflation_max": {
            "type": "string"
          },
          "inflation_min": {
            "type": "string"
          },
          "goal_bonded": {
            "type": "string"
          },
          "blocks_per_year": {
            "type": "string"
          }
        },
        "description": "params defines the parameters of the module."
      },
      "Params5": {
        "title": "Params5",
        "type": "object",
        "properties": {
          "unbonding_time": {
            "type": "string",
            "description": "unbonding_time is the time duration of unbonding."
          },
          "max_validators": {
            "type": "integer",
            "description": "max_validators is the maximum number of validators.",
            "format": "int64"
          },
          "max_entries": {
            "type": "integer",
            "description": "max_entries is the max entries for either unbonding delegation or redelegation (per pair/trio).",
            "format": "int64"
          },
          "historical_entries": {
            "type": "integer",
            "description": "historical_entries is the number of historical entries to persist.",
            "format": "int64"
          },
          "bond_denom": {
            "type": "string",
            "description": "bond_denom defines the bondable coin denomination."
          }
        },
        "description": "params holds all the parameters of this module."
      },
      "Params6": {
        "title": "Params6",
        "type": "object",
        "properties": {
          "base_pool": {
            "type": "string"
          },
          "pool_recovery_period": {
            "type": "string"
          },
          "min_stability_spread": {
            "type": "string"
          }
        },
        "description": "params defines the parameters of the module."
      },
      "Params7": {
        "title": "Params7",
        "type": "object",
        "properties": {
          "vote_period": {
            "type": "string"
          },
          "vote_threshold": {
            "type": "string"
          },
          "reward_band": {
            "type": "string"
          },
          "reward_distribution_window": {
            "type": "string"
          },
          "whitelist": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Denom-theobjecttoholdconfigurationsofeachdenom"
            },
            "description": ""
          },
          "slash_fraction": {
            "type": "string"
          },
          "slash_window": {
            "type": "string"
          },
          "min_valid_per_window": {
            "type": "string"
          }
        },
        "description": "params defines the parameters of the module."
      },
      "Params8": {
        "title": "Params8",
        "type": "object",
        "properties": {
          "tax_policy": {
            "$ref": "#/components/schemas/PolicyConstraints-definespolicyconstraintscanbeappliedintaxrewardpolicies"
          },
          "reward_policy": {
            "$ref": "#/components/schemas/PolicyConstraints-definespolicyconstraintscanbeappliedintaxrewardpolicies"
          },
          "seigniorage_burden_target": {
            "type": "string"
          },
          "mining_increment": {
            "type": "string"
          },
          "window_short": {
            "type": "string"
          },
          "window_long": {
            "type": "string"
          },
          "window_probation": {
            "type": "string"
          }
        },
        "description": "params defines the parameters of the module."
      },
      "Params9": {
        "title": "Params9",
        "type": "object",
        "properties": {
          "max_contract_size": {
            "type": "string"
          },
          "max_contract_gas": {
            "type": "string"
          },
          "max_contract_msg_size": {
            "type": "string"
          }
        },
        "description": "params defines the parameters of the module."
      },
      "Params10": {
        "title": "Params10",
        "type": "object",
        "properties": {
          "allowed_clients": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "allowed_clients defines the list of allowed client state types."
          }
        },
        "description": "params defines the parameters of the module."
      },
      "Params11": {
        "title": "Params11",
        "type": "object",
        "properties": {
          "send_enabled": {
            "type": "boolean",
            "description": "send_enabled enables or disables all cross-chain token transfers from this\nchain."
          },
          "receive_enabled": {
            "type": "boolean",
            "description": "receive_enabled enables or disables all cross-chain token transfers to this\nchain."
          }
        },
        "description": "params defines the parameters of the module."
      },
      "ParamsException1": {
        "title": "ParamsException1",
        "type": "object",
        "properties": {
          "error": {
            "type": "string"
          },
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          },
          "details": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Detail5"
            },
            "description": ""
          }
        }
      },
      "ParamsResponse": {
        "title": "ParamsResponse",
        "type": "object",
        "properties": {
          "param": {
            "$ref": "#/components/schemas/Param"
          }
        },
        "description": "QueryParamsResponse is response type for the Query/Params RPC method."
      },
      "Parts": {
        "title": "Parts",
        "type": "object",
        "properties": {
          "total": {
            "type": "number",
            "example": 0
          },
          "hash": {
            "type": "string",
            "example": "EE5F3404034C524501629B56E0DDC38FAD651F04"
          }
        }
      },
      "Plan": {
        "title": "Plan",
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Sets the name for the upgrade. This name will be used by the upgraded\nversion of the software to apply any special \"on-upgrade\" commands during\nthe first BeginBlock method after the upgrade is applied. It is also used\nto detect whether a software version can handle a given upgrade. If no\nupgrade handler with this name has been set in the software, it will be\nassumed that the software is out-of-date when the upgrade Time or Height is\nreached and the software will exit."
          },
          "time": {
            "type": "string",
            "description": "Deprecated: Time based upgrades have been deprecated. Time based upgrade logic\nhas been removed from the SDK.\nIf this field is not empty, an error will be thrown.",
            "format": "date-time"
          },
          "height": {
            "type": "string",
            "description": "The height at which the upgrade must be performed.\nOnly used if Time is not set."
          },
          "info": {
            "type": "string"
          },
          "upgraded_client_state": {
            "$ref": "#/components/schemas/google.protobuf.Any"
          }
        },
        "description": "plan is the current upgrade plan."
      },
      "Pool1": {
        "title": "Pool1",
        "type": "object",
        "properties": {
          "not_bonded_tokens": {
            "type": "string"
          },
          "bonded_tokens": {
            "type": "string"
          }
        },
        "description": "pool defines the pool info."
      },
      "PoolResponse": {
        "title": "PoolResponse",
        "type": "object",
        "properties": {
          "pool": {
            "$ref": "#/components/schemas/Pool1"
          }
        },
        "description": "QueryPoolResponse is response type for the Query/Pool RPC method."
      },
      "post_deposit_body": {
        "title": "post_deposit_body",
        "type": "object",
        "properties": {
          "base_req": {
            "$ref": "#/components/schemas/BaseReq"
          },
          "depositor": {
            "type": "string",
            "description": "bech32 encoded address",
            "example": "terra1wg2mlrxdmnnkkykgqg4znky86nyrtc45q336yv"
          },
          "amount": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Coin"
            },
            "description": ""
          }
        }
      },
      "post_proposal_body": {
        "title": "post_proposal_body",
        "type": "object",
        "properties": {
          "base_req": {
            "$ref": "#/components/schemas/BaseReq"
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "proposal_type": {
            "type": "string",
            "example": "text"
          },
          "proposer": {
            "type": "string",
            "description": "bech32 encoded address",
            "example": "terra1wg2mlrxdmnnkkykgqg4znky86nyrtc45q336yv"
          },
          "initial_deposit": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Coin"
            },
            "description": ""
          }
        }
      },
      "post_proposal_body1": {
        "title": "post_proposal_body1",
        "type": "object",
        "properties": {
          "base_req": {
            "$ref": "#/components/schemas/BaseReq"
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "proposer": {
            "type": "string",
            "description": "bech32 encoded address",
            "example": "terra1wg2mlrxdmnnkkykgqg4znky86nyrtc45q336yv"
          },
          "deposit": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Coin"
            },
            "description": ""
          },
          "changes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ParamChange"
            },
            "description": ""
          }
        }
      },
      "post_vote_body": {
        "title": "post_vote_body",
        "type": "object",
        "properties": {
          "base_req": {
            "$ref": "#/components/schemas/BaseReq"
          },
          "voter": {
            "type": "string",
            "description": "bech32 encoded address",
            "example": "terra1wg2mlrxdmnnkkykgqg4znky86nyrtc45q336yv"
          },
          "option": {
            "type": "string",
            "example": "yes"
          }
        }
      },
      "Precommit": {
        "title": "Precommit",
        "type": "object",
        "properties": {
          "validator_address": {
            "type": "string"
          },
          "validator_index": {
            "type": "string",
            "example": "0"
          },
          "height": {
            "type": "string",
            "example": "0"
          },
          "round": {
            "type": "string",
            "example": "0"
          },
          "timestamp": {
            "type": "string",
            "example": "2017-12-30T05:53:09.287+01:00"
          },
          "type": {
            "type": "number",
            "example": 2
          },
          "block_id": {
            "$ref": "#/components/schemas/BlockID"
          },
          "signature": {
            "type": "string",
            "example": "7uTC74QlknqYWEwg7Vn6M8Om7FuZ0EO4bjvuj6rwH1mTUJrRuMMZvAAqT9VjNgP0RA/TDp6u/92AqrZfXJSpBQ=="
          }
        }
      },
      "prevblockinfo": {
        "title": "prevblockinfo",
        "type": "object",
        "properties": {
          "hash": {
            "type": "string"
          },
          "part_set_header": {
            "$ref": "#/components/schemas/PartsetHeader"
          }
        }
      },
      "Proposal": {
        "title": "Proposal",
        "type": "object",
        "properties": {
          "proposal_id": {
            "type": "string"
          },
          "content": {
            "$ref": "#/components/schemas/google.protobuf.Any"
          },
          "status": {
            "$ref": "#/components/schemas/cosmos.gov.v1beta1.ProposalStatus"
          },
          "final_tally_result": {
            "$ref": "#/components/schemas/cosmos.gov.v1beta1.TallyResult"
          },
          "submit_time": {
            "type": "string",
            "format": "date-time"
          },
          "deposit_end_time": {
            "type": "string",
            "format": "date-time"
          },
          "total_deposit": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/cosmos.base.v1beta1.Coin"
            },
            "description": ""
          },
          "voting_start_time": {
            "type": "string",
            "format": "date-time"
          },
          "voting_end_time": {
            "type": "string",
            "format": "date-time"
          }
        },
        "description": "Proposal defines the core field members of a governance proposal."
      },
      "proposal_status": {
        "title": "proposal_status",
        "enum": [
          "PROPOSAL_STATUS_UNSPECIFIED",
          "PROPOSAL_STATUS_DEPOSIT_PERIOD",
          "PROPOSAL_STATUS_VOTING_PERIOD",
          "PROPOSAL_STATUS_PASSED",
          "PROPOSAL_STATUS_REJECTED",
          "PROPOSAL_STATUS_FAILED"
        ],
        "type": "string"
      },
      "ProposalResponse": {
        "title": "ProposalResponse",
        "type": "object",
        "properties": {
          "proposal": {
            "$ref": "#/components/schemas/cosmos.gov.v1beta1.Proposal"
          }
        },
        "description": "QueryProposalResponse is the response type for the Query/Proposal RPC method."
      },
      "ProposalsResponse": {
        "title": "ProposalsResponse",
        "type": "object",
        "properties": {
          "proposals": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/cosmos.gov.v1beta1.Proposal"
            },
            "description": ""
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        },
        "description": "QueryProposalsResponse is the response type for the Query/Proposals RPC\nmethod."
      },
      "QueryaproposalResponse": {
        "title": "QueryaproposalResponse",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "1"
          },
          "content": {
            "$ref": "#/components/schemas/Content"
          },
          "status": {
            "type": "number"
          },
          "final_tally_result": {
            "$ref": "#/components/schemas/TallyResult"
          },
          "total_deposit": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Coin"
            },
            "description": ""
          },
          "submit_time": {
            "type": "string"
          },
          "deposit_end_time": {
            "type": "string"
          },
          "voting_start_time": {
            "type": "string"
          },
          "voting_end_time": {
            "type": "string"
          }
        }
      },
      "QueryavalidatorthatadelegatorisbondedtoResponse": {
        "title": "QueryavalidatorthatadelegatorisbondedtoResponse",
        "type": "object",
        "properties": {
          "operator_address": {
            "type": "string",
            "description": "bech32 encoded address",
            "example": "terravaloper1wg2mlrxdmnnkkykgqg4znky86nyrtc45q7a85l"
          },
          "consensus_pubkey": {
            "$ref": "#/components/schemas/PublicKey"
          },
          "jailed": {
            "type": "boolean"
          },
          "status": {
            "type": "integer",
            "format": "int32"
          },
          "tokens": {
            "type": "string"
          },
          "delegator_shares": {
            "type": "string"
          },
          "description": {
            "$ref": "#/components/schemas/Description"
          },
          "bond_height": {
            "type": "string",
            "example": "0"
          },
          "bond_intra_tx_counter": {
            "type": "integer",
            "format": "int32",
            "example": 0
          },
          "unbonding_height": {
            "type": "string",
            "example": "0"
          },
          "unbonding_time": {
            "type": "string",
            "example": "1970-01-01T00:00:00Z"
          },
          "commission": {
            "$ref": "#/components/schemas/Commission"
          }
        }
      },
      "QueryallunbondingdelegationsbetweenadelegatorandavalidatorResponse": {
        "title": "QueryallunbondingdelegationsbetweenadelegatorandavalidatorResponse",
        "type": "object",
        "properties": {
          "delegator_address": {
            "type": "string"
          },
          "validator_address": {
            "type": "string"
          },
          "entries": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UnbondingEntry"
            },
            "description": ""
          }
        }
      },
      "QueryallvalidatorsthatadelegatorisbondedtoResponse": {
        "title": "QueryallvalidatorsthatadelegatorisbondedtoResponse",
        "type": "object",
        "properties": {
          "operator_address": {
            "type": "string",
            "description": "bech32 encoded address",
            "example": "terravaloper1wg2mlrxdmnnkkykgqg4znky86nyrtc45q7a85l"
          },
          "consensus_pubkey": {
            "$ref": "#/components/schemas/PublicKey"
          },
          "jailed": {
            "type": "boolean"
          },
          "status": {
            "type": "integer",
            "format": "int32"
          },
          "tokens": {
            "type": "string"
          },
          "delegator_shares": {
            "type": "string"
          },
          "description": {
            "$ref": "#/components/schemas/Description"
          },
          "bond_height": {
            "type": "string",
            "example": "0"
          },
          "bond_intra_tx_counter": {
            "type": "integer",
            "format": "int32",
            "example": 0
          },
          "unbonding_height": {
            "type": "string",
            "example": "0"
          },
          "unbonding_time": {
            "type": "string",
            "example": "1970-01-01T00:00:00Z"
          },
          "commission": {
            "$ref": "#/components/schemas/Commission"
          }
        }
      },
      "QuerygovernancedepositparametersResponse": {
        "title": "QuerygovernancedepositparametersResponse",
        "type": "object",
        "properties": {
          "min_deposit": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Coin"
            },
            "description": ""
          },
          "max_deposit_period": {
            "type": "string",
            "example": "86400000000000"
          }
        }
      },
      "QuerygovernancetallyparametersResponse": {
        "title": "QuerygovernancetallyparametersResponse",
        "type": "object",
        "properties": {
          "threshold": {
            "type": "string",
            "example": "0.5000000000"
          },
          "quorum": {
            "type": "string",
            "example": "0.3340000000"
          },
          "veto_threshold": {
            "type": "string",
            "example": "0.3340000000"
          }
        }
      },
      "QuerygovernancevotingparametersResponse": {
        "title": "QuerygovernancevotingparametersResponse",
        "type": "object",
        "properties": {
          "voting_period": {
            "type": "string",
            "example": "86400000000000"
          }
        }
      },
      "QueryproposalsResponse": {
        "title": "QueryproposalsResponse",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "1"
          },
          "content": {
            "$ref": "#/components/schemas/Content"
          },
          "status": {
            "type": "number"
          },
          "final_tally_result": {
            "$ref": "#/components/schemas/TallyResult"
          },
          "total_deposit": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Coin"
            },
            "description": ""
          },
          "submit_time": {
            "type": "string"
          },
          "deposit_end_time": {
            "type": "string"
          },
          "voting_start_time": {
            "type": "string"
          },
          "voting_end_time": {
            "type": "string"
          }
        }
      },
      "QuerythecurrentdelegationbetweenadelegatorandavalidatorResponse": {
        "title": "QuerythecurrentdelegationbetweenadelegatorandavalidatorResponse",
        "type": "object",
        "properties": {
          "delegation": {
            "$ref": "#/components/schemas/Delegation1"
          },
          "balance": {
            "$ref": "#/components/schemas/Coin"
          }
        }
      },
      "QuerytheinformationfromasinglevalidatorResponse": {
        "title": "QuerytheinformationfromasinglevalidatorResponse",
        "type": "object",
        "properties": {
          "operator_address": {
            "type": "string",
            "description": "bech32 encoded address",
            "example": "terravaloper1wg2mlrxdmnnkkykgqg4znky86nyrtc45q7a85l"
          },
          "consensus_pubkey": {
            "$ref": "#/components/schemas/PublicKey"
          },
          "jailed": {
            "type": "boolean"
          },
          "status": {
            "type": "integer",
            "format": "int32"
          },
          "tokens": {
            "type": "string"
          },
          "delegator_shares": {
            "type": "string"
          },
          "description": {
            "$ref": "#/components/schemas/Description"
          },
          "bond_height": {
            "type": "string",
            "example": "0"
          },
          "bond_intra_tx_counter": {
            "type": "integer",
            "format": "int32",
            "example": 0
          },
          "unbonding_height": {
            "type": "string",
            "example": "0"
          },
          "unbonding_time": {
            "type": "string",
            "example": "1970-01-01T00:00:00Z"
          },
          "commission": {
            "$ref": "#/components/schemas/Commission"
          }
        }
      },
      "QueryvoteResponse": {
        "title": "QueryvoteResponse",
        "type": "object",
        "properties": {
          "voter": {
            "type": "string"
          },
          "proposal_id": {
            "type": "string"
          },
          "options": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Option"
            },
            "description": ""
          }
        }
      },
      "QueryvotersResponse": {
        "title": "QueryvotersResponse",
        "type": "object",
        "properties": {
          "voter": {
            "type": "string"
          },
          "proposal_id": {
            "type": "string"
          },
          "options": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Option"
            },
            "description": ""
          }
        }
      },
      "QueryValidatorsResponseisresponsetypefortheQueryValidatorsRPCmethod1": {
        "title": "QueryValidatorsResponseisresponsetypefortheQueryValidatorsRPCmethod1",
        "type": "object",
        "properties": {
          "validators": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/cosmos.staking.v1beta1.Validator"
            },
            "description": "validators contains all the queried validators."
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        }
      },
      "RawStoreException1": {
        "title": "RawStoreException1",
        "type": "object",
        "properties": {
          "error": {
            "type": "string"
          },
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          },
          "details": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Detail5"
            },
            "description": ""
          }
        }
      },
      "Redelegation1": {
        "title": "Redelegation1",
        "type": "object",
        "properties": {
          "delegator_address": {
            "type": "string",
            "description": "delegator_address is the bech32-encoded address of the delegator."
          },
          "validator_src_address": {
            "type": "string",
            "description": "validator_src_address is the validator redelegation source operator address."
          },
          "validator_dst_address": {
            "type": "string",
            "description": "validator_dst_address is the validator redelegation destination operator address."
          },
          "entries": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/cosmos.staking.v1beta1.RedelegationEntry"
            },
            "description": "entries are the redelegation entries."
          }
        },
        "description": "Redelegation contains the list of a particular delegator's redelegating bonds\nfrom a particular source validator to a particular destination validator."
      },
      "RedelegationResponse": {
        "title": "RedelegationResponse",
        "type": "object",
        "properties": {
          "redelegation": {
            "$ref": "#/components/schemas/cosmos.staking.v1beta1.Redelegation"
          },
          "entries": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/cosmos.staking.v1beta1.RedelegationEntryResponse"
            },
            "description": ""
          }
        },
        "description": "RedelegationResponse is equivalent to a Redelegation except that its entries\ncontain a balance in addition to shares which is more suitable for client\nresponses."
      },
      "RedelegationsResponse": {
        "title": "RedelegationsResponse",
        "type": "object",
        "properties": {
          "redelegation_responses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RedelegationResponse"
            },
            "description": ""
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        },
        "description": "QueryRedelegationsResponse is response type for the Query/Redelegations RPC\nmethod."
      },
      "ReplacetherewardswithdrawaladdressResponse": {
        "title": "ReplacetherewardswithdrawaladdressResponse",
        "type": "object",
        "properties": {
          "msg": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": ""
          },
          "fee": {
            "$ref": "#/components/schemas/Fee"
          },
          "memo": {
            "type": "string"
          },
          "signature": {
            "$ref": "#/components/schemas/Signature"
          }
        }
      },
      "Result": {
        "title": "Result",
        "type": "object",
        "properties": {
          "log": {
            "type": "string"
          },
          "gas_wanted": {
            "type": "string",
            "example": "200000"
          },
          "gas_used": {
            "type": "string",
            "example": "26354"
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/KVPair"
            },
            "description": ""
          }
        }
      },
      "Result2": {
        "title": "Result2",
        "type": "object",
        "properties": {
          "data": {
            "type": "string",
            "description": "Data is any data returned from message or handler execution. It MUST be\nlength prefixed in order to separate data from multiple message executions."
          },
          "log": {
            "type": "string",
            "description": "Log contains the log information from message or handler execution."
          },
          "events": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/tendermint.abci.Event"
            },
            "description": "Events contains a slice of Event objects that were emitted during message\nor handler execution."
          }
        },
        "description": "result is the result of the simulation."
      },
      "ReturnCoin": {
        "title": "ReturnCoin",
        "type": "object",
        "properties": {
          "denom": {
            "type": "string"
          },
          "amount": {
            "type": "string"
          }
        },
        "description": "return_coin defines the coin returned as a result of the swap simulation."
      },
      "RewardWeightException1": {
        "title": "RewardWeightException1",
        "type": "object",
        "properties": {
          "error": {
            "type": "string"
          },
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          },
          "details": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Detail5"
            },
            "description": ""
          }
        }
      },
      "SearchtransactionsResponse": {
        "title": "SearchtransactionsResponse",
        "type": "object",
        "properties": {
          "total_count": {
            "type": "number",
            "example": 1
          },
          "count": {
            "type": "number",
            "example": 1
          },
          "page_number": {
            "type": "number",
            "example": 1
          },
          "page_total": {
            "type": "number",
            "example": 1
          },
          "limit": {
            "type": "number",
            "example": 30
          },
          "txs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TxQuery"
            },
            "description": ""
          }
        }
      },
      "SeigniorageProceedsException1": {
        "title": "SeigniorageProceedsException1",
        "type": "object",
        "properties": {
          "error": {
            "type": "string"
          },
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          },
          "details": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Detail5"
            },
            "description": ""
          }
        }
      },
      "SendcoinsfromoneaccounttoanotherResponse": {
        "title": "SendcoinsfromoneaccounttoanotherResponse",
        "type": "object",
        "properties": {
          "msg": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": ""
          },
          "fee": {
            "$ref": "#/components/schemas/Fee"
          },
          "memo": {
            "type": "string"
          },
          "signature": {
            "$ref": "#/components/schemas/Signature"
          }
        }
      },
      "Signature": {
        "title": "Signature",
        "type": "object",
        "properties": {
          "signature": {
            "type": "string",
            "example": "MEUCIQD02fsDPra8MtbRsyB1w7bqTM55Wu138zQbFcWx4+CFyAIge5WNPfKIuvzBZ69MyqHsqD8S1IwiEp+iUb6VSdtlpgY="
          },
          "pub_key": {
            "$ref": "#/components/schemas/PublicKey"
          },
          "account_number": {
            "type": "string",
            "example": "0"
          },
          "sequence": {
            "type": "string",
            "example": "0"
          }
        }
      },
      "SignedHeader": {
        "title": "SignedHeader",
        "type": "object",
        "properties": {
          "header": {
            "$ref": "#/components/schemas/tendermint.types.Header"
          },
          "commit": {
            "$ref": "#/components/schemas/tendermint.types.Commit"
          }
        }
      },
      "SigningInfoException1": {
        "title": "SigningInfoException1",
        "type": "object",
        "properties": {
          "error": {
            "type": "string"
          },
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          },
          "details": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Detail5"
            },
            "description": ""
          }
        }
      },
      "SigningInfosException1": {
        "title": "SigningInfosException1",
        "type": "object",
        "properties": {
          "error": {
            "type": "string"
          },
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          },
          "details": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Detail5"
            },
            "description": ""
          }
        }
      },
      "SimulateResponse": {
        "title": "SimulateResponse",
        "type": "object",
        "properties": {
          "gas_info": {
            "$ref": "#/components/schemas/GasInfo"
          },
          "result": {
            "$ref": "#/components/schemas/Result2"
          }
        },
        "description": "SimulateResponse is the response type for the\nService.SimulateRPC method."
      },
      "SlashingParamsException1": {
        "title": "SlashingParamsException1",
        "type": "object",
        "properties": {
          "error": {
            "type": "string"
          },
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          },
          "details": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Detail5"
            },
            "description": ""
          }
        }
      },
      "StakingDelegatorValidatorsResponse": {
        "title": "StakingDelegatorValidatorsResponse",
        "type": "object",
        "properties": {
          "validators": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/cosmos.staking.v1beta1.Validator"
            },
            "description": "validators defines the the validators' info of a delegator."
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        },
        "description": "QueryDelegatorValidatorsResponse is response type for the\nQuery/DelegatorValidators RPC method."
      },
      "StakingParamsResponse": {
        "title": "StakingParamsResponse",
        "type": "object",
        "properties": {
          "params": {
            "$ref": "#/components/schemas/Params5"
          }
        },
        "description": "QueryParamsResponse is response type for the Query/Params RPC method."
      },
      "State": {
        "title": "State",
        "enum": [
          "STATE_UNINITIALIZED_UNSPECIFIED",
          "STATE_INIT",
          "STATE_TRYOPEN",
          "STATE_OPEN"
        ],
        "type": "string",
        "description": "current state of the connection end."
      },
      "Status3": {
        "title": "Status3",
        "enum": [
          "BOND_STATUS_UNSPECIFIED",
          "BOND_STATUS_UNBONDED",
          "BOND_STATUS_UNBONDING",
          "BOND_STATUS_BONDED"
        ],
        "type": "string",
        "description": "status is the validator status (bonded/unbonding/unbonded)."
      },
      "SubmitaproposalResponse": {
        "title": "SubmitaproposalResponse",
        "type": "object",
        "properties": {
          "msg": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": ""
          },
          "fee": {
            "$ref": "#/components/schemas/Fee"
          },
          "memo": {
            "type": "string"
          },
          "signature": {
            "$ref": "#/components/schemas/Signature"
          }
        }
      },
      "SubmitaredelegationResponse": {
        "title": "SubmitaredelegationResponse",
        "type": "object",
        "properties": {
          "msg": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": ""
          },
          "fee": {
            "$ref": "#/components/schemas/Fee"
          },
          "memo": {
            "type": "string"
          },
          "signature": {
            "$ref": "#/components/schemas/Signature"
          }
        }
      },
      "SubmitanunbondingdelegationResponse": {
        "title": "SubmitanunbondingdelegationResponse",
        "type": "object",
        "properties": {
          "msg": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": ""
          },
          "fee": {
            "$ref": "#/components/schemas/Fee"
          },
          "memo": {
            "type": "string"
          },
          "signature": {
            "$ref": "#/components/schemas/Signature"
          }
        }
      },
      "SubmitdelegationResponse": {
        "title": "SubmitdelegationResponse",
        "type": "object",
        "properties": {
          "msg": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": ""
          },
          "fee": {
            "$ref": "#/components/schemas/Fee"
          },
          "memo": {
            "type": "string"
          },
          "signature": {
            "$ref": "#/components/schemas/Signature"
          }
        }
      },
      "SupplyOfException1": {
        "title": "SupplyOfException1",
        "type": "object",
        "properties": {
          "error": {
            "type": "string"
          },
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          },
          "details": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Detail5"
            },
            "description": ""
          }
        }
      },
      "SupplyOfResponse": {
        "title": "SupplyOfResponse",
        "type": "object",
        "properties": {
          "amount": {
            "$ref": "#/components/schemas/cosmos.base.v1beta1.Coin"
          }
        },
        "description": "QuerySupplyOfResponse is the response type for the Query/SupplyOf RPC method."
      },
      "SwapcoinwithanothercoinResponse": {
        "title": "SwapcoinwithanothercoinResponse",
        "type": "object",
        "properties": {
          "msg": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": ""
          },
          "fee": {
            "$ref": "#/components/schemas/Fee"
          },
          "memo": {
            "type": "string"
          },
          "signature": {
            "$ref": "#/components/schemas/Signature"
          }
        }
      },
      "SwapException1": {
        "title": "SwapException1",
        "type": "object",
        "properties": {
          "error": {
            "type": "string"
          },
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          },
          "details": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Detail5"
            },
            "description": ""
          }
        }
      },
      "SwapResponse": {
        "title": "SwapResponse",
        "type": "object",
        "properties": {
          "return_coin": {
            "$ref": "#/components/schemas/ReturnCoin"
          }
        },
        "description": "QuerySwapResponse is the response type for the Query/Swap RPC method."
      },
      "SyncingstateofnodeResponse": {
        "title": "SyncingstateofnodeResponse",
        "type": "object",
        "properties": {
          "syncing": {
            "type": "boolean"
          }
        }
      },
      "TallyParams": {
        "title": "TallyParams",
        "type": "object",
        "properties": {
          "quorum": {
            "type": "string",
            "description": "Minimum percentage of total stake needed to vote for a result to be\n considered valid."
          },
          "threshold": {
            "type": "string",
            "description": "Minimum proportion of Yes votes for proposal to pass. Default value: 0.5."
          },
          "veto_threshold": {
            "type": "string",
            "description": "Minimum value of Veto votes to Total votes ratio for proposal to be\n vetoed. Default value: 1/3."
          }
        },
        "description": "tally_params defines the parameters related to tally."
      },
      "TallyResultResponse": {
        "title": "TallyResultResponse",
        "type": "object",
        "properties": {
          "tally": {
            "$ref": "#/components/schemas/cosmos.gov.v1beta1.TallyResult"
          }
        },
        "description": "QueryTallyResultResponse is the response type for the Query/Tally RPC method."
      },
      "TaxCapException1": {
        "title": "TaxCapException1",
        "type": "object",
        "properties": {
          "error": {
            "type": "string"
          },
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          },
          "details": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Detail5"
            },
            "description": ""
          }
        }
      },
      "TaxCapsException1": {
        "title": "TaxCapsException1",
        "type": "object",
        "properties": {
          "error": {
            "type": "string"
          },
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          },
          "details": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Detail5"
            },
            "description": ""
          }
        }
      },
      "TaxCapsResponse": {
        "title": "TaxCapsResponse",
        "type": "object",
        "properties": {
          "tax_caps": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/terra.treasury.v1beta1.QueryTaxCapsResponseItem"
            },
            "description": ""
          }
        },
        "description": "QueryTaxCapsResponse is response type for the\nQuery/TaxCaps RPC method."
      },
      "TaxProceedsException1": {
        "title": "TaxProceedsException1",
        "type": "object",
        "properties": {
          "error": {
            "type": "string"
          },
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          },
          "details": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Detail5"
            },
            "description": ""
          }
        }
      },
      "TaxRateException1": {
        "title": "TaxRateException1",
        "type": "object",
        "properties": {
          "error": {
            "type": "string"
          },
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          },
          "details": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Detail5"
            },
            "description": ""
          }
        }
      },
      "TerraPoolDeltaException1": {
        "title": "TerraPoolDeltaException1",
        "type": "object",
        "properties": {
          "error": {
            "type": "string"
          },
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          },
          "details": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Detail5"
            },
            "description": ""
          }
        }
      },
      "ThepropertiesoftheconnectednodeResponse": {
        "title": "ThepropertiesoftheconnectednodeResponse",
        "type": "object",
        "properties": {
          "application_version": {
            "$ref": "#/components/schemas/ApplicationVersion1"
          },
          "node_info": {
            "$ref": "#/components/schemas/NodeInfo"
          }
        }
      },
      "TobinTaxesException1": {
        "title": "TobinTaxesException1",
        "type": "object",
        "properties": {
          "error": {
            "type": "string"
          },
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          },
          "details": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Detail5"
            },
            "description": ""
          }
        }
      },
      "TobinTaxException1": {
        "title": "TobinTaxException1",
        "type": "object",
        "properties": {
          "error": {
            "type": "string"
          },
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          },
          "details": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Detail5"
            },
            "description": ""
          }
        }
      },
      "TotalSupplyException1": {
        "title": "TotalSupplyException1",
        "type": "object",
        "properties": {
          "error": {
            "type": "string"
          },
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          },
          "details": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Detail5"
            },
            "description": ""
          }
        }
      },
      "transaction": {
        "title": "transaction",
        "type": "object",
        "properties": {
          "base_req": {
            "$ref": "#/components/schemas/BaseReq"
          },
          "msgs": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": ""
          }
        }
      },
      "TreasuryParamsException1": {
        "title": "TreasuryParamsException1",
        "type": "object",
        "properties": {
          "error": {
            "type": "string"
          },
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          },
          "details": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Detail5"
            },
            "description": ""
          }
        }
      },
      "TreasuryParamsResponse": {
        "title": "TreasuryParamsResponse",
        "type": "object",
        "properties": {
          "params": {
            "$ref": "#/components/schemas/Params8"
          }
        },
        "description": "QueryParamsResponse is the response type for the Query/Params RPC method."
      },
      "Tx": {
        "title": "Tx",
        "type": "object",
        "properties": {
          "msg": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": ""
          },
          "fee": {
            "$ref": "#/components/schemas/Fee"
          },
          "memo": {
            "type": "string"
          },
          "signature": {
            "$ref": "#/components/schemas/Signature"
          }
        }
      },
      "Tx1": {
        "title": "Tx1",
        "type": "object",
        "properties": {
          "hash": {
            "type": "string",
            "example": "D085138D913993919295FF4B0A9107F1F2CDE0D37A87CE0644E217CBF3B49656"
          },
          "height": {
            "type": "number",
            "example": 368
          },
          "tx": {
            "$ref": "#/components/schemas/Tx"
          },
          "result": {
            "$ref": "#/components/schemas/Result"
          }
        }
      },
      "tx10": {
        "title": "tx10",
        "type": "object",
        "properties": {
          "tx": {
            "$ref": "#/components/schemas/StdTx"
          },
          "sequences": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": ""
          },
          "fee_granter": {
            "type": "string",
            "description": "bech32 encoded address",
            "example": "terra1wg2mlrxdmnnkkykgqg4znky86nyrtc45q336yv"
          }
        }
      },
      "tx12": {
        "title": "tx12",
        "type": "object",
        "properties": {
          "tx": {
            "type": "string",
            "example": "SvBiXe4KPqijYZoKFFHEzJ8c2HPAfv2EFUcIhx0yPagwEhTy0vPA+GGhCEslKXa4Af0uB+mfShoMCgVzdGFrZRIDMTAwEgQQwJoM"
          }
        }
      },
      "txBroadcast": {
        "title": "txBroadcast",
        "type": "object",
        "properties": {
          "tx": {
            "$ref": "#/components/schemas/StdTx"
          },
          "mode": {
            "type": "string",
            "example": "block"
          },
          "sequences": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": ""
          },
          "fee_granter": {
            "type": "string",
            "description": "bech32 encoded address",
            "example": "terra1wg2mlrxdmnnkkykgqg4znky86nyrtc45q336yv"
          }
        }
      },
      "TxResponse": {
        "title": "TxResponse",
        "type": "object",
        "properties": {
          "height": {
            "type": "string"
          },
          "txhash": {
            "type": "string",
            "description": "The transaction hash."
          },
          "codespace": {
            "type": "string"
          },
          "code": {
            "type": "integer",
            "description": "Response code.",
            "format": "int64"
          },
          "data": {
            "type": "string",
            "description": "Result bytes, if any."
          },
          "raw_log": {
            "type": "string",
            "description": "The output of the application's logger (raw string). May be\nnon-deterministic."
          },
          "logs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/cosmos.base.abci.v1beta1.ABCIMessageLog"
            },
            "description": "The output of the application's logger (typed). May be non-deterministic."
          },
          "info": {
            "type": "string",
            "description": "Additional information. May be non-deterministic."
          },
          "gas_wanted": {
            "type": "string",
            "description": "Amount of gas requested for transaction."
          },
          "gas_used": {
            "type": "string",
            "description": "Amount of gas consumed by transaction."
          },
          "tx": {
            "$ref": "#/components/schemas/google.protobuf.Any"
          },
          "timestamp": {
            "type": "string",
            "description": "Time of the previous block. For heights > 1, it's the weighted median of\nthe timestamps of the valid votes in the block.LastCommit. For height == 1,\nit's genesis time."
          },
          "events": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Event1"
            },
            "description": "Events defines all the events emitted by processing a transaction. Note,\nthese events include those emitted by processing all the messages and those\nemitted from the ante handler. Whereas Logs contains the events, with\nadditional metadata, emitted only by processing the messages.\n\nSince: cosmos-sdk 0.42.11, 0.44.5, 0.45"
          }
        },
        "description": "TxResponse defines a structure containing relevant tx data and metadata. The\ntags are stringified and the log is JSON decoded."
      },
      "Txs1": {
        "title": "Txs1",
        "type": "object",
        "properties": {
          "hash": {
            "type": "string",
            "example": "D085138D913993919295FF4B0A9107F1F2CDE0D37A87CE0644E217CBF3B49656"
          },
          "height": {
            "type": "number",
            "example": 368
          },
          "tx": {
            "$ref": "#/components/schemas/Tx"
          },
          "result": {
            "$ref": "#/components/schemas/Result"
          }
        }
      },
      "Unbond": {
        "title": "Unbond",
        "type": "object",
        "properties": {
          "delegator_address": {
            "type": "string",
            "description": "delegator_address is the bech32-encoded address of the delegator."
          },
          "validator_address": {
            "type": "string",
            "description": "validator_address is the bech32-encoded address of the validator."
          },
          "entries": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/cosmos.staking.v1beta1.UnbondingDelegationEntry"
            },
            "description": "entries are the unbonding delegation entries."
          }
        },
        "description": "UnbondingDelegation stores all of a single delegator's unbonding bonds\nfor a single validator in an time-ordered list."
      },
      "UnbondingDelegationResponse": {
        "title": "UnbondingDelegationResponse",
        "type": "object",
        "properties": {
          "unbond": {
            "$ref": "#/components/schemas/Unbond"
          }
        },
        "description": "QueryDelegationResponse is response type for the Query/UnbondingDelegation\nRPC method."
      },
      "UnbondingResponse": {
        "title": "UnbondingResponse",
        "type": "object",
        "properties": {
          "delegator_address": {
            "type": "string",
            "description": "delegator_address is the bech32-encoded address of the delegator."
          },
          "validator_address": {
            "type": "string",
            "description": "validator_address is the bech32-encoded address of the validator."
          },
          "entries": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/cosmos.staking.v1beta1.UnbondingDelegationEntry"
            },
            "description": "entries are the unbonding delegation entries."
          }
        },
        "description": "UnbondingDelegation stores all of a single delegator's unbonding bonds\nfor a single validator in an time-ordered list."
      },
      "UnjailajailedvalidatorResponse": {
        "title": "UnjailajailedvalidatorResponse",
        "type": "object",
        "properties": {
          "msg": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": ""
          },
          "fee": {
            "$ref": "#/components/schemas/Fee"
          },
          "memo": {
            "type": "string"
          },
          "signature": {
            "$ref": "#/components/schemas/Signature"
          }
        }
      },
      "UnjailBody": {
        "title": "UnjailBody",
        "type": "object",
        "properties": {
          "base_req": {
            "$ref": "#/components/schemas/StdTx"
          }
        }
      },
      "UpdatewasmcontractadmintonewaddressResponse": {
        "title": "UpdatewasmcontractadmintonewaddressResponse",
        "type": "object",
        "properties": {
          "msg": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": ""
          },
          "fee": {
            "$ref": "#/components/schemas/Fee"
          },
          "memo": {
            "type": "string"
          },
          "signature": {
            "$ref": "#/components/schemas/Signature"
          }
        }
      },
      "ValCommission": {
        "title": "ValCommission",
        "type": "object",
        "properties": {
          "commission": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Coin"
            },
            "description": ""
          }
        }
      },
      "ValidatordistributioninformationResponse": {
        "title": "ValidatordistributioninformationResponse",
        "type": "object",
        "properties": {
          "operator_address": {
            "type": "string",
            "description": "bech32 encoded address",
            "example": "terravaloper1wg2mlrxdmnnkkykgqg4znky86nyrtc45q7a85l"
          },
          "self_bond_rewards": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Coin"
            },
            "description": ""
          },
          "val_commission": {
            "$ref": "#/components/schemas/ValCommission"
          }
        }
      },
      "Validator11": {
        "title": "Validator11",
        "type": "object",
        "properties": {
          "operator_address": {
            "type": "string",
            "description": "operator_address defines the address of the validator's operator; bech encoded in JSON."
          },
          "consensus_pubkey": {
            "$ref": "#/components/schemas/google.protobuf.Any"
          },
          "jailed": {
            "type": "boolean",
            "description": "jailed defined whether the validator has been jailed from bonded status or not."
          },
          "status": {
            "$ref": "#/components/schemas/Status3"
          },
          "tokens": {
            "type": "string",
            "description": "tokens define the delegated tokens (incl. self-delegation)."
          },
          "delegator_shares": {
            "type": "string",
            "description": "delegator_shares defines total shares issued to a validator's delegators."
          },
          "description": {
            "$ref": "#/components/schemas/Description1"
          },
          "unbonding_height": {
            "type": "string",
            "description": "unbonding_height defines, if unbonding, the height at which this validator has begun unbonding."
          },
          "unbonding_time": {
            "type": "string",
            "description": "unbonding_time defines, if unbonding, the min time for the validator to complete unbonding.",
            "format": "date-time"
          },
          "commission": {
            "$ref": "#/components/schemas/Commission5"
          },
          "min_self_delegation": {
            "type": "string",
            "description": "min_self_delegation is the validator's self declared minimum self delegation."
          }
        },
        "description": "Validator defines a validator, together with the total amount of the\nValidator's bond shares and their exchange rate to coins. Slashing results in\na decrease in the exchange rate, allowing correct calculation of future\nundelegations without iterating over delegators. When coins are delegated to\nthis validator, the validator is credited with a delegation whose number of\nbond shares is based on the amount of coins delegated divided by the current\nexchange rate. Voting power can be calculated as total bonded shares\nmultiplied by exchange rate."
      },
      "ValidatorCommissionException1": {
        "title": "ValidatorCommissionException1",
        "type": "object",
        "properties": {
          "error": {
            "type": "string"
          },
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          },
          "details": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Detail5"
            },
            "description": ""
          }
        }
      },
      "ValidatorOutstandingRewardsException1": {
        "title": "ValidatorOutstandingRewardsException1",
        "type": "object",
        "properties": {
          "error": {
            "type": "string"
          },
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          },
          "details": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Detail5"
            },
            "description": ""
          }
        }
      },
      "ValidatorOutstandingRewardsResponse": {
        "title": "ValidatorOutstandingRewardsResponse",
        "type": "object",
        "properties": {
          "rewards": {
            "$ref": "#/components/schemas/cosmos.distribution.v1beta1.ValidatorOutstandingRewards"
          }
        },
        "description": "QueryValidatorOutstandingRewardsResponse is the response type for the\nQuery/ValidatorOutstandingRewards RPC method."
      },
      "Validators1": {
        "title": "Validators1",
        "type": "object",
        "properties": {
          "address": {
            "type": "string",
            "description": "bech32 encoded address",
            "example": "terravaloper1wg2mlrxdmnnkkykgqg4znky86nyrtc45q7a85l"
          },
          "pub_key": {
            "$ref": "#/components/schemas/PublicKey"
          },
          "voting_power": {
            "type": "string",
            "example": "1000"
          },
          "proposer_priority": {
            "type": "string",
            "example": "1000"
          }
        }
      },
      "Validators7": {
        "title": "Validators7",
        "type": "object",
        "properties": {
          "operator_address": {
            "type": "string",
            "description": "operator_address defines the address of the validator's operator; bech encoded in JSON."
          },
          "consensus_pubkey": {
            "$ref": "#/components/schemas/google.protobuf.Any"
          },
          "jailed": {
            "type": "boolean",
            "description": "jailed defined whether the validator has been jailed from bonded status or not."
          },
          "status": {
            "$ref": "#/components/schemas/Status3"
          },
          "tokens": {
            "type": "string",
            "description": "tokens define the delegated tokens (incl. self-delegation)."
          },
          "delegator_shares": {
            "type": "string",
            "description": "delegator_shares defines total shares issued to a validator's delegators."
          },
          "description": {
            "$ref": "#/components/schemas/Description1"
          },
          "unbonding_height": {
            "type": "string",
            "description": "unbonding_height defines, if unbonding, the height at which this validator has begun unbonding."
          },
          "unbonding_time": {
            "type": "string",
            "description": "unbonding_time defines, if unbonding, the min time for the validator to complete unbonding.",
            "format": "date-time"
          },
          "commission": {
            "$ref": "#/components/schemas/Commission5"
          },
          "min_self_delegation": {
            "type": "string",
            "description": "min_self_delegation is the validator's self declared minimum self delegation."
          }
        },
        "description": "Validator defines a validator, together with the total amount of the\nValidator's bond shares and their exchange rate to coins. Slashing results in\na decrease in the exchange rate, allowing correct calculation of future\nundelegations without iterating over delegators. When coins are delegated to\nthis validator, the validator is credited with a delegation whose number of\nbond shares is based on the amount of coins delegated divided by the current\nexchange rate. Voting power can be calculated as total bonded shares\nmultiplied by exchange rate."
      },
      "ValidatorSlashesException1": {
        "title": "ValidatorSlashesException1",
        "type": "object",
        "properties": {
          "error": {
            "type": "string"
          },
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          },
          "details": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Detail5"
            },
            "description": ""
          }
        }
      },
      "ValidatorSlashesResponse": {
        "title": "ValidatorSlashesResponse",
        "type": "object",
        "properties": {
          "slashes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/cosmos.distribution.v1beta1.ValidatorSlashEvent"
            },
            "description": "slashes defines the slashes the validator received."
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        },
        "description": "QueryValidatorSlashesResponse is the response type for the\nQuery/ValidatorSlashes RPC method."
      },
      "ValidatorUnbondingDelegationsResponse": {
        "title": "ValidatorUnbondingDelegationsResponse",
        "type": "object",
        "properties": {
          "unbonding_responses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UnbondingResponse"
            },
            "description": ""
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        },
        "description": "QueryValidatorUnbondingDelegationsResponse is response type for the\nQuery/ValidatorUnbondingDelegations RPC method."
      },
      "Valset": {
        "title": "Valset",
        "type": "object",
        "properties": {
          "operator_address": {
            "type": "string",
            "description": "operator_address defines the address of the validator's operator; bech encoded in JSON."
          },
          "consensus_pubkey": {
            "$ref": "#/components/schemas/google.protobuf.Any"
          },
          "jailed": {
            "type": "boolean",
            "description": "jailed defined whether the validator has been jailed from bonded status or not."
          },
          "status": {
            "$ref": "#/components/schemas/Status3"
          },
          "tokens": {
            "type": "string",
            "description": "tokens define the delegated tokens (incl. self-delegation)."
          },
          "delegator_shares": {
            "type": "string",
            "description": "delegator_shares defines total shares issued to a validator's delegators."
          },
          "description": {
            "$ref": "#/components/schemas/Description1"
          },
          "unbonding_height": {
            "type": "string",
            "description": "unbonding_height defines, if unbonding, the height at which this validator has begun unbonding."
          },
          "unbonding_time": {
            "type": "string",
            "description": "unbonding_time defines, if unbonding, the min time for the validator to complete unbonding.",
            "format": "date-time"
          },
          "commission": {
            "$ref": "#/components/schemas/Commission5"
          },
          "min_self_delegation": {
            "type": "string",
            "description": "min_self_delegation is the validator's self declared minimum self delegation."
          }
        },
        "description": "Validator defines a validator, together with the total amount of the\nValidator's bond shares and their exchange rate to coins. Slashing results in\na decrease in the exchange rate, allowing correct calculation of future\nundelegations without iterating over delegators. When coins are delegated to\nthis validator, the validator is credited with a delegation whose number of\nbond shares is based on the amount of coins delegated divided by the current\nexchange rate. Voting power can be calculated as total bonded shares\nmultiplied by exchange rate."
      },
      "Value": {
        "title": "Value",
        "type": "object",
        "properties": {
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        }
      },
      "Value3": {
        "title": "Value3",
        "type": "object",
        "properties": {
          "msg_type": {
            "type": "string",
            "example": "send"
          }
        }
      },
      "Value4": {
        "title": "Value4",
        "type": "object",
        "properties": {
          "spend_limit": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Coin"
            },
            "description": ""
          }
        }
      },
      "Version": {
        "title": "Version",
        "type": "object",
        "properties": {
          "block": {
            "type": "string",
            "example": "10"
          },
          "app": {
            "type": "string",
            "example": "0"
          }
        }
      },
      "VoteaproposalResponse": {
        "title": "VoteaproposalResponse",
        "type": "object",
        "properties": {
          "msg": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": ""
          },
          "fee": {
            "$ref": "#/components/schemas/Fee"
          },
          "memo": {
            "type": "string"
          },
          "signature": {
            "$ref": "#/components/schemas/Signature"
          }
        }
      },
      "Vote1": {
        "title": "Vote1",
        "type": "object",
        "properties": {
          "proposal_id": {
            "type": "string"
          },
          "voter": {
            "type": "string"
          },
          "option": {
            "$ref": "#/components/schemas/Option2"
          },
          "options": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/cosmos.gov.v1beta1.WeightedVoteOption"
            },
            "description": ""
          }
        },
        "description": "Vote defines a vote on a governance proposal.\nA Vote consists of a proposal ID, the voter, and the vote option."
      },
      "VoteA": {
        "title": "VoteA",
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/tendermint.types.SignedMsgType"
          },
          "height": {
            "type": "string"
          },
          "round": {
            "type": "integer",
            "format": "int32"
          },
          "block_id": {
            "$ref": "#/components/schemas/BlockID26"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "validator_address": {
            "type": "string"
          },
          "validator_index": {
            "type": "integer",
            "format": "int32"
          },
          "signature": {
            "type": "string"
          }
        },
        "description": "Vote represents a prevote, precommit, or commit vote from validators for\nconsensus."
      },
      "VoteB": {
        "title": "VoteB",
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/tendermint.types.SignedMsgType"
          },
          "height": {
            "type": "string"
          },
          "round": {
            "type": "integer",
            "format": "int32"
          },
          "block_id": {
            "$ref": "#/components/schemas/BlockID26"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "validator_address": {
            "type": "string"
          },
          "validator_index": {
            "type": "integer",
            "format": "int32"
          },
          "signature": {
            "type": "string"
          }
        },
        "description": "Vote represents a prevote, precommit, or commit vote from validators for\nconsensus."
      },
      "VoteResponse": {
        "title": "VoteResponse",
        "type": "object",
        "properties": {
          "vote": {
            "$ref": "#/components/schemas/Vote1"
          }
        },
        "description": "QueryVoteResponse is the response type for the Query/Vote RPC method."
      },
      "VotesResponse": {
        "title": "VotesResponse",
        "type": "object",
        "properties": {
          "votes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Vote1"
            },
            "description": "votes defined the queried votes."
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        },
        "description": "QueryVotesResponse is the response type for the Query/Votes RPC method."
      },
      "VoteTargetsException1": {
        "title": "VoteTargetsException1",
        "type": "object",
        "properties": {
          "error": {
            "type": "string"
          },
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          },
          "details": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Detail5"
            },
            "description": ""
          }
        }
      },
      "VotingParams": {
        "title": "VotingParams",
        "type": "object",
        "properties": {
          "voting_period": {
            "type": "string",
            "description": "Length of the voting period."
          }
        },
        "description": "voting_params defines the parameters related to voting."
      },
      "WasmParamsException1": {
        "title": "WasmParamsException1",
        "type": "object",
        "properties": {
          "error": {
            "type": "string"
          },
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          },
          "details": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Detail5"
            },
            "description": ""
          }
        }
      },
      "WasmParamsResponse": {
        "title": "WasmParamsResponse",
        "type": "object",
        "properties": {
          "params": {
            "$ref": "#/components/schemas/Params9"
          }
        },
        "description": "QueryParamsResponse is the response type for the Query/Params RPC method."
      },
      "WithdrawadelegationrewardResponse": {
        "title": "WithdrawadelegationrewardResponse",
        "type": "object",
        "properties": {
          "msg": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": ""
          },
          "fee": {
            "$ref": "#/components/schemas/Fee"
          },
          "memo": {
            "type": "string"
          },
          "signature": {
            "$ref": "#/components/schemas/Signature"
          }
        }
      },
      "WithdrawallthedelegatorsdelegationrewardsResponse": {
        "title": "WithdrawallthedelegatorsdelegationrewardsResponse",
        "type": "object",
        "properties": {
          "msg": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": ""
          },
          "fee": {
            "$ref": "#/components/schemas/Fee"
          },
          "memo": {
            "type": "string"
          },
          "signature": {
            "$ref": "#/components/schemas/Signature"
          }
        }
      },
      "Withdrawrequestbody2": {
        "title": "Withdrawrequestbody2",
        "type": "object",
        "properties": {
          "base_req": {
            "$ref": "#/components/schemas/BaseReq"
          },
          "withdraw_address": {
            "type": "string",
            "description": "bech32 encoded address",
            "example": "terra1wg2mlrxdmnnkkykgqg4znky86nyrtc45q336yv"
          }
        }
      },
      "WithdrawthevalidatorsrewardsResponse": {
        "title": "WithdrawthevalidatorsrewardsResponse",
        "type": "object",
        "properties": {
          "msg": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": ""
          },
          "fee": {
            "$ref": "#/components/schemas/Fee"
          },
          "memo": {
            "type": "string"
          },
          "signature": {
            "$ref": "#/components/schemas/Signature"
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "Terra REST",
      "description": ""
    },
    {
      "name": "Tendermint RPC",
      "description": ""
    },
    {
      "name": "Transactions",
      "description": ""
    },
    {
      "name": "Bank",
      "description": ""
    },
    {
      "name": "Auth",
      "description": ""
    },
    {
      "name": "Staking",
      "description": ""
    },
    {
      "name": "Slashing",
      "description": ""
    },
    {
      "name": "Governance",
      "description": ""
    },
    {
      "name": "Distribution",
      "description": ""
    },
    {
      "name": "Mint",
      "description": ""
    },
    {
      "name": "Market",
      "description": ""
    },
    {
      "name": "Oracle",
      "description": ""
    },
    {
      "name": "Treasury",
      "description": ""
    },
    {
      "name": "Wasm",
      "description": ""
    },
    {
      "name": "Query",
      "description": ""
    },
    {
      "name": "Service",
      "description": ""
    },
    {
      "name": "Dashboard",
      "description": ""
    }
  ]
}